<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NordicID.NurApi.Net</name>
    </assembly>
    <members>
        <member name="T:NurApiDotNet.NurApi">
            <summary>
            NurApi class is used to manage connection and communicate with RFID device.<br/><br/>
            Discover devices: <see cref="T:NurApiDotNet.NurDeviceDiscovery"/><br/>
            Connect device: <see cref="M:NurApiDotNet.NurApi.Connect(System.Uri)"/><br/>
            </summary>
            <example>
            See full sample app <see cref="T:NurApiDotNet.NurApiDocSample"/>
            </example>
            <summary>
            NurApi class
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.RESET_BOOTLOADER_DFU_START">
            <summary>
            Instruct the restart command to enter the DFU mode.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.RESET_POWEROFF">
            <summary>
            Instruct the restart command to actually power off the device.
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.AccessoryCommand">
            <summary>
            Accessory commands
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_GET_FWVERSION">
            <summary> BLE FW version.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_GET_CFG">
            <summary>  Get configuration command.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_SET_CFG">
            <summary>Set configuration command.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_GET_BATT">
            <summary> Get Battery Voltage(in mV) command.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_READ_BARCODE">
            <summary> Read Imager/barcode command.(blocking).</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_RESTART">
            <summary> System restart command.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_READ_BARCODE_ASYNC">
            <summary> Asynchronous barcode scan (non-blocking). </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_SET_LED_OP">
            <summary> Set external LED. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_BEEP_ASYNC">
            <summary> Asynchronous beep operation. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_GET_BATT_INFO">
            <summary> Battery information ("extended information"). </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_ENTER_TESTMODE">
            <summary> NUR/BLE Radio TestMode settings </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_GET_HEALTHSTATE">
            <summary> Get HW status (imager, NUR module etc.). </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_WIRELESS_CHARGE">
            <summary> Set/ get wireless charging. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_IMAGER">
            <summary> Imager base Command </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_VIBRATE">
            <summary> Use device's vibra. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_CLEAR_PAIRS">
            <summary> Clear device pairing information. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_GET_MODEL_INFORMATION">
            <summary> Get Model information. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_BLE_PACKET_SEND_TEST">
            <summary> BLE Packet Test via NUR_NOTIFY_BLE_READER. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_GET_CONNECTION_INFO">
            <summary> Get connection info. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_SENSOR_ENUMERATE">
            <summary> Enumerate sensors. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_SENSOR_SET_CONFIG">
            <summary> Set sensor config. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_SENSOR_GET_CONFIG">
            <summary> Get sensor config. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_SENSOR_SET_FILTER">
            <summary> Set sensor filter. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_SENSOR_GET_FILTER">
            <summary> Get sensor filter. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_SENSOR_GET_VALUE">
            <summary> Get sensor value. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_SENSOR_SET_SETTINGS">
            <summary> Get sensor settings.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_SENSOR_GET_SETTINGS">
            <summary> Get sensor settings.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_CONFLICTED_27">
            <summary> CONFLICTED. Remove if used.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_MCUMGR">
            <summary> Mcumgr Base Command </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryCommand.ACC_EXT_HID">
            <summary> HID Base command </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.AccessoryEventType">
            <summary>
            Event types of AccessoryEvent
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryEventType.None">
            <summary>
             No event
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryEventType.Barcode">
            <summary>
            Barcode result
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryEventType.SensorChanged">
            <summary>
            Sensor removed/added
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryEventType.SensorRangeData">
            <summary>
            Range sensor data
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryEventType.SensorTofFrBfaRawData">
            <summary>
            Raw data from FR BFA ToF sensor
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryEventType.SpeedTest">
            <summary>
            SpeedTest result
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.HIDMode">
            <summary>
            HID modes of Accessory
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.HIDMode.Disabled">
            <summary>
            HID disabled
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.HIDMode.Barcode">
            <summary>
            HID Barcode only
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.HIDMode.RFID">
            <summary>
            HID RFID only
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.HIDMode.BarcodeRFID">
            <summary>
            HID Barcode + RFID
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.AccessoryFWInfo">
            <summary>
            Information about accessory firmwares
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryFWInfo.ApplicationVersion">
            <summary>
            Application FW version of accessory
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryFWInfo.FullAppVersion">
            <summary>
            Full version information of accessory application 
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryFWInfo.BootloaderVersion">
            <summary>
            Bootloader FW version of accessory
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccessoryFWInfo.#ctor(System.String)">
            <summary>
            Decode accessory device version info 
            </summary>
            <param name="version"></param>
        </member>
        <member name="T:NurApiDotNet.NurApi.AccessoryBatteryInfo">
            <summary>
            Hold information about battery of accessory
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryBatteryInfo.Charging">
            <summary>
            True if accessory currently charging
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryBatteryInfo.Percentage">
            <summary>
            Battery percentage level 0-100. -1 if unknown
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryBatteryInfo.Voltage">
            <summary>
            Battery voltage level in mV. -1 if unknown.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryBatteryInfo.Current">
            <summary>
            Current battery current draw in mA.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryBatteryInfo.Capacity">
            <summary>
            Battery capacity in mAh. -1 if unknown.
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccGetFwInfo">
            <summary>
            Get information about the accessory device
            </summary>
            <returns>string format: Applicationversion space details;bootloaderversion</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccGetConnectionInfo">
            <summary>
            Get information about the connection
            </summary>
            <returns>MTU and DLE values as string</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccGetModelInfo">
            <summary>
            detailed info about model
            </summary>
            <returns>detail model info</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccGetBatteryInfo">
            <summary>
            Get battery info of accessory
            </summary>
            <returns><see cref="T:NurApiDotNet.NurApi.AccessoryBatteryInfo"/> object holding battery information</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccBeep(System.Int32)">
            <summary>
            Generate simple beep sound for accessory device
            </summary>
            <param name="beeptime">beep time (1-5000ms)</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccSetLedOp(System.Int32)">
            <summary>
             Sets the LED operation mode.
            </summary>
            <param name="mode">Mode to set. 0=off, 1=on, 2=blink</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccVibrate(System.Int32,System.Int32)">
            <summary>
            Use vibra of accessory device<br></br>
            Parameter exception thrown if vibratingTime * count exceeds 2000ms
            </summary>
            <param name="vibratingTime">vibration ontime and offtime in milliseconds</param>
            <param name="count">Number of times to repeat</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccGetHwHealth">
            <summary>
            Get information about HW health
            </summary>
            <returns></returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccGetConfig">
            <summary>
            Get configuration from accessory.
            </summary>        
            <returns>Returns AccessoryConfig object holding diagnostics report.</returns>
            <seealso cref="T:NurApiDotNet.AccessoryConfig"/>     
        </member>
        <member name="M:NurApiDotNet.NurApi.AccSetConfig(NurApiDotNet.AccessoryConfig)">
            <summary>
            Set accessory configuration. 
            </summary>
            <param name="cfg">A valid accessory configuration</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccSetHIDMode(NurApiDotNet.NurApi.HIDMode)">
            <summary>
            Set <see cref="T:NurApiDotNet.NurApi.HIDMode"/><br></br>
            Note: Accessory restart required after set HID mode.
            </summary>
            <param name="mode"><see>HIDMode</see></param>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccGetHIDMode">
            <summary>
            Get current HID mode
            </summary>
            <returns><see cref="T:NurApiDotNet.NurApi.HIDMode"/></returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccRestart">
            <summary>
            Restart accessory.<br></br>
            Note: Accessory will be disconnect.
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccPowerOff">
            <summary>
            Power off accessory.<br></br>
            Note: Accessory will be disconnect.
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.PairingMode">
            <summary>
            Pairing mode
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.PairingMode.Disabled">
            <summary>
            Disabled. Accessory cannot be paired with host device.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.PairingMode.Enabled">
            <summary>
            Enabled. Accessory can be paired with the host device.
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.RestartBLEModuleToDFU">
            <summary>
            Restart the BLE module to DFU (Device Firmware Upgrade) mode.<br/>
            After the call, another application or built-in updater can upgrade the BLE module's FW.
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccSetPairingMode(NurApiDotNet.NurApi.PairingMode)">
            <summary>
            Set <see cref="T:NurApiDotNet.NurApi.PairingMode"/><br></br>
            Note: Accessory restart required after set PairingMode mode.
            </summary>
            <param name="mode"><see>HIDMode</see></param>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccGetPairingMode">
            <summary>
            Get current Pairing mode
            </summary>
            <returns><see cref="T:NurApiDotNet.NurApi.PairingMode"/></returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccClearPairingData">
            <summary>
            Clear pairing information from accessory device <br></br>
            Note: if pairings exist then accessory device will be rebooted.
            </summary>        
        </member>
        <member name="F:NurApiDotNet.NurApi.AccBarcodeEncoding">
            <summary>
            Set/Get Barcode Encoding. Default UTF8
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.ImagerType">
            <summary>
            Imager types
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ImagerType.Opticon">
            <summary>
            Opticon
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.ImagerCommand">
            <summary>
            Imager Commands
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ImagerCommand.IMAGER_CMD_RAW">
            <summary> Imager configuration Command </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ImagerCommand.IMAGER_POWER">
            <summary> Imager power on/off </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ImagerCommand.IMAGER_AIM">
            <summary> Imager aiming on/off </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.BarcodeReadStatus">
            <summary>
            Status of Barcode read operation
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.BarcodeReadStatus.Success">
            <summary>
            Barcode read success
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.BarcodeReadStatus.HardwareNotAvailable">
            <summary>
            Hardware failure or not present on the device
            </summary>           
        </member>
        <member name="F:NurApiDotNet.NurApi.BarcodeReadStatus.NoBarcode">
            <summary>
            Timeout
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.BarcodeReadStatus.Cancelled">
            <summary>
            Reading operation cancelled
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.BarcodeReadStatus.Unknown">
            <summary>
            Unknown status
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.BarcodeReadResult">
            <summary>
            Barcode read result<br/>
            
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.BarcodeReadResult.Status">
            <summary>
            Get status
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccBarcodeStart(System.UInt16)">
            <summary>
            Start scan for barcode reader engine<br></br>
            This function only start barcode reading. Use <see>AccessoryEvent</see> for receiving scan results.
            </summary>
            <param name="timeout">Timeout in milliseconds</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccBarcodeCancel">
            <summary>
            Cancel barcode scan immediately.
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccBarcodeRead(System.Byte[],System.Text.Encoding)">
            <summary>
            Read barcode scan result from Accessory Event data
            </summary>
            <param name="reply">Scan result reply from accessory</param>
            <param name="encoding">Encoding to use to translate barcode data to string</param>
            <exception cref="T:System.Exception">Thrown if cannot encode string </exception>  
            <returns>Result of scan or empty string if cancelled or no result during timeout</returns>        
        </member>
        <member name="M:NurApiDotNet.NurApi.AccBarcodeRead(System.Byte[])">
            <summary>
            Read barcode scan result from Accessory Event data
            </summary>
            <param name="reply">Scan result reply from accessory</param>
            <returns>Result of scan or empty string if cancelled or no result during timeout. Barcode data is translated to string using ASCII encoding.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccImagerAim(System.Boolean)">
            <summary>
            Set Imager aimer on/off
            </summary>
            <param name="aim">true aiming on</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccImagerCmd(NurApiDotNet.NurApi.ImagerType,System.String)">
            <summary>
            Send configuring command to Imager
            </summary>
            <param name="imager">Type of imager <see cref="T:NurApiDotNet.NurApi.ImagerType"/></param>
            <param name="cmd">Configuration string</param>
            <returns>byte array of response depending on command code(s) sent to imager. null if command string not valid. First byte of array contains ACK (0x6 success) or NAK (0x15 fail)</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccImagerSaveConfig(NurApiDotNet.NurApi.ImagerType)">
            <summary>
            After sending configuration to imager using <see cref="M:NurApiDotNet.NurApi.AccImagerCmd(NurApiDotNet.NurApi.ImagerType,System.String)"/>, settings are ready to use but next power down causes settings to lost.<br></br>
            Therefore, it’s important to save settings to volatile memory of imager.
            </summary>
            <param name="imager">Type of imager <see cref="T:NurApiDotNet.NurApi.ImagerType"/></param>
        </member>
        <member name="T:NurApiDotNet.NurApi.AccessorySensorType">
            <summary>
            Accessory sensor types
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorType.UltrasonicMaxSonar">
            <summary>
            Maxbotix HRUSB MaxSonar EZ range sensor
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorType.DeviceGpio">
            <summary>
            Device GPIO input pins
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorType.DeviceTap">
            <summary>
            Device tap sensor
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorType.DeviceToF">
            <summary>
            Device Time of Flight sensor
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorType.ExtensionToFFrBfa">
            <summary>
            FR BFA Time-of-Flight sensor
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.AccessorySensorFeature">
            <summary>
            Accessory sensor features (used as a bitmask)
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorFeature.Range">
            <summary>
            GPIO changes is triggered based on limit threshold of read values (range sensor)
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorFeature.StreamValue">
            <summary>
            Supports streaming of raw sensor values
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.AccessorySensorMode">
            <summary>
            Accessory sensor mode (used as a bitmask)
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorMode.Gpio">
            <summary>
            Report changes as GPIO events on IOChangeEvent. IOChangeData.sensor will be set to true, and for compability reasons, 128 needs to be added to IOChangeData.source to get the source id used for Accessory Sensors.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorMode.Stream">
            <summary>
            Stream raw sensor values via an event handler (<see>AccessoryRangeDataEvent</see>) (feature flag requirement: <see>AccessorySensorFeature.StreamValue</see>)
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.AccessorySensorSource">
            <summary>
            Accessory sensor source
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorSource.GpioPin1">
            <summary>
            GPIO pin 1
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorSource.GpioPin2">
            <summary>
            GPIO pin 2
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorSource.GpioPin3">
            <summary>
            GPIO pin 3
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorSource.GpioPin4">
            <summary>
            GPIO pin 4
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorSource.ButtonTrigger">
            <summary>
            Trigger button pressed
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorSource.ButtonPower">
            <summary>
            Power button pressed
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorSource.ButtonUnpair">
            <summary>
            Unpair button pressed
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorSource.TapSensor">
            <summary>
            Tap Sensor
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorSource.USB1Sensor">
            <summary>
            USB Sensor connected directly or to hub port 1
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorSource.USB2Sensor">
            <summary>
            USB Sensor hub port 2
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorSource.USB3Sensor">
            <summary>
            USB Sensor hub port 3
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorSource.USB4Sensor">
            <summary>
            USB Sensor hub port 4
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorSource.ToFSensor">
            <summary>
            ToF Sensor
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorSource.ToFSensorFrBfa">
            <summary>
            FR BFA ToF Sensor
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.AccessorySensorConfig">
            <summary>
            Nur accessory sensor configuration.
            </summary>  
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorConfig.source">
            <summary>
            Sensor/GPIO pin number changes will be reported on. Assigned by reader.
            <see> AccessorySensorSource </see>
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorConfig.type">
            <summary>
            Type of sensor (see AccessorySensorType). Assigned by reader.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorConfig.feature">
            <summary>
            Features supported by this sensor as a bitmask (see AccessorySensorFeature). Assigned by reader.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorConfig.mode">
            <summary>
            Configurable bitmask specifying how sensor changes are reported (see AccessorySensorMode).
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccessorySensorConfig.HasMode(NurApiDotNet.NurApi.AccessorySensorMode)">
            <summary>
            Check if specific mode flag set
            </summary>
            <param name="flag">mode to check</param>
            <returns>true if set</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccessorySensorConfig.SetModeFlag(NurApiDotNet.NurApi.AccessorySensorMode)">
            <summary>
            Set mode flag
            </summary>
            <param name="flag">flag to set</param>            
        </member>
        <member name="M:NurApiDotNet.NurApi.AccessorySensorConfig.ClearModeFlag(NurApiDotNet.NurApi.AccessorySensorMode)">
            <summary>
            Clear mode flag
            </summary>
            <param name="flag">flag to clear</param>            
        </member>
        <member name="M:NurApiDotNet.NurApi.AccessorySensorConfig.HasFeature(NurApiDotNet.NurApi.AccessorySensorFeature)">
            <summary>
             Check if specific feature flag set
            </summary>
            <param name="flag">feature to check</param>
            <returns>true if set</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccessorySensorConfig.getModeFlags">
            <summary>
             Get mode flags set
            </summary>
            <returns>null if no flags set</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccessorySensorConfig.getFeatureFlags">
            <summary>
             Get feature flags set
            </summary>
            <returns>null if no flags set.</returns>
        </member>
        <member name="T:NurApiDotNet.NurApi.AccessorySensorFilterThrehold">
            <summary>
            Nur accessory sensor filter threshold.
            </summary>   
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorFilterThrehold.lo">
            <summary>
            Low threshold limit. GPIO event will go lo->high when sensor value is lower than this value.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorFilterThrehold.hi">
            <summary>
            High threshold limit. GPIO event will go high->lo when sensor value equals or is higher than this value.
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.AccessorySensorFilterFlag">
            <summary>
            Accessory sensor mode (used as a bitmask)
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorFilterFlag.Range">
            <summary>
            rangeThreshold defines when range sensor triggers events
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorFilterFlag.Time">
            <summary>
            timeThreshold defines event debounce filter
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.AccessorySensorFilter">
            <summary>
            Nur accessory sensor filter. Configures sensor triggers/debounce parameters.
            </summary>    
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorFilter.flags">
            <summary>
            Enabled filter flags (see AccessorySensorFilterFlag) as a bitmask.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorFilter.rangeThreshold">
            <summary>
            Range threshold. Goes high->low when sensors reads less than lo, low->high when sensors reads equals or more than hi. Unit: mm.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorFilter.timeThreshold">
            <summary>
            Time threshold. Triggers when level going high->low for lo amount of time, and low->high for hi amount of time. Unit: ms.
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccSensorEnumerate">
            <summary>
            Get all connected sensors
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccSensorSetConfig(NurApiDotNet.NurApi.AccessorySensorConfig)">
            <summary>
            Change sensor configuration (currently only the mode can be changed).<br/>
            cfg.source is used to identify the sensor.
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccSensorGetConfig(NurApiDotNet.NurApi.AccessorySensorSource)">
            <summary>
            Get current sensor configuration.
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccSensorSetFilter(NurApiDotNet.NurApi.AccessorySensorSource,NurApiDotNet.NurApi.AccessorySensorFilter)">
            <summary>
            Change filter of sensor.
            </summary>
            <param name="source">source id of sensor</param>
            <param name="filter">filter to set</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccSensorGetFilter(NurApiDotNet.NurApi.AccessorySensorSource)">
            <summary>
            Get filter settings of sensor
            </summary>
            <param name="source">Source of sensor</param>
            <returns>filter of sensor</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccSensorGetValue(NurApiDotNet.NurApi.AccessorySensorSource)">
            <summary>
             Get sensor value
            </summary>
            <param name="source">source of sensor</param>
            <returns>AccSensorData</returns>
        </member>
        <member name="T:NurApiDotNet.NurApi.AccessorySensorSettings">
            <summary>
             Sensor settings for FR FBA
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorSettings.AccessorySensorSettingsFrFba.freqHz">
            <summary>
            Sampling frequency in hertz. Value 1 - 60
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.NUR_ACC_SENSOR_TYPE">
            <summary>
             Sensor types
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccSensorSetSettings(NurApiDotNet.NurApi.AccessorySensorSource,NurApiDotNet.NurApi.AccessorySensorType,NurApiDotNet.NurApi.AccessorySensorSettings)">
            <summary>
             Set sensor settings
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccSensorGetSettings(NurApiDotNet.NurApi.AccessorySensorSource,NurApiDotNet.NurApi.AccessorySensorType)">
            <summary>
             Get sensor settings
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.WIRELESS_CHARGE_STATUS">
            <summary>
            Accessory device wireless charging status
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WIRELESS_CHARGE_STATUS.WIRELESS_CHARGE_OFF">
            <summary>
            The accessory stated that wireless charging is currently off.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WIRELESS_CHARGE_STATUS.WIRELESS_CHARGE_ON">
            <summary>
            The accessory stated that wireless charging is currently on.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WIRELESS_CHARGE_STATUS.WIRELESS_CHARGE_REFUSED">
            <summary>
            The accessory stated that wireless charging is currently not available.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WIRELESS_CHARGE_STATUS.WIRELESS_CHARGE_FAIL">
            <summary>
            There was an unexpected error in the communications (no reply, timeout etc.)
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WIRELESS_CHARGE_STATUS.WIRELESS_CHARGE_NOT_SUPPORTED">
            <summary>
            The accessory device replied with HW mismatch error.
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.AccWirelessChargeStatus">
            <summary>
            Wireless charging status
            </summary>
            <seealso cref="M:NurApiDotNet.NurApi.AccSetWirelessCharge(System.Boolean)"/>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccWirelessChargeStatus.OFF">
            <summary>
            The accessory stated that wireless charging is currently off.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccWirelessChargeStatus.ON">
            <summary>
            The accessory stated that wireless charging is currently on.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccWirelessChargeStatus.REFUSED">
            <summary>
            The accessory stated that wireless charging is currently not available.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccWirelessChargeStatus.FAIL">
            <summary>
            There was an unexpected error in the communications (no reply, timeout etc..)
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccWirelessChargeStatus.NOT_SUPPORTED">
            <summary>
            The accessory device replied with HW mismatch error
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccGetWirelessChargeStatus">
            <summary>
            Get wireless charge status.
            </summary>
            <returns>Status of wireless charge <see cref="T:NurApiDotNet.NurApi.AccWirelessChargeStatus"/></returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccSetWirelessCharge(System.Boolean)">
            <summary>
            Set wireless charge on/off
            </summary>
            <param name="isOn">>true to activate wireless charging</param>       
            <returns>Status of wireless charge <see cref="T:NurApiDotNet.NurApi.AccWirelessChargeStatus"/></returns>
        </member>
        <member name="F:NurApiDotNet.NurApi.IDBUFFER_ENTRY_SIZE_WITH_IRDATA">
            <summary>
            The size of the IDBUFFER entry with IrData in bytes.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.IDBUFFER_ENTRY_SIZE_WITHOUT_IRDATA">
            <summary>
            The size of the IDBUFFER entry without IrData in bytes.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.IDBUFFER_ENTRY_SIZE_WITHOUT_METADATA">
            <summary>
            The size of the IDBUFFER entry without MetaData in bytes.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_EPC_LENGTH">
            <summary>
            Maximum length of EPC data in bytes.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_EPC_LENGTH_EX">
            <summary>
            Maximum length of EPC data in bytes with extended tag data.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_IRDATA_LENGTH">
            <summary>
            Maximum length of associated inventory read data
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_EE_EPCLEN">
            <summary>
            Maximum length of an enumerated EPC.
            </summary>		
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_BLOCKLOCK_WORDS">
            <summary>
            Maximum number of block permalock words in response or lock parameter.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_EE_TIDLEN">
            <summary>		
            Maximum length of assigned TID data in EPC enumeration.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_SELMASK">
            <summary>
            Maximum length of Select mask data in bytes.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_BITSTR_BITS">
            <summary>
            Maximum number of bits in the custom bit stream.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_REGION_NAME">
            <summary>
            Maximum length of region name in bytes.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_GPIO">
            <summary>
            Maximum number of GPIOs.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_MAPPINGLEN">
            <summary>
            Maximum name of an antenna mapping.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAXN_ANTMAPPINGS">
            <summary>
            Maximum number of antenna mappings.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_FILTERS">
            <summary> Maximum number of extended inventory filters. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_CUSTOM_FREQS">
            <summary> Maximum number of custom frequencies in custom hop table. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_FREQUENCY">
            <summary> Maximum value of custom hop table frequency in kHz. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MIN_FREQUENCY">
            <summary> Minimum value of custom hop table frequency in kHz. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_PAUSETIME">
            <summary> Maximum value of custom hop table pause time. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MIN_LBTTHRESH">
            <summary> Minimum LBT threshold </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CUSTHT_TARI_125">
            <summary> Custom hoptable's Tari setting 12.5us. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CUSTHT_TARI_25">
            <summary> Custom hoptable's Tari setting 25us. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_SERIAL_LENGTH">
            <summary> Max serial length. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_NAME_LENGTH">
            <summary> Max name length. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_FCCID_LENGTH">
            <summary> Max fccId length. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_HWVER_LENGTH">
            <summary> Max hwVer length. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DEFAULT_BAUDRATE">
            <summary>Default baudrate 115200 bps</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.BR_115200">
            <summary>Baudrate 115200 bps</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.BR_230400">
            <summary>Baudrate 230400 bps</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.BR_500000">
            <summary>Baudrate 500000 bps</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.BR_1000000">
            <summary>Baudrate 1000 000 bps</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.BR_1500000">
            <summary>Baudrate 1500 000 bps</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.BR_38400">
            <summary>Baudrate 38400 bps</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.BR_9600">
            <summary>Baudrate 9600 bps</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.LOG_VERBOSE">
            <summary>Log level Verbose</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.LOG_ERROR">
            <summary>Log level Error. Errors are logged</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.LOG_USER">
            <summary>Log level User. User defined log items</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.LOG_DATA">
            <summary>Log level data. Data items are shown in the log</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.LOG_ALL">
            <summary>All items are logged</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.BANK_PASSWD">
            <summary>Password memory bank.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.BANK_EPC">
            <summary>EPC memory bank.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.BANK_TID">
            <summary>TID memory bank.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.BANK_USER">
            <summary>User memory bank.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.LOCK_OPEN">
            <summary>Associated memory bank is readable from open/secured states.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.LOCK_PERMAWRITE">
            <summary>Associated memory bank is permanently writable from open/secured states and may never be locked.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.LOCK_SECURED">
            <summary>Associated memory bank is writable only from secured state.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.LOCK_PERMALOCK">
            <summary>Associated memory bank is not writable from any state.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.LOCK_USERMEM">
            <summary>User memory bank lock mask.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.LOCK_TIDMEM">
            <summary>TID memory bank lock mask.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.LOCK_EPCMEM">
            <summary>EPC memory bank lock mask.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.LOCK_ACCESSPWD">
            <summary>Access password memory lock mask.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.LOCK_KILLPWD">
            <summary>Kill password memory lock mask.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TRACETAG_NO_EPC">
            <summary>Do not transfer EPC back from trace tag function.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TRACETAG_START_CONTINUOUS">
            <summary>Start continuous tag tracing.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TRACETAG_STOP_CONTINUOUS">
            <summary>Stop continuous tag tracing.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AUTOTUNE_MODE_ENABLE">
            <summary>Enable autotune procedure during RF operations.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AUTOTUNE_MODE_THRESHOLD_ENABLE">
            <summary>Enable dBm threshold for autotune procedure.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GEN2V2_MAX_AUTHBYTES">
            <summary> Gen 2 version 2 "Authenticate": maximum byte length of the message. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SZ_TAM2_CMACLEN">
            <summary> ISO29167-10 authentication: size of protection mode 2,3 CMAC in bytes. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_TAM_OFFSET">
            <summary> ISO29167-10 authentication: maximum block offset/address value. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TAM_CHALLENGE_BYTELEN">
            <summary> ISO29167-10 authentication: Challenge length </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TAM1_MSG_BYTELENGTH">
            <summary> ISO29167-10 authentication: TAM1 message length </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TAM_KEY_BYTELENGTH">
            <summary> ISO29167-10 authentication: Key length </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ISO29167_TAM_CONSTANT">
            <summary> ISO29167-10 authentication: Fixed CTAM value </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GPIO_ACT_NONE">
            <summary>
            No action. GPIO state can be read manually.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GPIO_ACT_NOTIFY">
            <summary>
            Send <see cref="E:NurApiDotNet.NurApi.IOChangeEvent"/> notification on GPIO/sensor change.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GPIO_ACT_SCANTAG">
            <summary>
            Start single tag scan on GPIO/sensor change. Tag result is received with <see cref="E:NurApiDotNet.NurApi.TriggerReadEvent"/> notification.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GPIO_ACT_INVENTORY">
            <summary>
            Start inventory on GPIO/sensor change. Result is received with <see cref="E:NurApiDotNet.NurApi.InventoryStreamEvent"/> notification.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GPIO_EDGE_FALLING">
            <summary>
            Trigger IO's configured action on falling edge of IO
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GPIO_EDGE_RISING">
            <summary>
            Trigger IO's configured action on rising edge of IO
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GPIO_EDGE_BOTH">
            <summary>
            Trigger IO's configured action on both edges of IO
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GPIO_TYPE_OUTPUT">
            <summary>
            GPIO is configured as output pin.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GPIO_TYPE_INPUT">
            <summary>
            GPIO is configured as input pin.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GPIO_TYPE_RFIDON">
            <summary>
            GPIO will act as a Sampo S1 RFID on led (high active)
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GPIO_TYPE_RFIDREAD">
            <summary>
            GPIO will act as a Sampo S1 RFID read led (high active)
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GPIO_TYPE_BEEPER">
            <summary>
            GPIO will act as a beeper (high active)
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GPIO_TYPE_ANTCTL1">
            <summary>
            GPIO is configured as antenna control 1 (bit0)
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GPIO_TYPE_ANTCTL2">
            <summary>
            GPIO is configured as antenna control 2 (bit1)
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GPIO1">
            <summary>
            Module GPIO 1
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GPIO2">
            <summary>
            Module GPIO 2
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GPIO3">
            <summary>
            Module GPIO 3
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GPIO4">
            <summary>
            Module GPIO 4
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GPIO5">
            <summary>
            Module GPIO 5
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GPIO6">
            <summary>
            Module GPIO 6
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GPIO7">
            <summary>
            Module GPIO 7
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GPIO8">
            <summary>
            Module GPIO 8
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.REGIONID_CURRENT">
            <summary>
            Region ID: Represent current region set in to module
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.REGIONID_EU">
            <summary>
            Region ID: Europe
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.REGIONID_FCC">
            <summary>
            Region ID: North-America
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.REGIONID_PRC">
            <summary>
            Region ID: People's Republic of China (Upper Band)
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.REGIONID_MALAYSIA">
            <summary>
            Region ID: Malaysia
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.REGIONID_BRAZIL">
            <summary>
            Region ID: Brazil
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.REGIONID_AUSTRALIA">
            <summary>
            Region ID: Australia
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.REGIONID_NEWZEALAND">
            <summary>
            Region ID: New Zealand
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.REGIONID_JA250MW">
            <summary>
            Region ID: Japan 250mW LBT
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.REGIONID_JA500MW">
            <summary>
            Region ID: Japan 500mW DRM
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.REGIONID_KOREA">
            <summary>
            Region ID: Korean LBT.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.REGIONID_KOREA_LBT">
            <summary>
            Region ID: Korean LBT. For compatibility
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.REGIONID_INDIA">
            <summary>
            Region ID: India.
            </summary>		
        </member>
        <member name="F:NurApiDotNet.NurApi.REGIONID_RUSSIA">
            <summary>
            Region ID: Russian (EU with first channel missing).
            </summary>		
        </member>
        <member name="F:NurApiDotNet.NurApi.REGIONID_VIETNAM">
            <summary>
            Region ID: Vietnamese.
            </summary>		
        </member>
        <member name="F:NurApiDotNet.NurApi.REGIONID_SINGAPORE">
            <summary>
            Region ID: Singapore.
            </summary>		
        </member>
        <member name="F:NurApiDotNet.NurApi.REGIONID_THAILAND">
            <summary>
            Region ID: Thailand. For compatibility.
            </summary>		
        </member>
        <member name="F:NurApiDotNet.NurApi.REGIONID_PHILIPPINES">
            <summary>
            Region ID: Philippines. For compatibility.
            </summary>				
        </member>
        <member name="F:NurApiDotNet.NurApi.REGIONID_MOROCCO">
            <summary>
            Region ID: Morocco.
            </summary>				
        </member>
        <member name="F:NurApiDotNet.NurApi.REGIONID_PERU">
            <summary>
            Region ID: Peru.
            </summary>				
        </member>
        <member name="F:NurApiDotNet.NurApi.REGIONID_ISRAEL">
            <summary>
            Region ID: Israel.
            </summary>				
        </member>
        <member name="F:NurApiDotNet.NurApi.REGIONID_HONGKONG">
            <summary>
            Region ID: Hong Kong.
            </summary>				
        </member>
        <member name="F:NurApiDotNet.NurApi.REGIONID_LAST">
            <summary>
            Last region ID.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_CONFIG_REGIONS">
            <summary>
            Maximum number of regions.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.REGIONID_CUSTOM">
            <summary>
            Region ID: custom
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_LINKFREQ">
            <summary>
            linkFreq field in struct ModuleSetup is valid
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_RXDEC">
            <summary>
            rxDecoding field in struct ModuleSetup is valid
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_TXLEVEL">
            <summary>
            txLevel field in struct ModuleSetup is valid
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_TXMOD">
            <summary>
            txModulation field in struct ModuleSetup is valid
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_REGION">
            <summary>
            regionId field in struct ModuleSetup is valid
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_INVQ">
            <summary>
            inventoryQ field in struct ModuleSetup is valid
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_INVSESSION">
            <summary>
            inventorySession field in struct ModuleSetup is valid
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_INVROUNDS">
            <summary>
            inventoryRounds field in struct ModuleSetup is valid
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_ANTMASK">
            <summary>
            antennaMask field in struct ModuleSetup is valid
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_SCANSINGLETO">
            <summary>
            scanSingleTriggerTimeout field in struct ModuleSetup is valid
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_INVENTORYTO">
            <summary>
            inventoryTriggerTimeout field in struct ModuleSetup is valid
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_SELECTEDANTENNA">
            <summary>
            selectedAntenna field in struct ModuleSetup is valid
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_OPFLAGS">
            <summary>
            opFlags field in struct ModuleSetup is valid
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_INVTARGET">
            <summary>
            inventoryTarget field in struct ModuleSetup is valid
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_INVEPCLEN">
            <summary>
            inventoryEpcLength field in struct ModuleSetup is valid
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_READRSSIFILTER">
            <summary>
            readRssiFilter field in struct ModuleSetup is valid
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_WRITERSSIFILTER">
            <summary>
            writeRssiFilter field in struct ModuleSetup is valid
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_INVRSSIFILTER">
            <summary>
            inventoryRssiFilter field in struct ModuleSetup is valid
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_READTIMEOUT">
            <summary>
            readTO field in struct ModuleSetup is valid.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_WRITETIMEOUT">
            <summary>
            writeTO field in struct ModuleSetup is valid.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_LOCKTIMEOUT">
            <summary>
            lockTO field in struct ModuleSetup is valid.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_KILLTIMEOUT">
            <summary>
            killTO field in struct ModuleSetup is valid.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_AUTOPERIOD">
            <summary>
            periodSetup field in struct ModuleSetup is valid.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_PERANTPOWER">
            <summary>
            perAntPower field in struct ModuleSetup is valid.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_PERANTOFFSET">
            <summary>
            perAntOffset field in struct ModuleSetup is valid.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_ANTMASKEX">
            <summary>
            antennaMaskEx field in struct NUR_MODULESETUP is valid.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_AUTOTUNE">
            <summary>
            autotune field in struct NUR_MODULESETUP is valid (run-time automatic tuning).
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_PERANTPOWER_EX">
            <summary>
            The antPowerEx field in struct NUR_MODULESETUP is valid.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_RXSENS">
            <summary>
            rxSensitivity field in struct NUR_MODULESETUP is valid.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_RFPROFILE">
            <summary>
            rfProfile field in struct NUR_MODULESETUP is valid.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_TO_SLEEP_TIME">
            <summary>
            "To sleep time" field in struct NUR_MODULESETUP is valid.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SETUP_ALL">
            <summary>
            All setup flags.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.OPFLAGS_EN_HOPEVENTS">
            <summary>        
            Notification NUR_NOTIFICATION_HOPEVENT is enabled.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.OPFLAGS_INVSTREAM_ZEROS">
            <summary>
            Inventory stream frunction will report zero count inventory rounds also.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.OPFLAGS_EN_TUNEEVENTS">
            <summary>        
            <para>Set this flag to enable the run-time tuning events.</para>
            <para>See also the <seealso cref="E:NurApiDotNet.NurApi.TuneEvent"/>, <seealso cref="T:NurApiDotNet.NurApi.TuneEventArgs"/> and <seealso cref="T:NurApiDotNet.TuneEventData"/>.</para>
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.OPFLAGS_EN_EXACT_BLF">
            <summary>        
            Return exact BLF in Hz in tag meta data frequency field. Supported only in NUR L2 modules.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.OPFLAGS_EN_TAG_PHASE">
            <summary>        
            Return tag phase angle in units of tenths of degrees in tag meta data timestamp field. Supported only in NUR2 modules.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.OPFLAGS_EN_NXP_BID">
            <summary>
            NXP Brand ID in NXP UCODE8 tag is enabled
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.OPFLAGS_EN_IR_MEM_OVERRUN">
            <summary>
            Inventory read will report EPC even if there is memory overrun error (f.ex. no user mem bank)
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.OPFLAGS_EN_PHASE_DIFF">
            <summary>
            Return tag phase angle difference in units of tenths of degrees in tag meta data timestamp field. Supported only in NUR3 modules.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.STORE_RF">
            <summary>
            Store RF settings to module internal non-volatile memory.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.STORE_GPIO">
            <summary>
            Store GPIO/Sensor settings to module internal non-volatile memory.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.STORE_BAUDRATE">
            <summary>
            Store baudrate settings to module internal non-volatile memory.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.STORE_OPFLAGS">
            <summary>
            Store Opflags settings to module internal non-volatile memory.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.STORE_ALL">
            <summary>
            Store all settings to module internal non-volatile memory.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CHERR_COUNT">
            <summary>
            Custom hop table command error code: Invalid custom hoptable channel count
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CHERR_CHTIME">
            <summary>
            Custom hop table command error code: Invalid custom hoptable channel time
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CHERR_PAUSETIME">
            <summary>
            Custom hop table command error code: Invalid custom hoptable pause time
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CHERR_LF">
            <summary>
            Custom hop table command error code: Invalid custom hoptable max LF
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CHERR_TARI">
            <summary>
            Custom hop table command error code: Invalid custom hoptable Tari
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CHERR_SIZE">
            <summary>
            Custom hop table command error code: Custom hoptable size mismatch
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CHERR_FREQ">
            <summary>
            Custom hop table command error code: Encountered invalid frequency in custom hoptable
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CHERR_TXLIMIT">
            <summary>
            Custom hop table command error code: Encountered invalid maximum TX level
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CHERR_LBT">
            <summary>
            Custom hop table command error code: Encountered invalid LBT threshold
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SZ_NUR_DEVCAPS">
            <summary>
            Constant size of the device capabilites.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.RXDECODING_FM0">
            <summary>
            RX modulation FM0.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.RXDECODING_M2">
            <summary>Miller-2</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.RXDECODING_M4">
            <summary>Miller-4</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.RXDECODING_M8">
            <summary>Miller-8</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TXMODULATION_ASK">
            <summary>TX modulation</summary>
            <summary>ASK</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TXMODULATION_PRASK">
            <summary>PR-ASK</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_AUTOSELECT">
            <summary>Auto switch antenna based on supported antenna count.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_1">
            <summary>Antenna ID 1</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_2">
            <summary>Antenna ID 2</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_3">
            <summary>Antenna ID 3</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_4">
            <summary>Antenna ID 4</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_5">
            <summary>Antenna ID 5</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_6">
            <summary>Antenna ID 6</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_7">
            <summary>Antenna ID 7</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_8">
            <summary>Antenna ID 8</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_9">
            <summary>Antenna ID 9</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_10">
            <summary>Antenna ID 10</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_11">
            <summary>Antenna ID 11</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_12">
            <summary>Antenna ID 12</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_13">
            <summary>Antenna ID 13</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_14">
            <summary>Antenna ID 14</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_15">
            <summary>Antenna ID 15</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_16">
            <summary>Antenna ID 16</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_17">
            <summary>Antenna ID 17</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_18">
            <summary>Antenna ID 18</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_19">
            <summary>Antenna ID 19</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_20">
            <summary>Antenna ID 20</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_21">
            <summary>Antenna ID 21</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_22">
            <summary>Antenna ID 22</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_23">
            <summary>Antenna ID 23</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_24">
            <summary>Antenna ID 24</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_25">
            <summary>Antenna ID 25</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_26">
            <summary>Antenna ID 26</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_27">
            <summary>Antenna ID 27</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_28">
            <summary>Antenna ID 28</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_29">
            <summary>Antenna ID 29</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_30">
            <summary>Antenna ID 30</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_31">
            <summary>Antenna ID 31</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAID_32">
            <summary>Antenna ID 32</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.LAST_ANTENNAID">
            <summary>Last valid antenna ID</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_ANTENNAS">
            <summary>Maximum number of antennas.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_ANTENNAS_EX">
            <summary>Maximum number of antennas in extended version.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_1">
            <summary>Mask for antenna ID 1.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_2">
            <summary>Mask for antenna ID 2.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_3">
            <summary>Mask for antenna ID 3.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_4">
            <summary>Mask for antenna ID 4.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_5">
            <summary>Mask for antenna ID 5.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_6">
            <summary>Mask for antenna ID 6.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_7">
            <summary>Mask for antenna ID 7.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_8">
            <summary>Mask for antenna ID 8.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_9">
            <summary>Mask for antenna ID 9.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_10">
            <summary>Mask for antenna ID 10.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_11">
            <summary>Mask for antenna ID 11.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_12">
            <summary>Mask for antenna ID 12.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_13">
            <summary>Mask for antenna ID 13.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_14">
            <summary>Mask for antenna ID 14.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_15">
            <summary>Mask for antenna ID 15.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_16">
            <summary>Mask for antenna ID 16.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_17">
            <summary>Mask for antenna ID 17.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_18">
            <summary>Mask for antenna ID 18.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_19">
            <summary>Mask for antenna ID 19.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_20">
            <summary>Mask for antenna ID 20.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_21">
            <summary>Mask for antenna ID 21.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_22">
            <summary>Mask for antenna ID 22.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_23">
            <summary>Mask for antenna ID 23.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_24">
            <summary>Mask for antenna ID 24.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_25">
            <summary>Mask for antenna ID 25.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_26">
            <summary>Mask for antenna ID 26.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_27">
            <summary>Mask for antenna ID 27.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_28">
            <summary>Mask for antenna ID 28.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_29">
            <summary>Mask for antenna ID 29.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_30">
            <summary>Mask for antenna ID 30.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_31">
            <summary>Mask for antenna ID 31.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_32">
            <summary>Mask for antenna ID 32.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ANTENNAMASK_ALL">
            <summary>All antennas  mask IDs combined</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AT_NR_OF_BANDS">
            <summary> Number of bands that antenna tuning occurs in. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AT_LOWEST_BANDNUM">
            <summary> Lowest band number. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AT_LAST_BAND">
            <summary> Last antenna tune band number. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AT_BAND0">
            <summary> Band 0 frequency in kHz</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AT_BAND1">
            <summary> Band 1 frequency in kHz </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AT_BAND2">
            <summary> Band 2 frequency in kHz</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AT_BAND3">
            <summary> Band 3 frequency in kHz </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AT_BAND4">
            <summary> Band 4 frequency in kHz </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AT_BAND5">
            <summary> Band 5 frequency in kHz </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AT_BANDWIDTH">
            <summary> A single band's width in kHz </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TUNEBAND_EU">
            <summary> EU tuning band definition. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TUNEBAND_FCC1">
            <summary> FCC lower tuning band definition. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TUNEBAND_FCC2">
            <summary> FCC upper tuning band definition. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MIN_LBT_THRESHOLD">
            <summary>Minimum value for the LBT threshold parameter in <see cref="M:NurApiDotNet.NurApi.SetCustomHoptableEx(System.UInt32[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Int32,System.UInt32)"/>.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MIN_SCRATCHPAGE">
            <summary> First available user scratch data page in the module. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_SCRATCHPAGE">
            <summary> Last available user scratch data page in the module. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MIN_SCRATCHBYTES">
            <summary> Minimum number of bytes to write into a scratch page. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_SCRATCHBYTES">
            <summary> Maximum number of bytes to write into a scratch page. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.INVTARGET_A">
            <summary>
            Query tags with inventoried flag set to A
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.INVTARGET_B">
            <summary>
            Query tags with inventoried flag set to B
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.INVTARGET_AB">
            <summary>
            Query tags with inventoried flag set to A or B
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_AUTOPER_OFF">
            <summary>
            Auto-inventory off.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_AUTOPER_25">
            <summary>
            Auto-inventory has one second off time.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_AUTOPER_33">
            <summary>
            Auto-inventory has 500ms off time.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_AUTOPER_50">
            <summary>
            Auto-inventory has 100ms off time.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_AUTOPER_FORCE_1000MS">
            <summary>
            Force 1s sleep
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_AUTOPER_FORCE_500MS">
            <summary>
            Force 500ms sleep
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_AUTOPER_FORCE_100MS">
            <summary>
            Force 100ms sleep
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SELSTATE_ALL">
            <summary>
            G2 Query sel state: All tags respond, ignoring SL flag
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SELSTATE_NOTSL">
            <summary>
            G2 Query sel state: Only tags with SL deasserted responds
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SELSTATE_SL">
            <summary>
            G2 Query sel state: Only tags with SL asserted responds
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SESSION_S0">
            <summary>
            Session 0
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SESSION_S1">
            <summary>
            Session 1
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SESSION_S2">
            <summary>
            Session 2
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SESSION_S3">
            <summary>
            Session 3
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SESSION_SL">
            <summary>
            SL Flag (filter)
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.FACTION_0">
            <summary>
            Filter action for extended inventory: 
            Matching tags: assert SL or inventoried session flag -> A. Non-matching: deassert SL or inventoried session flag -> B.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.FACTION_1">
            <summary>
            Filter action for extended inventory: 
            Matching tags: assert SL or inventoried session flag -> A. Non-matching: do nothing.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.FACTION_2">
            <summary>
            Filter action for extended inventory: 
            Matching tags: do nothing. Non-matching: deassert SL or inventoried session -> B.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.FACTION_3">
            <summary>
            Filter action for extended inventory: 
            Matching tags: negate SL or invert inventoried session flag (A->B, B->A). Non-matching: do nothing.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.FACTION_4">
            <summary>
            Filter action for extended inventory: 
            Matching tags: deassert SL or inventoried session flag -> B. Non-matching: assert SL or inventoried session flag -> A.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.FACTION_5">
            <summary>
            Filter action for extended inventory: 
            Matching tags: deassert SL or inventoried session flag -> B. Non-matching: do nothing.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.FACTION_6">
            <summary>
            Filter action for extended inventory: 
            Matching tags: do nothing. Non-matching: assert SL or inventoried session flag -> A.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.FACTION_7">
            <summary>
            Filter action for extended inventory: 
            Matching tags: do nothing. Non-matching: negate SL or invert inventoried session flag (A->B, B->A).
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.INVALID_HANDLE_VALUE">
            <summary>Invalid handle value (-1)</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_RXDECFM0">
            <summary>
            RX modulation FM0.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_RXDECM2">
            <summary>
            RX modulation Miller-2.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_RXDECM4">
            <summary>
            RX modulation Miller-4.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_RXDECM8">
            <summary>
            RX modulation Miller-8.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_RXLF40k">
            <summary>
            Backscatter LF of 40kHz.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_RXLF80k">
            <summary>
            Backscatter LF of 80kHz.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_RXLF160k">
            <summary>
            Backscatter LF of 160kHz.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_RXLF256k">
            <summary>
            Backscatter LF of 256kHz.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_RXLF320k">
            <summary>
            Backscatter LF of 320kHz.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_RXLF640k">
            <summary>
            Backscatter LF of 640kHz.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_RXLFres1">
            <summary>
            Reserved LF 1.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_RXLFres2">
            <summary>
            Reserved LF 2.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_HASBEEP">
            <summary>
            The device has beeper available.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_HASLIGHT">
            <summary>
            The device has light sensor available.
            </summary>		
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_HASTAP">
            <summary>
            The device has tap sensor available.
            </summary>		
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_ANTTUNE">
            <summary>
            The antenna or antennas in this device can be tuned.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_CHSCANNER">
            <summary>
            This module can run channel scan.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_INVREAD">
            <summary>
            This module supports inventory + read.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_ANTPOWER">
            <summary>
            This module supports per antenna power setting.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_POWEROFS">
            <summary>
            This module supports per antenna low power setting offset -1...1.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_BEAMANTENNA">
            <summary>
            This module supports beam forming antenna.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_FETCHSINGLE">
            <summary>
            This module supports fetching tags one by one.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_ANTENNAMAP">
            <summary>
            This module provides antenna mapping information.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_GEN2VER2">
            <summary>
            Bit is set if this module support Gen 2 version 2 commands (at least partly).
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_RFPROFILE">
            <summary>
            Bit is set if this module FW supports RF profile setting.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_DIAG">
            <summary>
            Bit is set if this module FW supports diagnostics commands.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_DC_TAGPHASE">
            <summary>
            Bit is set if this module FW supports tag phase info. see OPFLAGS_EN_TAG_PHASE
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_IR_EPCDATA">
            <summary>
            Inventory read is the type of EPC + data.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_IR_DATAONLY">
            <summary>
            Inventory read is the type of data only (placed into the EPC field).
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_IR_EPCXTID">
            <summary>
            The XTID based read is appended to the EPC data.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_IR_XTIDONLY">
            <summary>
            The XTID based read result is returned in place of the EPC data.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NUR_IR_XTID_EX_FLAG">
            <summary>
            The flag bit in the inventory + read type that tells whether the TID contents is included in whole or serial only.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CHIPVER_AS3992">
            <summary>
            Chip version AS3992.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CHIPVER_AS3993">
            <summary>
            Chip version AS3993.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CHIPVER_R2000">
            <summary>
            Chip version R2000.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CHIPVER_R2000D">
            <summary>
            Chip version R2000 direct
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CHIPVER_E310">
            <summary>
            Chip version impinj E310
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CHIPVER_E510">
            <summary>
            Chip version impinj E510
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CHIPVER_E710">
            <summary>
            Chip version impinj E710
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CHIPVER_E910">
            <summary>
            Chip version impinj E910
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MODULETYPE_NUR05W">
            <summary>
            Module type NUR05W.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MODULETYPE_NUR05WL">
            <summary>
            Module type NUR05WL.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MODULETYPE_NUR05WL2">
            <summary>
            Module type NUR05WL2.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MODULETYPE_NUR10W">
            <summary>
            Module type NUR10W (1W module).
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MODULETYPE_NUR2_1W">
            <summary>
            Module type NUR2-1W (1W module).
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MODULETYPE_NUR2_01W">
            <summary>
            Module type nanoNUR-01W
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MODULETYPE_NUR3_RSVD">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MODULETYPE_NUR3FR_1W">
            <summary>
            Module type FR22 integrated nur3
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MODULETYPE_NUR3MOD_1W">
            <summary>
            Module type NUR3-1W
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.XPC_W1_MASK">
            <summary>
            The XPC_W1 presence mask.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.XPC_XEB_MASK">
            <summary>
            The XPC_W2 presence mask.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.RXSENS_NOMINAL">
            <summary>
            Receiver sensitivity "nominal".
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.RXSENS_LOW">
            <summary>
            Receiver sensitivity "low".
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.RXSENS_HIGH">
            <summary>
            Receiver sensitivity "high".
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.RFPROFILE_ROBUST">
            <summary>
            Robust RF profile. This profile is recommended to use in noisy RF environments.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.RFPROFILE_NOMINAL">
            <summary>
            Nominal RF profile. This profile works good in most environments.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.RFPROFILE_HIGHSPEED">
            <summary>
            High speed RF profile. This profile provides best throughput, but is prone to RF interference.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.HOSTFLAGS_EN_UNSOL_ACK">
            <summary>
            When set, module sends ACK request with unsolicited packets.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_WLAN_PROFILE_INDEX">
            <summary> Maximum allowed WLAN profile index. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DIAG_GETREPORT_NONE">
            <summary>
            Diagnostics get flag: None
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DIAG_GETREPORT_RESET_STATS">
            <summary>
            Diagnostics get flag: Reset all diagnostics statistics to zero.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DIAG_CFG_NOTIFY_NONE">
            <summary>
            Diagnostics config flag: Never send diagnostics report notification.
            </summary>
            <seealso cref="M:NurApiDotNet.NurApi.DiagGetConfig(System.UInt32@,System.UInt32@)"/>
            <seealso cref="M:NurApiDotNet.NurApi.DiagSetConfig(System.UInt32,System.UInt32)"/>
        </member>
        <member name="F:NurApiDotNet.NurApi.DIAG_CFG_NOTIFY_PERIODIC">
            <summary>
            Diagnostics config flag: Send diagnostics report notification periodically.
            </summary>
            <seealso cref="M:NurApiDotNet.NurApi.DiagGetConfig(System.UInt32@,System.UInt32@)"/>
            <seealso cref="M:NurApiDotNet.NurApi.DiagSetConfig(System.UInt32,System.UInt32)"/>
        </member>
        <member name="F:NurApiDotNet.NurApi.DIAG_CFG_NOTIFY_WARN">
            <summary>
            Diagnostics config flag: Send diagnostics report notification on warning/error.
            </summary>
            <seealso cref="M:NurApiDotNet.NurApi.DiagGetConfig(System.UInt32@,System.UInt32@)"/>
            <seealso cref="M:NurApiDotNet.NurApi.DiagSetConfig(System.UInt32,System.UInt32)"/>
        </member>
        <member name="F:NurApiDotNet.NurApi.DIAG_CFG_FW_ERROR_LOG">
            <summary>
            Diagnostics config flag: Module sends error log messages. Messages are prefixed with "FW:".
            </summary>
            <seealso cref="M:NurApiDotNet.NurApi.DiagGetConfig(System.UInt32@,System.UInt32@)"/>
            <seealso cref="M:NurApiDotNet.NurApi.DiagSetConfig(System.UInt32,System.UInt32)"/>
        </member>
        <member name="F:NurApiDotNet.NurApi.DIAG_CFG_FW_DEBUG_LOG">
            <summary>
            Diagnostics config flag: Module sends verbose debug log messages. Messages are prefixed with "FW:".
            </summary>
            <seealso cref="M:NurApiDotNet.NurApi.DiagGetConfig(System.UInt32@,System.UInt32@)"/>
            <seealso cref="M:NurApiDotNet.NurApi.DiagSetConfig(System.UInt32,System.UInt32)"/>
        </member>
        <member name="F:NurApiDotNet.NurApi.DIAG_REPORT_PERIODIC">
            <summary>
            Diagnostics return flag: Set in DiagReport.flags when module sends periodic report.
            </summary>
            <seealso cref="M:NurApiDotNet.NurApi.DiagGetReport(System.UInt32)"/>
        </member>
        <member name="F:NurApiDotNet.NurApi.DIAG_REPORT_TEMP_HIGH">
            <summary>
            Diagnostics return flag: Set in DiagReport.flags if module temperature is high. Host application SHOULD stop performing RF operations for a while.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DIAG_REPORT_TEMP_OVER">
            <summary>
            Diagnostics return flag: Set in DiagReport.flags if module temperature is over limits. All RF operations will fail with error NUR_ERROR_OVER_TEMP in this stage.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DIAG_REPORT_LOWVOLT">
            <summary>
            Diagnostics return flag: Set in DiagReport.flags if low voltage is detected. All RF operations will fail with error NUR_ERROR_LOW_VOLTAGE in this stage.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.FW_INFO_REQUEST_SEC_CHIP">
            <summary>
            Parameter value used in GetSecChipFWINFO when requesting secondary chip FW info
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TID_HIDE_NONE">
            <summary> Gen2 version 2 TID hide policy: hide none. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TID_HIDE_SOME">
            <summary> Gen2 version 2 TID hide policy: hide some. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TID_HIDE_ALL">
            <summary> Gen2 version 2 TID hide policy: hide all. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.UTRACE_RANGE_NORMAL">
            <summary> Gen2 version 2: Untraceable's range reduction policy: normal. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.UTRACE_RANGE_TOGGLE">
            <summary>Gen2 version 2: Untraceable's range reduction policy: toggle (NOTE: not supported at the moment).</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.UTRACE_RANGE_REDUCE">
            <summary> Gen2 version 2: Untraceable's range reduction policy: reduce. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GEN2V2_MAX_AUTHBITS">
            <summary> Gen2 version 2 "Authenticate": maximum bit length of the message. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GEN2V2_MIN_AUTHBITS">
            <summary> Gen2 version 2 "Authenticate": minimum bit length of the message. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.MAX_AUTHRESPBITS">
            <summary> Gen2 version 2 "Authenticate": maximum expected RX length in bits. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TAM_KEYLEN">
            <summary> ISO29167-10 authentication: key length. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TAM_MAXBLOCKS">
            <summary> ISO29167-10 authentication: maximum block at once. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SZ_TAM2_BLOCK">
            <summary>ISO29167-10 authentication: size of single custom data block in bytes.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TAM2_MSG_BITLEN">
            <summary>ISO29167-10 authentication: size of TAM2 message in bits</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.RW_SEC">
            <summary>
            Operation is secured.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.RW_SBP">
            <summary>
            Singulation block present.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.RW_EA1">
            <summary>
            Extended address 1. In the singulation data the address is extended i.e. 64-bit instead of 32-bit.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.RW_EA2">
            <summary>
            Extended address 2. In the read and write the address is extended i.e. 64-bit instead of 32-bit.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TUNE_REVERT_USER">
            <summary>
            Restore tuning from user memory.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TUNE_REVERT_FACTORY">
            <summary>
            Restore tuning from factory defaults to currently used .
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TUNE_REVERT_OVERRIDE">
            <summary>
            Override currently used and user saved tuning with factory defaults.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CXF_ASWRITE">
            <summary>
            Custom exchange flag: Act if this was a write operation
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CXF_USEHANDLE">
            <summary>
            Custom exchange flag: RN16 resulting from sinulation shall be appended to the bit stream
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CXF_XORRN16">
            <summary>
            Custom exchange flag: if CXF_ASWRITE == '1' and TX bit length == 16, XOR the TX data with RN16 received from the tag access.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CXF_TXONLY">
            <summary>
            Custom exchange flag: Transmit only. No response is expected.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CXF_NOTXCRC">
            <summary>
            Custom exchange flag: No TX CRC.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CXF_NORXCRC">
            <summary>
            Custom exchange flag: Do not decode RX CRC, return the response as is.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CXF_CRC5">
            <summary>
            Custom exchange flag: TX uses CRC-5 instead of CRC-16.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CXF_NORXLEN">
            <summary>
            Custom exchange flag: Unknown RX length. RX length is ignored.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CXF_STRIPHND">
            <summary>
            Custom exchange flag: Leave out the bacscattered handle in the response.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CXF_SKIPRESEL">
            <summary>
            Custom exchange flag: Skip tag re-selection during the custom exchange.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.LinkFrequency">
            <summary>
            Tag backscatter link frequency in Hz.
            </summary>
            <remarks>
            <para><b>It is recommended to use RfProfile instead of this.</b></para>
            </remarks>
            <value>
            <list type="table"> <listheader><term>value</term><description>Link Frequency</description></listheader>
            <item><term>160000</term><description>160 kHz</description></item>
            <item><term>256000</term><description>256 kHz</description></item> 
            <item><term>320000</term><description>320 kHz</description></item>
            </list>           
            <para>By default link frequency is set 256 kHz. 256 kHz or 320 kHz settings must be used when operating in DRM mode.</para>
            </value>
            <seealso cref="P:NurApiDotNet.NurApi.RfProfile"/>
        </member>
        <member name="P:NurApiDotNet.NurApi.RxDecoding">
            <summary>
            RX encoding (Miller encoding) value FM0 (0), M2 (1), M4 (2) or M8 (3)
            </summary>
            <remarks>
            <para><b>It is recommended to use RfProfile instead of this.</b></para>
            <para>Miller coding scheme affects tag to reader data rate.
            In practice miller coding affects the number of clock cycles that tag uses to modulate one symbol.
            So when using higher Miller coding scheme tag to reader data rate will be slower but at the same time it is more robust to interferences.
            Also tags response spectrum is more concentrated around the link frequency when using high miller scheme.
            This allows receiver to use narrower channel filters. Selectable values are 2,4 and 8.
            When operating on DRM mode values 4 or 8 should be used. By default Miller 4 is used.</para>        
            </remarks>
            <value>
            <list type="table"> <listheader><term>value</term><description>RX encoding</description></listheader>
            <item><term><see cref="F:NurApiDotNet.NurApi.RXDECODING_FM0"/></term><description>FM0 (least robust reception)</description></item>
            <item><term><see cref="F:NurApiDotNet.NurApi.RXDECODING_M2"/></term><description>Miller-2</description></item> 
            <item><term><see cref="F:NurApiDotNet.NurApi.RXDECODING_M4"/></term><description>Miller-4 (default)</description></item>
            <item><term><see cref="F:NurApiDotNet.NurApi.RXDECODING_M8"/></term><description>Miller-8 (most robust reception)</description></item>
            </list>   
            </value>
            <seealso cref="P:NurApiDotNet.NurApi.RfProfile"/>
        </member>
        <member name="P:NurApiDotNet.NurApi.TxLevel">
             <summary>
             Transmission level attenuation in 1dB steps.
             </summary>
             <value>
             <para>Range is 0...19, 0...29, 0...31 depending on used device.</para>
             <para>This value is subtracted from the maxiumum TX level producing the actual level as follows:</para>
             <list type="table"> <listheader><term>TX Level</term><desc1>Power dBm / mW (500 mW device)</desc1><desc2>Power dBm / mW (1W device)</desc2></listheader>
            <item><term>0</term><desc1>27 / 500</desc1><desc2>30 / 1000</desc2></item>
            <item><term>1</term><desc1>26 / 398</desc1><desc2>29 / 794</desc2></item>
            <item><term>2</term><desc1>25 / 316</desc1><desc2>28 / 631</desc2></item>
            <item><term>3</term><desc1>24 / 251</desc1><desc2>27 / 501</desc2></item>
            <item><term>4</term><desc1>23 / 200</desc1><desc2>26 / 398</desc2></item>
            <item><term>5</term><desc1>22 / 158</desc1><desc2>25 / 316</desc2></item>
            <item><term>6</term><desc1>21 / 126</desc1><desc2>24 / 251</desc2></item>
            <item><term>7</term><desc1>20 / 100</desc1><desc2>23 / 200</desc2></item>
            <item><term>8</term><desc1>19 / 79</desc1><desc2>22 / 158</desc2></item>
            <item><term>9</term><desc1>18 / 63</desc1><desc2>21 / 126</desc2></item>
            <item><term>10</term><desc1>17 / 50</desc1><desc2>20 / 100</desc2></item>
            <item><term>11</term><desc1>16 / 40</desc1><desc2>19 / 79</desc2></item>
            <item><term>12</term><desc1>15 / 32</desc1><desc2>18 / 63</desc2></item>
            <item><term>13</term><desc1>14 / 25</desc1><desc2>17 / 50</desc2></item>
            <item><term>14</term><desc1>13 / 20</desc1><desc2>16 / 40</desc2></item>
            <item><term>15</term><desc1>12 / 16</desc1><desc2>15 / 32</desc2></item>
            <item><term>16</term><desc1>11 / 13</desc1><desc2>14 / 25</desc2></item>
            <item><term>17</term><desc1>10 / 10</desc1><desc2>13 / 20</desc2></item>
            <item><term>18</term><desc1>9 / 8</desc1><desc2>12 / 16</desc2></item>
            <item><term>19</term><desc1>8 / 6</desc1><desc2>11 / 13</desc2></item>
            </list>
             </value>
             <remarks>
             <para>Maximum output power is 27dBm (500mW) with NUR05W, NUR05WL and NUR05WL2 devices.</para>
             <para>Maximum output power is 30dBm (1W) with NUR10W, NUR2, NUR3 devices.</para>
             <para>Maximum output power is 32dBm (1.5W) with FR22 NUR3 devices (excl. FCC region).</para>
             <para>When using high output power it must be remembered that then antenna's SWR (Standing Wave Ratio) comes even more important.</para>
             <para>Because high output power combined with antenna with poor SWR means that lot of power is reflected back to receiver.</para>
             </remarks>
             <seealso cref="T:NurApiDotNet.NurApi.ModuleSetup"/>
             <seealso cref="F:NurApiDotNet.NurApi.ModuleSetup.txLevel"/>
             <seealso cref="M:NurApiDotNet.NurApi.SetModuleSetup(System.Int32,NurApiDotNet.NurApi.ModuleSetup@)"/>		
             <seealso cref="M:NurApiDotNet.NurApi.GetModuleSetup"/>
        </member>
        <member name="P:NurApiDotNet.NurApi.TxModulation">
            <summary>
            Transmission modulation.
            </summary>
            <value>
            The TX modulation is either ASK (<see cref="F:NurApiDotNet.NurApi.TXMODULATION_ASK"/>) or PR-ASK (<see cref="F:NurApiDotNet.NurApi.TXMODULATION_PRASK"/>).
            </value>
            <remarks>
            <para><b>It is recommended to use RfProfile instead of this.</b></para>
            <para>It is possible to use ASK (amplitude shift keying) or PR-ASK (phase reversed amplitude shift keying) modulation.
            Tags that are compliant with ISO18000-6C (EPC C1G2) must support both of these modulations.
            PR-ASK has lower transmission data rate and because of that it has narrower output spectrum.
            This is why it is recommended to be used when operating in DRM mode. By default the modulation is set to <see cref="F:NurApiDotNet.NurApi.TXMODULATION_PRASK"/>.</para>
            </remarks>
            <seealso cref="P:NurApiDotNet.NurApi.RfProfile"/>
        </member>
        <member name="P:NurApiDotNet.NurApi.Region">
            <summary>
            Operating region.
            </summary>		
            <value>
            <list type="table"><listheader><num>Number</num><country>Country / region</country></listheader>
            <item><num><see cref="F:NurApiDotNet.NurApi.REGIONID_EU"/></num><country>ETSI / Europe</country></item>
            <item><num><see cref="F:NurApiDotNet.NurApi.REGIONID_FCC"/></num><country>North-America</country></item>
            <item><num><see cref="F:NurApiDotNet.NurApi.REGIONID_PRC"/></num><country>People's Republic of China (upper band)</country></item>
            <item><num><see cref="F:NurApiDotNet.NurApi.REGIONID_MALAYSIA"/></num><country>Malaysia</country></item>
            <item><num><see cref="F:NurApiDotNet.NurApi.REGIONID_BRAZIL"/></num><country>Brazil</country></item>
            <item><num><see cref="F:NurApiDotNet.NurApi.REGIONID_AUSTRALIA"/></num><country>Australia</country></item>
            <item><num><see cref="F:NurApiDotNet.NurApi.REGIONID_NEWZEALAND"/></num><country>New Zealand</country></item>
            <item><num><see cref="F:NurApiDotNet.NurApi.REGIONID_JA250MW"/></num><country>Japan (maximum level = 250mW, mode = LBT, <see cref="P:NurApiDotNet.NurApi.TxLevel"/> = 3 with 500mW device.)</country></item>
            <item><num><see cref="F:NurApiDotNet.NurApi.REGIONID_JA500MW"/></num><country>Japan (maximum level = 500mW, mode = DRM)</country></item>
            <item><num><see cref="F:NurApiDotNet.NurApi.REGIONID_KOREA"/>, <see cref="F:NurApiDotNet.NurApi.REGIONID_KOREA_LBT"/></num><country>Korea (LBT).</country></item>
            <item><num><see cref="F:NurApiDotNet.NurApi.REGIONID_INDIA"/></num><country>India</country></item>
            <item><num><see cref="F:NurApiDotNet.NurApi.REGIONID_RUSSIA"/></num><country>Russia</country></item>
            <item><num><see cref="F:NurApiDotNet.NurApi.REGIONID_VIETNAM"/></num><country>Vietnam</country></item>
            <item><num><see cref="F:NurApiDotNet.NurApi.REGIONID_SINGAPORE"/></num><country>Singapore</country></item>
            <item><num><see cref="F:NurApiDotNet.NurApi.REGIONID_THAILAND"/></num><country>Thailand</country></item>
            <item><num><see cref="F:NurApiDotNet.NurApi.REGIONID_PHILIPPINES"/></num><country>Philippines</country></item>
            <item><num><see cref="F:NurApiDotNet.NurApi.REGIONID_MOROCCO"/></num><country>Morocco</country></item>
            <item><num><see cref="F:NurApiDotNet.NurApi.REGIONID_PERU"/></num><country>Peru</country></item>
            <item><num>0xFE (254), <see cref="F:NurApiDotNet.NurApi.REGIONID_CUSTOM"/></num>
            <country>
            <para>Custom hoptable: <see cref="F:NurApiDotNet.NurApi.REGIONID_CUSTOM"/>. </para>
            <para>See about custom hoptable: </para>
            <para><see cref="M:NurApiDotNet.NurApi.BuildCustomHoptable(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Boolean)"/></para>
            <para><see cref="M:NurApiDotNet.NurApi.SetCustomHoptable(System.UInt32[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)"/>.</para>
            </country>
            </item>
            </list>
            </value>
            <remarks>
            <para>NOTE: Devices are usually region locked, thus this cannot be changed.</para>
            <para>Region setting changes reader to operate correctly for specified country of region.</para>
            <para>It is very important that this setting is correct to meet local radio regulations.</para>
            <para>The used antenna needs to be suitable for the selected operating region.</para>
            <seealso cref="T:NurApiDotNet.NurApi.ModuleSetup"/>
            </remarks>
        </member>
        <member name="P:NurApiDotNet.NurApi.InventoryQ">
            <summary>
            Default Q used for inventory. Value 0 - 15, where value 0 means automatic Q selection.
            </summary>
            <remarks>
            <para>Q-value defines the amount of open response slots that tags can use per one inventory round.<para></para>
            Number of slots can be calculated by this formula (s = number of "time slots"): s= Q^2 i.e. slots equal to Q to the power of 2.<para></para>
            It is advised to use twice as much slots compared to amount of tags that you have in your readers reading field simultaneously.<para></para>
            Selectable values are 0 – 15 and value 0 means automatic Q-value adjustment.
            When Q=0 is used reader will automatically increase the Q-value when lots of collisions are noticed and decreased the value when there are only few collisions.
            By default Q-value is set to 0.</para>
            </remarks>
            <value>
            <list type="table"> <listheader><term>Q - value</term><description>Slots</description></listheader>
            <item><term>0</term><description>automatic (default)</description></item>
            <item><term>1</term><description>2</description></item>
            <item><term>2</term><description>4</description></item>
            <item><term>3</term><description>8</description></item>
            <item><term>4</term><description>16</description></item>
            <item><term>5</term><description>32</description></item>
            <item><term>6</term><description>64</description></item>
            <item><term>7</term><description>128</description></item>
            <item><term>8</term><description>256</description></item>
            <item><term>9</term><description>512</description></item>
            <item><term>10</term><description>1024</description></item>
            <item><term>11</term><description>2048</description></item>
            <item><term>12</term><description>4096</description></item>
            <item><term>13</term><description>8192</description></item>
            <item><term>14</term><description>16384</description></item>
            <item><term>15</term><description>32768</description></item>
            </list>
            </value>		
            <seealso cref="T:NurApiDotNet.NurApi.ModuleSetup"/>
        </member>
        <member name="P:NurApiDotNet.NurApi.InventorySession">
             <summary>
             Default session for inventory. Value 0 - 3.
             </summary>
             <value>Default session for inventory. Value 0 - 3.</value>
             <remarks>
             <para>There are four session options what you can use when initializing inventory round.
             Every session has two target states A and B. By default gen2 tags are at state A if tag has not been read recently.
             When tag is read it flips to state B and doesn’t replay to readers query.
             Table above describes persistence of tags state machine when using different session values.
             For example when using session 0 tag will come back to state A immediately when tag power is lost.
             Tag power is usually lost when reader stops the inventory round or chances the channel. 
             With session 1 tag will keep it state over 500ms but less than 5s. 
             With session values 2 and 3 tags will keep it states over 2s when tag power is lost. 
             Time can vary depending what tag IC is used.</para>
             <para>Table indicating persistence characteristics of gen2 tags.</para>
             <list type="table"> <listheader><term>value</term><tagon>Persistence: tag power ON</tagon><tagoff>Persistence: tag power OFF</tagoff></listheader>
             <item><term>0</term><tagon>indefinite</tagon><tagoff>none</tagoff></item>
             <item><term>1</term><tagon>500ms &lt; t &lt; 5s</tagon><tagoff>500ms &lt; t &lt; 5s</tagoff></item>
             <item><term>2</term><tagon>indefinite</tagon><tagoff>t &gt; 2s</tagoff></item>
             <item><term>3</term><tagon>indefinite</tagon><tagoff>t &gt; 2s</tagoff></item>            
            </list>            
             </remarks>
             <seealso cref="T:NurApiDotNet.NurApi.ModuleSetup"/>
        </member>
        <member name="P:NurApiDotNet.NurApi.InventoryRounds">
            <summary>
            Default rounds for inventory. Value 0 - 10, where 0 means automatic rounds selection.
            This value specifies full G2 query rounds performed in one inventory command.
            </summary>
            <value>Range is from 0 to 10 where zero means "automatic rounds".</value>
            <remarks>
            Rounds setting defines how many full G2 query rounds is done inside one inventory round. After every inventory round reader will send data to the Host.
            Selectable values are 0 – 10. Zero meaning automatic rounds adjustment.
            Automatic adjustment decides after every query round that is another round necessary based on amount of collisions.
            By default rounds setting is set to 0.
            </remarks>
            <seealso cref="T:NurApiDotNet.NurApi.ModuleSetup"/>
        </member>
        <member name="P:NurApiDotNet.NurApi.AntennaMask">
            <summary>
            Bitmask of enabled antennas.  
            DEPRECATED: Do not use for new designs, use AntennaMaskEx instead.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.AntennaMaskEx">
            <summary>
            Bitmask of enabled antennas, support up to 32 antennas. Value 0x1 - 0xFFFFFFFF.
            </summary>
            <value>The value ranges from <see cref="F:NurApiDotNet.NurApi.ANTENNAMASK_1"/> to <see cref="F:NurApiDotNet.NurApi.ANTENNAMASK_32"/>.
            Actually used and applicable values depend on the module's configuration
            </value>
        </member>
        <member name="P:NurApiDotNet.NurApi.Autotune">
            <summary>
            Runtime antenna tuning settings.
            </summary>
            <remarks>This has no effect in NUR2, NUR3 based devices.</remarks>
            <value>
            The parameter set or read is <see cref="T:NurApiDotNet.NurApi.AutotuneSetup"/>.
            </value>
        </member>
        <member name="P:NurApiDotNet.NurApi.AntennaPowerEx">
            <summary>
            Per antenna tx level settings. Array with exactly 32 entries must be supplied.
            </summary>
            <value>
            Array of the per antenna tx level values. Range is 0..31 (depends on used device); Defaults to -1. 
            If set to -1 default tx level is used from the module setup.
            <para>Array with exactly 32 entries must be supplied.</para>
            </value>
            <seealso cref="P:NurApiDotNet.NurApi.TxLevel"/>
        </member>
        <member name="P:NurApiDotNet.NurApi.RxSensitivity">
            <summary>
            Receiver sensitivity setting.
            </summary>
            <value>
            The value can be <see cref="F:NurApiDotNet.NurApi.RXSENS_LOW"/>, <see cref="F:NurApiDotNet.NurApi.RXSENS_NOMINAL"/> or <see cref="F:NurApiDotNet.NurApi.RXSENS_HIGH"/>.
            </value>
            <seealso cref="F:NurApiDotNet.NurApi.RXSENS_LOW"/>		
            <seealso cref="F:NurApiDotNet.NurApi.RXSENS_NOMINAL"/>		
            <seealso cref="F:NurApiDotNet.NurApi.RXSENS_HIGH"/>		
        </member>
        <member name="P:NurApiDotNet.NurApi.RfProfile">
            <summary>
            RF profile setting. Device will select best RF settings based on profile.
            </summary>
            <value>
            The value can be <see cref="F:NurApiDotNet.NurApi.RFPROFILE_ROBUST"/>, <see cref="F:NurApiDotNet.NurApi.RFPROFILE_NOMINAL"/> or <see cref="F:NurApiDotNet.NurApi.RFPROFILE_HIGHSPEED"/>.
            </value>
            <seealso cref="F:NurApiDotNet.NurApi.RFPROFILE_ROBUST"/>		
            <seealso cref="F:NurApiDotNet.NurApi.RFPROFILE_NOMINAL"/>		
            <seealso cref="F:NurApiDotNet.NurApi.RFPROFILE_HIGHSPEED"/>		
        </member>
        <member name="P:NurApiDotNet.NurApi.EnabledAntennas">
            <summary>
            Antenna enable. This will internally set <see cref="P:NurApiDotNet.NurApi.AntennaMaskEx"/>
            </summary>
            <value>
            <para>Set antennas as a list of integer ranging from ANTENNAID_1 to ANTENNAID_32.</para>
            <para>Get an integer list stating which antennas are enabled.</para>
            </value>
        </member>
        <member name="P:NurApiDotNet.NurApi.ScanSingleTriggerTimeout">
            <summary>
            Triggered single tag scan timeout in milliseconds.
            </summary>
            <value>Value is in range 50 - 500, unit is milliseconds.</value>
            <seealso cref="T:NurApiDotNet.NurApi.ModuleSetup"/>
        </member>
        <member name="P:NurApiDotNet.NurApi.InventoryTriggerTimeout">
            <summary>
            <para>Triggered inventory timeout in milliseconds.</para>
            <para>Device will scan new tags specified timeout when no new tags are found.</para>
            <para>If no new tags found within timeout, triggred inventory is considered done and results are sent to the host.</para>
            </summary>
            <value>Range is 0...60000, unit is milliseconds.</value>
            <seealso cref="T:NurApiDotNet.NurApi.ModuleSetup"/>
            <seealso cref="M:NurApiDotNet.NurApi.SetSensorConfig(NurApiDotNet.NurApi.SensorConfig)"/>
        </member>
        <member name="P:NurApiDotNet.NurApi.SelectedAntenna">
            <summary>
            Zero based index of selected antenna logical id. ANTENNAID_AUTOSELECT (-1) means auto switch between enabled antennas. 
            </summary>
            <value>
            <para>Zero based index of selected antenna logical id</para>
            <para>Use value <see cref="F:NurApiDotNet.NurApi.ANTENNAID_AUTOSELECT"/> to make the module auto switch between enabled antennas.</para>
            </value>
            <seealso cref="T:NurApiDotNet.NurApi.ModuleSetup"/>
            <remarks>Selected antenna must be enabled before set.</remarks>
        </member>
        <member name="P:NurApiDotNet.NurApi.OpFlags">
            <summary>
            Operation flags.
            </summary>
            <value>
            <para>Enable hop events: <see cref="F:NurApiDotNet.NurApi.OPFLAGS_EN_HOPEVENTS"/></para>
            <para>Enable "zero tags found" notification during inventory streams: <see cref="F:NurApiDotNet.NurApi.OPFLAGS_INVSTREAM_ZEROS"/></para>
            <para>Enable run-time tuning events: <see cref="F:NurApiDotNet.NurApi.OPFLAGS_EN_TUNEEVENTS"/></para>
            <para>Return tag phase angle in units of tenths of degrees in tag meta data timestamp field. Supported only in NUR2/NUR3 modules.: <see cref="F:NurApiDotNet.NurApi.OPFLAGS_EN_TAG_PHASE"/></para>
            <para>NXP Brand ID in NXP UCODE8 tag is enabled: <see cref="F:NurApiDotNet.NurApi.OPFLAGS_EN_NXP_BID"/></para>
            <para>Inventory read will report EPC even if there is memory overrun error (f.ex. no user mem bank): <see cref="F:NurApiDotNet.NurApi.OPFLAGS_EN_IR_MEM_OVERRUN"/></para>
            <para>Return tag phase angle difference in units of tenths of degrees in tag meta data timestamp field. Supported only in NUR3 modules.: <see cref="F:NurApiDotNet.NurApi.OPFLAGS_EN_PHASE_DIFF"/></para>
            <para>The value can be either of the above flags, none or both. OR-operation can be used as these flags are bits.</para>
            </value>
            <seealso cref="T:NurApiDotNet.NurApi.ModuleSetup"/>
            <seealso cref="F:NurApiDotNet.NurApi.ModuleSetup.opFlags"/>
        </member>
        <member name="P:NurApiDotNet.NurApi.EnableHopEvents">
            <summary>
            Enable frequency hop event generation.
            <seealso cref="P:NurApiDotNet.NurApi.OpFlags"/>
            <see cref="F:NurApiDotNet.NurApi.OPFLAGS_EN_HOPEVENTS"/>
            </summary>
            <value>true to enable, false to disable</value>
        </member>
        <member name="P:NurApiDotNet.NurApi.EnableInvStreamZeros">
            <summary>
            Enable "zero tags found" notification during inventory streams
            <seealso cref="P:NurApiDotNet.NurApi.OpFlags"/>
            <see cref="F:NurApiDotNet.NurApi.OPFLAGS_INVSTREAM_ZEROS"/>
            </summary>
            <value>true to enable, false to disable</value>
        </member>
        <member name="P:NurApiDotNet.NurApi.EnableTuneEvents">
            <summary>
            Enable run-time tuning events
            <seealso cref="P:NurApiDotNet.NurApi.OpFlags"/>
            <see cref="F:NurApiDotNet.NurApi.OPFLAGS_EN_TUNEEVENTS"/>
            </summary>
            <value>true to enable, false to disable</value>
        </member>
        <member name="P:NurApiDotNet.NurApi.EnableTagPhaseInfo">
            <summary>
            Tag phase info. Return tag phase angle in units of tenths of degrees in tag meta data timestamp field. Supported only in NUR2 modules.
            <seealso cref="P:NurApiDotNet.NurApi.OpFlags"/>
            <see cref="F:NurApiDotNet.NurApi.OPFLAGS_EN_TAG_PHASE"/>
            </summary>
            <value>true to enable, false to disable</value>
        </member>
        <member name="P:NurApiDotNet.NurApi.EnableTagPhaseDiff">
            <summary>
            Tag phase diff. Return tag phase angle difference in units of tenths of degrees in tag meta data timestamp field. Supported only in NUR3 modules.
            <seealso cref="P:NurApiDotNet.NurApi.OpFlags"/>
            <see cref="F:NurApiDotNet.NurApi.OPFLAGS_EN_PHASE_DIFF"/>
            </summary>
            <value>true to enable, false to disable</value>
        </member>
        <member name="P:NurApiDotNet.NurApi.BaudRate">
            <summary>
            NUR serial port baudrate index.
            </summary>       
            <remarks>
            Use this only when NUR device is directly connected to serial port
            </remarks>
            <value>
            <list type="table">
            <listheader><index>Baudrate index</index><value>Actual bps</value></listheader>
            <item><index><see cref="F:NurApiDotNet.NurApi.BR_38400"/></index><value>38400</value></item>
            <item><index><see cref="F:NurApiDotNet.NurApi.BR_115200"/></index><value>115200</value></item>
            <item><index><see cref="F:NurApiDotNet.NurApi.BR_230400"/></index><value>230400</value></item>
            <item><index><see cref="F:NurApiDotNet.NurApi.BR_500000"/></index><value>500000</value></item>
            <item><index><see cref="F:NurApiDotNet.NurApi.BR_1000000"/></index><value>1000000 (1M)</value></item>
            <item><index><see cref="F:NurApiDotNet.NurApi.BR_1500000"/></index><value>1500000 (1M5)</value></item>
            </list>
            </value>
        </member>
        <member name="P:NurApiDotNet.NurApi.RealBaudRate">
            <summary>
            NUR serial port baudrate in bps.<br/>
            If value not support, default 115200 bps will be set
            </summary>
            <value>
            <para>The value is real baudrate; it is up to the platform whether a given baudrate is supported or not.</para>
            <para>Supported baudrates in the module are:</para>
            <list type="table">
            <listheader><setting>Value</setting></listheader>
            <setting>38400</setting>
            <setting>115200</setting>
            <setting>230400</setting>
            <setting>500000</setting>
            <setting>1000000</setting>
            <setting>1500000</setting>
            </list>
            </value>
        </member>
        <member name="P:NurApiDotNet.NurApi.InventoryTarget">
            <summary>
            Inventory target.
            </summary>
            <value>0 = A, 1 = B, 2 = toggle between A and B.</value>
        </member>
        <member name="P:NurApiDotNet.NurApi.InventoryEpcLength">
            <summary>
            Desired EPC Length filter in bytes. All other EPC's will be discarded during inventory.
            </summary>
            <value>Use even values in range 2...62 or -1 for "accept all".</value>	
            <seealso cref="M:NurApiDotNet.NurApi.SetModuleSetup(System.Int32,NurApiDotNet.NurApi.ModuleSetup@)"/>
            <remarks>Setting this to a specific value causes the module to ignore any EPC having a different length than this setting.</remarks>
        </member>
        <member name="P:NurApiDotNet.NurApi.ReadRssiFilter">
            <summary>
            RSSI filters used for read operations.
            </summary>
            <value>The value is specified with <see cref="T:NurApiDotNet.NurApi.RssiFilter"/>.</value>
        </member>
        <member name="P:NurApiDotNet.NurApi.WriteRssiFilter">
            <summary>
            RSSI filters used for write operations.
            </summary>
            <value>The value is specified with <see cref="T:NurApiDotNet.NurApi.RssiFilter"/>.</value>
        </member>
        <member name="P:NurApiDotNet.NurApi.InventoryRssiFilter">
            <summary>
            RSSI filters used for inventory operations.
            </summary>
            <value>The value is specified with <see cref="T:NurApiDotNet.NurApi.RssiFilter"/>.</value>
        </member>
        <member name="P:NurApiDotNet.NurApi.ReadTimeout">
            <summary>
            Read operations timeout.
            </summary>
            <value>Unit is ms in range 20...1000.</value>
        </member>
        <member name="P:NurApiDotNet.NurApi.WriteTimeout">
            <summary>
            Write operations timeout.
            </summary>
            <value>Unit is ms in range 20...2000.</value>
        </member>
        <member name="P:NurApiDotNet.NurApi.LockTimeout">
            <summary>
            Lock operation timeout.
            </summary>
            <value>Unit is ms in range 20...2000.</value>
        </member>
        <member name="P:NurApiDotNet.NurApi.KillTimeout">
            <summary>
            Kill operation timeout.
            </summary>
            <value>Unit is ms in range 20...2000.</value>
        </member>
        <member name="P:NurApiDotNet.NurApi.PeriodSetup">
            <summary>
            Configures inventory stream's duty cycle.
            Does not save the setting into the module's non-volatile settings.
            </summary>
            <value>
            <list type="table">
            <listheader><setting>Value</setting><meaning>Meaning</meaning></listheader>
            <item><setting><see cref="F:NurApiDotNet.NurApi.NUR_AUTOPER_OFF"/></setting><meaning>The internal duty cycle is not used.</meaning></item>
            <item><setting><see cref="F:NurApiDotNet.NurApi.NUR_AUTOPER_25"/></setting><meaning>The inventory stream off time is a maximum of 1000ms.</meaning></item>
            <item><setting><see cref="F:NurApiDotNet.NurApi.NUR_AUTOPER_33"/></setting><meaning>The inventory stream off time is a maximum of 500ms.</meaning></item>
            <item><setting><see cref="F:NurApiDotNet.NurApi.NUR_AUTOPER_50"/></setting><meaning>The inventory stream off time is a maximum of 100ms.</meaning></item>
            <item><setting><see cref="F:NurApiDotNet.NurApi.NUR_AUTOPER_FORCE_1000MS"/></setting><meaning>The inventory stream off time is forced 1000ms.</meaning></item>
            <item><setting><see cref="F:NurApiDotNet.NurApi.NUR_AUTOPER_FORCE_500MS"/></setting><meaning>The inventory stream off time is forced 500ms.</meaning></item>
            <item><setting><see cref="F:NurApiDotNet.NurApi.NUR_AUTOPER_FORCE_100MS"/></setting><meaning>The inventory stream off time is forced 100ms.</meaning></item>
            </list>
            </value>
            <remarks>The period setup (duty cycle) is available in all L2 devices but is usually used with Stix/mobile reader in order to reduce the inventory streams power consumption.</remarks>
        </member>
        <member name="P:NurApiDotNet.NurApi.PeriodSetupSave">
            <summary>
            Configures inventory stream's duty cycle.
            Setting this value also saves the setting into the module's non-volatile settings.
            </summary>
            <value>
            <list type="table">
            <listheader><setting>Value</setting><meaning>Meaning</meaning></listheader>
            <item><setting><see cref="F:NurApiDotNet.NurApi.NUR_AUTOPER_OFF"/></setting><meaning>The internal duty cycle is not used.</meaning></item>
            <item><setting><see cref="F:NurApiDotNet.NurApi.NUR_AUTOPER_25"/></setting><meaning>The inventory stream off time is a maximum of 1000ms.</meaning></item>
            <item><setting><see cref="F:NurApiDotNet.NurApi.NUR_AUTOPER_33"/></setting><meaning>The inventory stream off time is a maximum of 500ms.</meaning></item>
            <item><setting><see cref="F:NurApiDotNet.NurApi.NUR_AUTOPER_50"/></setting><meaning>The inventory stream off time is a maximum of 100ms.</meaning></item>
            <item><setting><see cref="F:NurApiDotNet.NurApi.NUR_AUTOPER_FORCE_1000MS"/></setting><meaning>The inventory stream off time is forced 1000ms.</meaning></item>
            <item><setting><see cref="F:NurApiDotNet.NurApi.NUR_AUTOPER_FORCE_500MS"/></setting><meaning>The inventory stream off time is forced 500ms.</meaning></item>
            <item><setting><see cref="F:NurApiDotNet.NurApi.NUR_AUTOPER_FORCE_100MS"/></setting><meaning>The inventory stream off time is forced 100ms.</meaning></item>
            </list>
            </value>
            <remarks>The period setup (duty cycle) is available in all L2 devices but is usually used with Stix/mobile reader in order to reduce the inventory streams power consumption.</remarks>
        </member>
        <member name="P:NurApiDotNet.NurApi.AutotuneEnable">
            <summary>
            Enables the run-time automatic tuning.
            This feature is supported in the L2 module's FW version 5.0-A and on.
            </summary>
            <value>
            Set to true to enable this feature.
            </value>
        </member>
        <member name="P:NurApiDotNet.NurApi.AutotuneThresholdEnable">
            <summary>
            Enable or disable using of the run-time automatic tuning's threshold value.
            This feature is supported in the L2 module's FW version 5.0-A and on.
            </summary>
            <value>
            Set to true to enable use of the run-time automatic tuning's threshold value.
            </value>
        </member>
        <member name="P:NurApiDotNet.NurApi.AutotuneThreshold">
            <summary>
            Run-time automatic tuning's threshold value in dBm.
            </summary>
            <value>
            This is a negative value.
            The actual value depends strongly on the current situation. "Typically" it could be considered to be in range -5...-2.
            </value>
        </member>
        <member name="P:NurApiDotNet.NurApi.CommTimeout">
            <summary>
            Set communication timeout in seconds. Range is 3...15.
            </summary>
            <value>The timeout value is in seconds ranging from 3 to 15.</value>
        </member>
        <member name="P:NurApiDotNet.NurApi.CommTimeoutMilliSec">
            <summary>
            Communication timeout in milliseconds.
            Default is 3000 ms
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.CommLongTimeoutMilliSec">
            <summary>
            Communication timeout for possible long runnning commands in milliseconds.
            Some tag operation commands may take long time to finish, depending on enabled antenna count and/or parameters.
            Inventory and tag access commands uses this timeout, such as Inventory, InventorySelect, Read, Write, Lock, Kill, Gen2V2
            Default is 17000 ms
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.CommCmdRetries">
            <summary>
            Communication cmd re-send retries, if no response received within timeout.
            Default is 2
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.SetModuleSetup(System.Int32,NurApiDotNet.NurApi.ModuleSetup@)">
            <summary>
            Set module settings according to given flags.
            </summary>
            <param name="setupFlags">The setup fields to include presented as flag bits, see remarks.</param>
            <param name="setup">Module settings as <see>ModuleSetup</see> structure</param>
            <seealso cref="T:NurApiDotNet.NurApi.ModuleSetup"/>
            <seealso cref="M:NurApiDotNet.NurApi.GetModuleSetup"/>		
            <remarks><para>See flags: </para>
            <para>Set link frequency: <see cref="F:NurApiDotNet.NurApi.SETUP_LINKFREQ"/></para>
            <para>Set Set <see cref="F:NurApiDotNet.NurApi.SETUP_RXDEC"/></para>
            <para>Set TX level: <see cref="F:NurApiDotNet.NurApi.SETUP_TXLEVEL"/></para>
            <para>Set TX modulation: <see cref="F:NurApiDotNet.NurApi.SETUP_TXMOD"/>, modulations: <see cref="F:NurApiDotNet.NurApi.TXMODULATION_ASK"/>, <see cref="F:NurApiDotNet.NurApi.TXMODULATION_PRASK"/></para>
            <para>Set region: <see cref="F:NurApiDotNet.NurApi.SETUP_REGION"/></para>
            <para>Set default inventory Q: <see cref="F:NurApiDotNet.NurApi.SETUP_INVQ"/></para>
            <para>Set default inventory session: <see cref="F:NurApiDotNet.NurApi.SETUP_INVSESSION"/></para>
            <para>Set default inventory rounds/call: <see cref="F:NurApiDotNet.NurApi.SETUP_INVROUNDS"/></para>
            <para>Set default single scan timeout in ms: <see cref="F:NurApiDotNet.NurApi.SETUP_SCANSINGLETO"/></para>
            <para>Set default inventory timeout in ms: <see cref="F:NurApiDotNet.NurApi.SETUP_INVENTORYTO"/>, range is 0...60000 ms.</para>
            <para>Set currently selected antenna: <see cref="F:NurApiDotNet.NurApi.SETUP_SELECTEDANTENNA"/>, 0...3 in basic setup and 0...17 in beam reader.</para>
            <para>Set operation flags: <see cref="F:NurApiDotNet.NurApi.SETUP_OPFLAGS"/>, flags: <see cref="F:NurApiDotNet.NurApi.OPFLAGS_EN_HOPEVENTS"/> and <see cref="F:NurApiDotNet.NurApi.OPFLAGS_INVSTREAM_ZEROS"/>.</para>
            <para>Set default inventory target: <see cref="F:NurApiDotNet.NurApi.SETUP_INVTARGET"/>, targets: <see cref="F:NurApiDotNet.NurApi.INVTARGET_A"/>, <see cref="F:NurApiDotNet.NurApi.INVTARGET_B"/> and <see cref="F:NurApiDotNet.NurApi.INVTARGET_AB"/></para>
            <para>Set fixed inventory EPC length: <see cref="F:NurApiDotNet.NurApi.SETUP_INVEPCLEN"/>, range is 2...62 (must be aligned by 2) or -1 to accept all.</para>
            <para>Set RSSI range for read operations: <see cref="F:NurApiDotNet.NurApi.SETUP_READRSSIFILTER"/>, RSSI filter: <see cref="T:NurApiDotNet.NurApi.RssiFilter"/>.</para>
            <para>Set RSSI range for write operations: <see cref="F:NurApiDotNet.NurApi.SETUP_WRITERSSIFILTER"/>, RSSI filter: <see cref="T:NurApiDotNet.NurApi.RssiFilter"/>.</para>
            <para>Set RSSI range for inventory: <see cref="F:NurApiDotNet.NurApi.SETUP_INVRSSIFILTER"/>, RSSI filter: <see cref="T:NurApiDotNet.NurApi.RssiFilter"/>.</para>
            <para>Set tag read timeout: <see cref="F:NurApiDotNet.NurApi.SETUP_READTIMEOUT"/>, range: 20...1000 ms.</para>
            <para>Set tag write timeout: <see cref="F:NurApiDotNet.NurApi.SETUP_WRITETIMEOUT"/>, range: 20...2000 ms.</para>
            <para>Set tag lock timeout: <see cref="F:NurApiDotNet.NurApi.SETUP_LOCKTIMEOUT"/>, range: 20...2000 ms.</para>
            <para>Set tag kill timeout: <see cref="F:NurApiDotNet.NurApi.SETUP_KILLTIMEOUT"/>, range: 20...2000 ms.</para>
            <para>Set reader duty cycle in inventory stream: <see cref="F:NurApiDotNet.NurApi.SETUP_AUTOPERIOD"/>, values: 0 = off, 1 = max 100 ms off, 2 = max 500 ms off and 3 = max 100 off.</para>
            <para>Set per antenna TX level (in 4 antenna reader): <see cref="F:NurApiDotNet.NurApi.SETUP_PERANTPOWER"/>, entry having value -1 means "not used". Otherwise range as in TX level i.e. 0...19.</para>
            <para>Set antenna TX level offset: <see cref="F:NurApiDotNet.NurApi.SETUP_PERANTOFFSET"/>, range is -1...1. E.g. TX level 10 with offset will become 11 (-1 i.e. less). Note that only first value is used, other are currently ignored.</para>
            <para>Set antenna mask: <see cref="F:NurApiDotNet.NurApi.SETUP_ANTMASKEX"/>, masks: <see cref="F:NurApiDotNet.NurApi.ANTENNAMASK_1"/> ... <see cref="F:NurApiDotNet.NurApi.ANTENNAMASK_32"/>, <see cref="F:NurApiDotNet.NurApi.ANTENNAMASK_ALL"/></para>
            <para>Set RF profile: <see cref="F:NurApiDotNet.NurApi.SETUP_RFPROFILE"/>, values <see cref="F:NurApiDotNet.NurApi.RFPROFILE_ROBUST"/>, <see cref="F:NurApiDotNet.NurApi.RFPROFILE_NOMINAL"/>, <see cref="F:NurApiDotNet.NurApi.RFPROFILE_HIGHSPEED"/></para>
            <para>Combination of all flags: <see cref="F:NurApiDotNet.NurApi.SETUP_ALL"/>.</para>
            </remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetModuleSetup">
            <summary>
            Get current module setup
            </summary>
            <returns>current module setup</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetModuleSetup(System.Int32)">
            <summary>
            Get current module setup
            </summary>
            <returns>current module setup</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetVersions">
            <summary>
            Returns the current mode, primary and secondary version information.
            </summary>
            <returns>Return the application and bootloader version as specified in <see cref="T:NurApiDotNet.NurApi.ModuleVersions"/>.</returns>
            <remarks>
            If the module is currently running application then the primary version is the application's one and secondary bootloader's.
            If the module is currently running bootloader then the primary version is the bootloader's one and secondary application's.
            </remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.StoreCurrentSetup">
            <summary>
            Store current module settings to the reader's non-volatile memory.
            </summary>
            <seealso cref="M:NurApiDotNet.NurApi.StoreCurrentSetup(System.Int32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.GetModuleSetup"/>
            <seealso cref="M:NurApiDotNet.NurApi.GetModuleSetup(System.Int32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.SetModuleSetup(System.Int32,NurApiDotNet.NurApi.ModuleSetup@)"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.StoreCurrentSetup(System.Int32)">
            <summary>
            Store current module setup. Flags indicate which part of settings will be stored.
            </summary>
            <param name="flags">The bit flags that instruct what to save, see remarks.</param>
            <seealso cref="M:NurApiDotNet.NurApi.StoreCurrentSetup"/>
            <seealso cref="M:NurApiDotNet.NurApi.GetModuleSetup"/>
            <seealso cref="M:NurApiDotNet.NurApi.GetModuleSetup(System.Int32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.SetModuleSetup(System.Int32,NurApiDotNet.NurApi.ModuleSetup@)"/>
            <remarks>
            <para>See store flags:</para>
            <para>Store current baudrate: <see cref="F:NurApiDotNet.NurApi.STORE_BAUDRATE"/></para>
            <para>Store current GPIO setup: <see cref="F:NurApiDotNet.NurApi.STORE_GPIO"/></para>
            <para>Store current RF settings: <see cref="F:NurApiDotNet.NurApi.STORE_RF"/>, includes: TX level(s), TX modulation, RX decoding, link frequency region, inventory defaults, all timeout defaults and antenna settings.</para>
            <para>Store current operation flags: <see cref="F:NurApiDotNet.NurApi.STORE_OPFLAGS"/>, flags: <see cref="F:NurApiDotNet.NurApi.OPFLAGS_EN_HOPEVENTS"/> and <see cref="F:NurApiDotNet.NurApi.OPFLAGS_INVSTREAM_ZEROS"/>.</para>
            <para>Store everything: <see cref="F:NurApiDotNet.NurApi.STORE_ALL"/></para>
            </remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.FactoryReset(System.UInt32)">
            <summary>
            Force RFID module to factory reset
            </summary>
            <param name="resetcode">Code used by the module to perform the factory reset.</param>
            <remarks>
            <para>The factory reset code is 0x994F6B32.</para>
            <para>NOTE: consider carefully whether this operation really is necessary or not.</para>
            </remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.SetSensorConfig(NurApiDotNet.NurApi.SensorConfig)">
            <summary>
            Set sensor configuration
            </summary>
            <param name="cfg">Configuration data as <see cref="T:NurApiDotNet.NurApi.SensorConfig"/></param>		
        </member>
        <member name="M:NurApiDotNet.NurApi.GetSensorConfig">
            <summary>
            Get sensor configuration
            </summary>
            <returns>Configuration data as <see cref="T:NurApiDotNet.NurApi.SensorConfig"/></returns>	
        </member>
        <member name="M:NurApiDotNet.NurApi.GetRegionInfo(System.Int32)">
            <summary>
            Get region info
            </summary>
            <param name="regionId">The region identifier. -1 return current region</param>
            <returns>Region information as <see cref="T:NurApiDotNet.NurApi.RegionInfo"/></returns>	
            <remarks><para>See region identifiers:</para>
            <para><see cref="F:NurApiDotNet.NurApi.REGIONID_EU"/></para>
            <para><see cref="F:NurApiDotNet.NurApi.REGIONID_FCC"/></para>
            <para><see cref="F:NurApiDotNet.NurApi.REGIONID_PRC"/></para>
            <para><see cref="F:NurApiDotNet.NurApi.REGIONID_MALAYSIA"/></para>
            <para><see cref="F:NurApiDotNet.NurApi.REGIONID_BRAZIL"/></para>
            <para><see cref="F:NurApiDotNet.NurApi.REGIONID_AUSTRALIA"/></para>
            <para><see cref="F:NurApiDotNet.NurApi.REGIONID_NEWZEALAND"/></para>
            <para><see cref="F:NurApiDotNet.NurApi.REGIONID_JA250MW"/></para>
            <para><see cref="F:NurApiDotNet.NurApi.REGIONID_JA500MW"/></para>
            <para><see cref="F:NurApiDotNet.NurApi.REGIONID_KOREA"/></para>
            <para><see cref="F:NurApiDotNet.NurApi.REGIONID_KOREA_LBT"/></para>
            <para><see cref="F:NurApiDotNet.NurApi.REGIONID_INDIA"/></para>
            <para><see cref="F:NurApiDotNet.NurApi.REGIONID_RUSSIA"/></para>
            <para><see cref="F:NurApiDotNet.NurApi.REGIONID_VIETNAM"/></para>
            <para><see cref="F:NurApiDotNet.NurApi.REGIONID_SINGAPORE"/></para>
            <para><see cref="F:NurApiDotNet.NurApi.REGIONID_THAILAND"/></para>
            <para><see cref="F:NurApiDotNet.NurApi.REGIONID_PHILIPPINES"/></para>
            <para><see cref="F:NurApiDotNet.NurApi.REGIONID_MOROCCO"/></para>
            <para><see cref="F:NurApiDotNet.NurApi.REGIONID_PERU"/></para>
            </remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetSystemInfo">
            <summary>
            Get system information.
            </summary>
            <returns>Return system information as specified in <see cref="T:NurApiDotNet.NurApi.SystemInfo"/></returns>		
        </member>
        <member name="M:NurApiDotNet.NurApi.GetReaderInfo">
            <summary>
            Get reader info
            </summary>
            <returns></returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetEthConfig">
            <summary>
            Get Ethernet configuration settings from conneted device. 
            </summary>
            <returns>Ethernet Sampo Configuration information <see cref="T:NurApiDotNet.NurApi.EthConfig"/></returns>		
        </member>
        <member name="M:NurApiDotNet.NurApi.SetEthConfig(NurApiDotNet.NurApi.EthConfig)">
            <summary>
            Set Ethernet device configuration.
            </summary>
            <param name="ec">Reference to the Ethernet configuration as specified by <see cref="T:NurApiDotNet.NurApi.EthConfig"/>.</param>		
        </member>
        <member name="M:NurApiDotNet.NurApi.Beep(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generate beep sound if beeper device available
            </summary>
            <param name="frequency">Frqeguency of sound</param>
            <param name="time">Duration</param>
            <param name="duty">Duty</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.Beep">
            <summary>
            Generate beep sound if beeper device available
            </summary>        		
        </member>
        <member name="M:NurApiDotNet.NurApi.Ping">
            <summary>
            Performs ping to connected RFID module 
            </summary>
            <returns>"OK"</returns>		
        </member>
        <member name="M:NurApiDotNet.NurApi.SetHostFlags(System.UInt32)">
            <summary>
            Sends host flags to the module.
            </summary>
            <param name="hostFlags"><see cref="F:NurApiDotNet.NurApi.HOSTFLAGS_EN_UNSOL_ACK"/></param>
            <returns>Result of ping as string</returns>
        </member>
        <member name="P:NurApiDotNet.NurApi.Title">
            <summary>
            Title string of NUR module.
            </summary>
            <value>A string value that represents the "friendly name" of the device.</value>		
        </member>
        <member name="M:NurApiDotNet.NurApi.BuildCustomHoptable(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Build custom frequency hoptable
            </summary>
            <param name="baseFreq">1st channel's center frequency in kHz</param>
            <param name="nChan">Channel count (1...100)</param>
            <param name="chSpace">channel spacing in kHz</param>
            <param name="chTime">Channel time in ms (>=100)</param>
            <param name="pauseTime">Wait time between channel frequency change in ms (max=1000) </param>
            <param name="lf">Maximum link frequency (160/256/320k)</param>
            <param name="Tari">Tari setting 1 = 12.5, 2 = 25</param>
            <param name="shuffle">API shuffles the frequencies if set to true</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.SetCustomHoptable(System.UInt32[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Set pre-built custom hop table.
            </summary>
            <param name="freqArr">
            Array of generated frequencies. Values are in kHz, range is 840000...960000.
            Must be disvisible by 25. Number of frequencies is 1...<see cref="F:NurApiDotNet.NurApi.MAX_CUSTOM_FREQS"/> and it must match the <paramref name="nChan"/> parameter.
            </param>
            <param name="nChan">Number of channels in <paramref name="freqArr"/>.</param>
            <param name="chTime">Channel time in milliseconds. Minimum is 100.</param>
            <param name="pauseTime">Pause time between channel change in milliseconds. Maximum is 1000.</param>
            <param name="lf">Maximum link frequency. Valid values are 160000, 256000 and 320000.</param>
            <param name="Tari">Tari setting: 1 = 12.5us, 2=25us. Other are invalid.</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.SetCustomHoptableEx(System.UInt32[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Int32,System.UInt32)">
            <summary>
            Set pre-built, extended custom hop table (+LBT threshold and maximum TX level).
            </summary>
            <param name="freqArr">
            Array of generated frequencies. Values are in kHz, range is 840000...960000.
            Must be disvisible by 25. Number of frequencies is 1...<see cref="F:NurApiDotNet.NurApi.MAX_CUSTOM_FREQS"/> and it must match the <paramref name="nChan"/> parameter.
            </param>
            <param name="nChan">Number of channels in <paramref name="freqArr"/>.</param>
            <param name="chTime">Channel time in milliseconds. Minimum is 100.</param>
            <param name="pauseTime">Pause time between channel change in milliseconds. Maximum is 1000.</param>
            <param name="lf">Maximum link frequency. Valid values are 160000, 256000 and 320000.</param>
            <param name="Tari">Tari setting: 1 = 12.5us, 2=25us. Other are invalid.</param>
            <param name="lbtThresh">LBT threshold value in dBm, if used. Minimum value is -90.</param>
            <param name="maxTxLevel">Maximum TX level. Range is 0...19.</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetCustomHoptable">
            <summary>
            Get custom hoptable
            </summary>
            <returns>Custom hoptable as <see cref="T:NurApiDotNet.NurApi.CustomHoptable"/></returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetCustomHoptableEx">
            <summary>
            Get extended custom hoptable
            </summary>
            <returns>Extended custom hoptable as <see cref="T:NurApiDotNet.NurApi.CustomHoptableEx"/></returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.SetExtendedCarrier(System.Boolean)">
            <summary>
            Causes the module to leave carrier on after a command and not to jump to new frequency.
            The carrier on time is limited by the maximum channel time.
            </summary>
            <param name="on">When set to true then the carrier is left on (after the following command) until channel time is up or 
            this function is called with this parameter as false.
            </param>
        </member>
        <member name="M:NurApiDotNet.NurApi.SetConstantChannelIndex(System.Int32)">
            <summary>
            Set channel index to use in current hop table.
            This prevents NUR from hopping in different channel.
            Use with care: RF frequency is locked as long as this is set.
            Restore normal channel hopping with parameter -1
            </summary>
            <param name="channelIdx">Channel index to use in current hop table. Set -1 to restore normal channel hopping.
            </param>
        </member>
        <member name="M:NurApiDotNet.NurApi.CustomCmd(System.Int32,System.Byte[],System.UInt32,System.Byte[]@,System.UInt32@)">
            <summary>
            Executes NUR API protocol formatted command exchange with the connected reader.
            </summary>
            <param name="cmd">Command that the module's comman handler processes.</param>
            <param name="inbuffer">Parameters for this command.</param>
            <param name="inbufferLen">Length, in bytes, of the parameters.</param>
            <param name="outbuffer">Pointer to the response buffer.</param>
            <param name="bytesRet">Maximum output buffer length.</param>
            <returns>Return the native API error code.</returns>
            <remarks>Contact Nordic ID support for the NUR API protocol documentation if needed.</remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.CustomCmd(System.Int32,System.Byte[])">
            <summary>
            Executes NUR API protocol formatted command exchange with the connected reader.
            </summary>
            <param name="cmd">Command that the module's comman handler processes.</param>
            <param name="inbuffer">Parameters for this command.</param>
            <returns>Returns data "as is" from the reader.</returns>
            <remarks>Contact Nordic ID support for the NUR API protocol documentation if needed.</remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.TuneAntenna(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Executes antenna tune sequence.
            </summary>
            <remarks>Use with care. If not sure that you need for this, do not use!</remarks>
            <param name="antenna">Antenna number to tune (0...Max antennas).</param>
            <param name="deepTune">If set to false the tune is 'quick'. When true, the tuning is done with more wider value area.</param>
            <param name="saveResults">If set to true the tuning result is stored into the module's non-volatile memory. 
            Otherwise the results are just taken into use for as long as the module is powered.</param>
            <returns>An array of integers representing dBm reflected power in each of the 6 tuning bands (the values are multiplied by 1000).</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.RestoreTuning(System.Boolean)">
            <summary>
            Restores the factory tuning to the module.
            Applies only to the NUR05WL2 and NUR10W modules.
            </summary>
            <remarks>Use with care. If not sure that you need for this, do not use!</remarks>
            <param name="factoryReset">
            <para>When set to true, the factory defaults are stored into the user area and also taken into use.</para>
            <para>When false then the last saved user tuning is taken into use.</para></param>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetDeviceCaps">
            <summary>
            Retrieves the device capabilities from the connected module.
            </summary>
            <returns>Returns the <see cref="T:NurApiDotNet.NurApi.DeviceCapabilites"/></returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetFWINFO">
            <summary>
            Get FW building information string.
            </summary>
            <returns>Returns the FW information as a string.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetSecChipFWINFO">
            <summary>
            Get secondary chip FW building information string.
            </summary>
            <returns>Returns the sec chip FW information as a string.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.ClearIdBuffer">
            <summary>
            Clear the module's internal ID buffer.		
            </summary>		
            <remarks>NOTE: This does not clear NurApi internal tag storage. Use ClearTagsEx() instead</remarks>
            <see cref="M:NurApiDotNet.NurApi.ClearTagsEx"/>
        </member>
        <member name="P:NurApiDotNet.NurApi.XPCRemoval">
            <summary>
            XPC removal control.
            </summary>
            <value>
            <para>Set to true (default) to enable the XPC removal when a tag is retrieved from the storage.</para>
            <para>Setting to false leaves the tag's EPC contents "as is".</para>
            </value>
            <remarks>
            <para>If the XPC removal is set to true, then the API removes the possible XPC bytes from the beginning of the EPC data.</para>
            <para>The removal is done when the tags are retrieved from the API's storage.</para>
            <para>Also note that if the XPC is present and it is not removed, then the tags' operations (read, write, lock, kill, etc.) that are based on the use of the EPC will fail.</para>
            </remarks>
        </member>
        <member name="P:NurApiDotNet.NurApi.AvailablePhysicalAntennas">
            <summary>
            <para>Get list of available physical antennas supported by connected reader.</para>
            <seealso cref="P:NurApiDotNet.NurApi.EnabledPhysicalAntennas"/>
            </summary>
            <returns>
            <para>List of supported antenna names if successful.</para>
            </returns>
            <value>
            List of supported antenna names if successful.
            </value>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetAntennaList">
            <summary>
            List of available antennas
            </summary>
            <returns>List of antennas available</returns>
        </member>
        <member name="P:NurApiDotNet.NurApi.EnabledPhysicalAntennas">
            <summary>
            <para>Get or sets list of enabled physical antennas in connected reader.</para>
            <seealso cref="P:NurApiDotNet.NurApi.AvailablePhysicalAntennas"/>
            <seealso cref="P:NurApiDotNet.NurApi.SelectedAntenna"/>
            </summary>
            <returns>
            List of enabled physical antennas. 
            </returns>
            <value>
            The value when set is a string list in which each member is expected to contain a valid, not case sensitive name of a physical antenna.
            </value>
        </member>
        <member name="M:NurApiDotNet.NurApi.EnablePhysicalAntenna(System.String,System.Boolean)">
            <summary>
            <para>This function enables the physical antennas that are specified as comma separated string parameter.</para>
            <para>To enable all antennas, use parameter "ALL".</para>
            </summary>
            <seealso cref="P:NurApiDotNet.NurApi.SelectedAntenna"/>
            <seealso cref="P:NurApiDotNet.NurApi.EnabledPhysicalAntennas"/>
            <seealso cref="P:NurApiDotNet.NurApi.AvailablePhysicalAntennas"/>
            <param name="commaSeparated">Comma separated list of physical antenna names to enable. If antenna is specified without polarity, all polarities will be set. To enable all antennas, use parameter "ALL"</param>
            <param name="disableOthers">If set to true, antennas that are not specified in comma separated string will be disabled. If set to false, antennas that are already enabled will remain enabled.</param>
            <example> 
            Example usage.
            <code xml:space="preserve">
            // Enable only Beam1 both polarities and Beam 5 polarity X
            hApi.EnablePhysicalAntenna("Beam1,Beam5.X", true);
            </code>
            </example>
        </member>
        <member name="M:NurApiDotNet.NurApi.DisablePhysicalAntenna(System.String)">
            <summary>
            <para>This function disables the physical antennas that are specified as comma separated string parameter.</para>
            </summary>
            <seealso cref="P:NurApiDotNet.NurApi.SelectedAntenna"/>
            <seealso cref="P:NurApiDotNet.NurApi.EnabledPhysicalAntennas"/>
            <seealso cref="P:NurApiDotNet.NurApi.AvailablePhysicalAntennas"/>
            <param name="commaSeparated">Comma separatede list of physical antenna names to disable. If antenna is specified without polarity, all polarities will be set. To disable all antennas, use parameter "ALL"</param>
            <value>
            The value is list of comma separated strings such as "Beam1.X, Beam2, Beam3.Y".
            </value>		
            <example> 
            Example usage.
            <code xml:space="preserve">
            // Disable Beam1 both polarities and Beam 5 polarity X
            hApi.DisablePhysicalAntenna("Beam1,Beam5.X");
            </code>
            </example>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetPhysicalAntennaMask(System.String)">
            <summary>
            This function generates an antennaMask value from the passed physical antenna names. If parameter is invalid, an exception will be thrown
            </summary>
            <param name="commaSeparated">Comma separated list of physical antenna names to use for creating the mask. If antenna is specified without polarity, all polarities will be added to the mask. To create a mask for all antenna, use parameter "ALL"</param>
            <returns>The generated antenna mask</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.IsPhysicalAntennaEnabled(System.String)">
            <summary>
            <para>This function returns true if all physical antennas specified in comma separated string are enabled, otherwise false is returned.</para>
            </summary>
            <returns>
            Returns true if all specified physical antenna(s) are enabled.
            <para>Throws InvalidParameter exception if reader does not contain supplied physical antenna.</para>
            <para>Throws NotSupported exception if reader does not support logical to physical antenna mappings.</para>
            </returns>
            <seealso cref="P:NurApiDotNet.NurApi.SelectedAntenna"/>
            <seealso cref="P:NurApiDotNet.NurApi.EnabledPhysicalAntennas"/>
            <seealso cref="P:NurApiDotNet.NurApi.AvailablePhysicalAntennas"/>
            <param name="commaSeparated">Comma separatede list of physical antenna names to test. If antenna is specified without polarity, all polarities will be tested. To test all antennas, use parameter "ALL"</param>
            /// <example> 
            Example usage.
            <code xml:space="preserve">
            // Test if Beam1 both polarities and Beam 5 polarity X are enabled.
            bool enabled = hApi.IsPhysicalAntennaEnabled("Beam1,Beam5.X");
            </code>
            </example>
        </member>
        <member name="M:NurApiDotNet.NurApi.NurAntennaIdToPhysicalAntenna(System.Int32)">
            <summary>
            <para>This function maps given logical antenna identifier to a physical name of an antenna.</para>
            </summary>
            <param name="nurAntennaId">NurApi logical antenna Id.</param>
            <returns>
            Physical antenna name
            </returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.NurPhysicalAntennaToAntennaId(System.String)">
            <summary>
            <para>This function maps given physical antenna name to an logical antenna identifier.</para>
            </summary>
            <param name="name">Name of the physical antenna to look up.</param>
            <returns>Return the antenna identifier number when successful.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.SetAntennaIdTranslation(System.Byte[])">
            <summary>
            <para>A method to change the module's internal mapping between the physsical and logical antenna identifiers.</para>
            </summary>
            <param name="antIdTranslation">Each byte contains the corresponding internal logical ID of the antenna.</param>
            <remarks>
            <para><b>WARNING: it is highly recommended not change the internal mappings.</b></para>
            <para>Think thoroughly before using this method; the behavior may be very unexpected.</para>
            </remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetAntennaIdTranslation">
            <summary>
            <para>Returns the module's internal translation between physical antenna and logical antenna ID.</para>
            </summary>
            <returns>Each byte in the returned array is a translation value that the module uses.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.DiagGetReport(System.UInt32)">
            <summary>
            Get diagnostics report from module.
            </summary>
            <param name="flags">Bit flags to send with request. e.g. DIAG_GETREPORT_RESET_STATS</param>
            <returns>Returns DiagReport object holding diagnostics report.</returns>
            <seealso cref="F:NurApiDotNet.NurApi.DIAG_GETREPORT_RESET_STATS"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.DiagSetConfig(System.UInt32,System.UInt32)">
            <summary>
            Set new diagnostics configuration.
            </summary>
            <param name="flags">Bit flags to send with request. One or more of DIAG_CFG flags.</param>
            <param name="interval">Report interval in seconds. Only valid if DIAG_CFG_NOTIFY_PERIODIC is set in flags. Set to 0 if DIAG_CFG_NOTIFY_PERIODIC is not set.</param>
            <returns>None</returns>
            <seealso cref="F:NurApiDotNet.NurApi.DIAG_CFG_NOTIFY_NONE"/>
            <seealso cref="F:NurApiDotNet.NurApi.DIAG_CFG_NOTIFY_PERIODIC"/>
            <seealso cref="F:NurApiDotNet.NurApi.DIAG_CFG_NOTIFY_WARN"/>
            <seealso cref="F:NurApiDotNet.NurApi.DIAG_CFG_FW_ERROR_LOG"/>
            <seealso cref="F:NurApiDotNet.NurApi.DIAG_CFG_FW_DEBUG_LOG"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.DiagGetConfig(System.UInt32@,System.UInt32@)">
            <summary>
            Get current diagnostics configuration.
            </summary>
            <param name="flags">Current bit flags. One or more of DIAG_CFG flags.</param>
            <param name="interval">Current report interval in seconds.</param>
            <returns>None</returns>
            <seealso cref="F:NurApiDotNet.NurApi.DIAG_CFG_NOTIFY_NONE"/>
            <seealso cref="F:NurApiDotNet.NurApi.DIAG_CFG_NOTIFY_PERIODIC"/>
            <seealso cref="F:NurApiDotNet.NurApi.DIAG_CFG_NOTIFY_WARN"/>
            <seealso cref="F:NurApiDotNet.NurApi.DIAG_CFG_FW_ERROR_LOG"/>
            <seealso cref="F:NurApiDotNet.NurApi.DIAG_CFG_FW_DEBUG_LOG"/>
        </member>
        <member name="F:NurApiDotNet.NurApi.CustomExchangeParams.MIN_TIMEOUT">
            <summary>
            Minimum timeout in milliseconds to wait for a response.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CustomExchangeParams.MAX_TIMEOUT">
            <summary>
            Maximum timeout in milliseconds to wait for a response.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CustomExchangeParams.txLen">
            <summary>
            Transmission length in bits.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CustomExchangeParams.rxLen">
            <summary>
            Expected number bit in the response.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CustomExchangeParams.rxTimeout">
            <summary>
            Response wait timeout in ms (20...100).
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CustomExchangeParams.asWrite">
            <summary>
            Tells the module to behave as if this operation was a write operation.
            </summary>  
        </member>
        <member name="F:NurApiDotNet.NurApi.CustomExchangeParams.appendHandle">
            <summary>
            The handle that is received from the tag singulation is appended to the bit stream.
            </summary>  
        </member>
        <member name="F:NurApiDotNet.NurApi.CustomExchangeParams.xorRN16">
            <summary>
            The RN16 received from the tag singulation is XOR'ed with the TX data in case the TX data length is 16 bits.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CustomExchangeParams.txOnly">
            <summary>ve
            The bit stream is only transmitted no response is expected.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CustomExchangeParams.noTxCRC">
            <summary>
            The transmission shall contain no CRC.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CustomExchangeParams.noRxCRC">
            <summary>
            The receiver shall not decode the CRC. The data is received 'as is'.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CustomExchangeParams.txCRC5">
            <summary>
            The transmission CRC shall be CRC-5 instead of CRC-16.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CustomExchangeParams.rxLenUnknown">
            <summary>
            RX length is unkown; rxLen parameter will be ignored.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CustomExchangeParams.rxStripHandle">
            <summary>
            Leave out the bacscattered handle in the reponse.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CustomExchangeParams.bitBuffer">
            <summary>
            Bit data. 
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.CustomExchangeParams.Serialize">
            <summary>
            Serialize CustomExchangeFlags flags
            </summary>			
            <returns>byte Array of serialized flags</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.CustomExchangeParams.GetByteLength(NurApiDotNet.NurApi.CustomExchangeParams)">
            <summary>
            Get required buffer size for parameters.
            </summary>
            <param name="parameters">Parameters from which the size is calculated from.</param>
            <returns>Number of byte required for serializing given parameters.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.Gen2v2Untraceable(System.UInt32,NurApiDotNet.UntraceableParam)">
            <summary>
            Gen2 version 2 "Untraceable" command with no tag singulation.
            </summary>
            <param name="accessPwd">Access password must always be valid for Untraceable command.</param>
            <param name="utrParam">The Untracable command's parameters.</param>
            <seealso cref="T:NurApiDotNet.UntraceableParam"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.Gen2v2UntraceableByEPC(System.UInt32,System.Byte[],NurApiDotNet.UntraceableParam)">
            <summary>
            Gen2 version 2 "Untraceable" command with EPC selection.
            </summary>
            <param name="accessPwd">Access password must always be valid for Untraceable command.</param>
            <param name="epc">The EPC contents to singulate against.</param>
            <param name="utrParam">The Untracable command's parameters.</param>
            <seealso cref="T:NurApiDotNet.UntraceableParam"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.Gen2v2UntraceableSingulated(System.UInt32,System.Byte,System.UInt32,System.Int32,System.Byte[],NurApiDotNet.UntraceableParam)">
            <summary>
            Gen2 version 2 "Untraceable" command with specific singulation parameters.
            </summary>
            <param name="accessPwd">Access password must always be valid for Untraceable command.</param>
            <param name="sBank">Bank where the selection mask is applied to. </param>
            <param name="sAddress">Selection mask's bit address.</param>
            <param name="sMaskBitLength">Selection mask's length in bits. </param>
            <param name="sMask">Selection mask data.</param>
            <param name="utrParam">The Untracable command's parameters.</param>
            <seealso cref="T:NurApiDotNet.UntraceableParam"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.Gen2v2Authenticate(NurApiDotNet.NurApi.AuthenticateParam)">
            <summary>
            Gen2 version 2 Authenticate command with no tag singulation in open state.
            </summary>
            <param name="authParam">The authentication parameters, <see cref="T:NurApiDotNet.NurApi.AuthenticateParam"/>. </param>
            <returns>Returns the authentication response structure if the was no native API error.</returns>
            <seealso cref="T:NurApiDotNet.NurApi.AuthenticateParam"/>
            <seealso cref="T:NurApiDotNet.NurApi.AuthenticateResp"/>
            <remarks>This method does the authentication in the open state; this is the recommended way.</remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.Gen2v2Authenticate(System.UInt32,NurApiDotNet.NurApi.AuthenticateParam)">
            <summary>
            Gen2 version 2 Authenticate command with no tag singulation in secured state.
            </summary>
            <param name="accessPwd">The access password to use.</param>
            <param name="authParam">The authentication parameters, <see cref="T:NurApiDotNet.NurApi.AuthenticateParam"/>. </param>
            <returns>Returns the authentication response structure if the was no native API error.</returns>
            <seealso cref="T:NurApiDotNet.NurApi.AuthenticateParam"/>
            <seealso cref="T:NurApiDotNet.NurApi.AuthenticateResp"/>
            <remarks>This method does the authentication in the secured state; it is not recommended to do it this way.</remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.Gen2v2AuthenticateByEPC(System.Byte[],NurApiDotNet.NurApi.AuthenticateParam)">
            <summary>
            Gen2 version 2 Authenticate command with EPC singulation singulation in open state.
            </summary>
            <param name="epc">The EPC contents to singulate against.</param>
            <param name="authParam">The authentication parameters, <see cref="T:NurApiDotNet.NurApi.AuthenticateParam"/>. </param>
            <returns>Returns the authentication response structure if the was no native API error.</returns>
            <seealso cref="T:NurApiDotNet.NurApi.AuthenticateParam"/>
            <seealso cref="T:NurApiDotNet.NurApi.AuthenticateResp"/>
            <remarks>This method does the authentication in the open state; this is the recommended way.</remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.Gen2v2AuthenticateByEPC(System.UInt32,System.Byte[],NurApiDotNet.NurApi.AuthenticateParam)">
            <summary>
            Gen2 version 2 Authenticate command with EPC singulation singulation in secured state.
            </summary>
            <param name="accessPwd">The access password to use.</param>
            <param name="epc">The EPC contents to singulate against.</param>
            <param name="authParam">The authentication parameters, <see cref="T:NurApiDotNet.NurApi.AuthenticateParam"/>. </param>
            <returns>Returns the authentication response structure if the was no native API error.</returns>
            <seealso cref="T:NurApiDotNet.NurApi.AuthenticateParam"/>
            <seealso cref="T:NurApiDotNet.NurApi.AuthenticateResp"/>
            <remarks>This method does the authentication in the secured state; it is not recommended to do it this way.</remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.Gen2v2AuthenticateSingulated(System.Byte,System.UInt32,System.Int32,System.Byte[],NurApiDotNet.NurApi.AuthenticateParam)">
            <summary>
            Gen2 version 2 Authenticate command with specific singulation parameters in open state.
            </summary>
            <param name="sBank">Bank where the selection mask is applied to. </param>
            <param name="sAddress">Selection mask's bit address.</param>
            <param name="sMaskBitLength">Selection mask's length in bits. </param>
            <param name="sMask">Selection mask data.</param>
            <param name="authParam">The authentication parameters, <see cref="T:NurApiDotNet.NurApi.AuthenticateParam"/>. </param>
            <returns>Returns the authentication response structure if the was no native API error.</returns>
            <seealso cref="T:NurApiDotNet.NurApi.AuthenticateParam"/>
            <seealso cref="T:NurApiDotNet.NurApi.AuthenticateResp"/>
            <remarks>This method does the authentication in the open state; this is the recommended way.</remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.Gen2v2AuthenticateSingulated(System.UInt32,System.Byte,System.UInt32,System.Int32,System.Byte[],NurApiDotNet.NurApi.AuthenticateParam)">
            <summary>
            Gen2 version 2 Authenticate command with specific singulation parameters in secured state.
            </summary>
            <param name="accessPwd">The access password to use.</param>
            <param name="sBank">Bank where the selection mask is applied to. </param>
            <param name="sAddress">Selection mask's bit address.</param>
            <param name="sMaskBitLength">Selection mask's length in bits. </param>
            <param name="sMask">Selection mask data.</param>
            <param name="authParam">The authentication parameters, <see cref="T:NurApiDotNet.NurApi.AuthenticateParam"/>. </param>
            <returns>Returns the authentication response structure if the was no native API error.</returns>
            <seealso cref="T:NurApiDotNet.NurApi.AuthenticateParam"/>
            <seealso cref="T:NurApiDotNet.NurApi.AuthenticateResp"/>
            <remarks>This method does the authentication in the secured state; it is not recommended to do it this way.</remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.Gen2v2ReadBuffer(System.Boolean,System.UInt32,System.UInt16,System.UInt16)">
            <summary>
            <para>Gen2 version 2 ReadBuffer command without tag selection.</para>
            <para>This is similar to the regular read command but the read data source is the version 2 tag's internal buffer.</para>
            </summary>
            <param name="secured">Set to true if the tag is accessed with password prior to the read command.</param>
            <param name="passwd">Password to use in case the tag's access is secured.</param>
            <param name="bitAddress">The bit  address to start the reading from.</param>
            <param name="bitCount">Number of bits to read from the buffer.</param>
            <returns>Returns the structure containing the data and the actual bit length of the data.</returns>
            <seealso cref="T:NurApiDotNet.NurApi.V2ReadBufferResp"/>
            <remarks>
            <para>This method does not use tag singulation i.e. it is expected that only one tag is in the field.</para>
            <para>Also note that the application is responsible for the bit data handling.</para>
            <para>The bit level understanding is especially required in case where the returned data is not exactly byte (8-bit) aligned.</para>
            </remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.Gen2v2ReadBufferSingulated(System.Boolean,System.UInt32,System.Byte,System.UInt32,System.UInt32,System.Byte[],System.UInt16,System.UInt16)">
            <summary>
            <para>Gen2 version 2 ReadBuffer command with specific tag selection.</para>
            <para>This is similar to the regular read command but the read data source is the version 2 tag's internal buffer.</para>
            </summary>
            <param name="secured">Set to true if the tag is accessed with password prior to the read command.</param>
            <param name="passwd">Password to use in case the tag's access is secured.</param>
            <param name="sBank">Bank where the selection mask is applied to. </param>
            <param name="sAddress">Selection mask's bit address.</param>
            <param name="sMaskBitLength">Selection mask's length in bits. </param>
            <param name="sMask">Selection mask data.</param>
            <param name="bitAddress">The bit  address to start the reading from.</param>
            <param name="bitCount">Number of bits to read from the buffer.</param>
            <returns>Returns the structure containing the data and the actual bit length of the data.</returns>
            <seealso cref="T:NurApiDotNet.NurApi.V2ReadBufferResp"/>
            <remarks>
            <para>This method uses specific tag singulation so that the addressed tag is expected to be uniquely identified by the given selection data.</para>
            <para>Also note that the application is responsible for the bit data handling.</para>
            <para>The bit level understanding is especially required in case where the returned data is not exactly byte (8-bit) aligned.</para>
            </remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.Gen2v2ReadBufferByEPC(System.Boolean,System.UInt32,System.Byte[],System.UInt16,System.UInt16)">
            <summary>
            <para>Gen2 version 2 ReadBuffer command with the tag being selected by its EPC contents.</para>
            <para>This is similar to the regular read command but the read data source is the version 2 tag's internal buffer.</para>
            </summary>
            <param name="secured">Set to true if the tag is accessed with password prior to the read command.</param>
            <param name="passwd">Password to use in case the tag's access is secured.</param>
            <param name="epc">The tag's EPC contents.</param>
            <param name="bitAddress">The bit  address to start the reading from.</param>
            <param name="bitCount">Number of bits to read from the buffer.</param>
            <returns>Returns the structure containing the data and the actual bit length of the data.</returns>
            <seealso cref="T:NurApiDotNet.NurApi.V2ReadBufferResp"/>
            <remarks>
            <para>This method uses tag singulation based on the addressed tag's EPC contents i.e. the EPC contents is expected to be unique among the tags in field.</para>
            <para>Also note that the application is responsible for the bit data handling.</para>
            <para>The bit level understanding is especially required in case where the returned data is not exactly byte (8-bit) aligned.</para>
            </remarks>
        </member>
        <member name="P:NurApiDotNet.NurApi.UserData">
            <summary>
            User defined object
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.SetLogLevel(System.Int32)">
            <summary>
            Set Logging level
            </summary>
            <param name="mask">Use NurApi.LOG_VERBOSE,NurApi.LOG_ERROR,NurApi.LOG_USER,NurApi.LOG_DATA,NurApi.LOG_ALL</param>
            <example>
            <code lang="C#">hNur.SetLogLevel(NurApi.LOG_ERROR | NurApi.LOG_DATA);</code></example>
            <seealso cref="M:NurApiDotNet.NurApi.SetLogToFile(System.Boolean)"></seealso>
            <seealso cref="M:NurApiDotNet.NurApi.SetLogLevel(System.Int32)"></seealso>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetLogLevel">
            <summary>
            Get Logging level
            </summary>
            <returns>Mask bits of logging level: 1=NurApi.LOG_VERBOSE 2=NurApi.LOG_ERROR 4=NurApi.LOG_USER 8=NurApi.LOG_DATA</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.SetLogToFile(System.Boolean)">
            <summary>
            Enables log generation to file. Default is "NurApiLog.txt" in to app working folder<br/> 
            To set path use <see cref="M:NurApiDotNet.NurApi.SetLogFilePath(System.String)"/>
            <seealso cref="M:NurApiDotNet.NurApi.SetLogToFile(System.Boolean)"></seealso>
            <seealso cref="M:NurApiDotNet.NurApi.SetLogLevel(System.Int32)"></seealso>
            </summary>
            <param name="enable">Set true if logs are generated to file</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetLogToFile">
            <summary>
            Get log to file enabled state.
            </summary>
            <returns>True if enabled</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.SetLogFilePath(System.String)">
            <summary>
            Set Log file path<br/>     
            See <see cref="M:NurApiDotNet.NurApi.SetLogToFile(System.Boolean)"/>
            </summary>
            <param name="path">Set full path of log file</param>       
            <seealso cref="M:NurApiDotNet.NurApi.SetLogToFile(System.Boolean)"></seealso>
            <seealso cref="M:NurApiDotNet.NurApi.SetLogLevel(System.Int32)"></seealso>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetLogFilePath">
            <summary>
            Get current log file path
            </summary>
            <returns>Current log file path as a string</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.SetLogToStdout(System.Boolean)">
            <summary>
            Set log to stdout.
            </summary>
            <param name="enable">If set to true, all enabled logs are written also to stdout.</param>
            <remarks>LogEvents are not sent to application if this is enabled</remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.Log(System.Int32,System.String)">
            <summary>
            Writes text to log for specified level.
            </summary>
            <param name="level">Set logging level mask: <see cref="F:NurApiDotNet.NurApi.LOG_VERBOSE"/>,<see cref="F:NurApiDotNet.NurApi.LOG_ERROR"/>,<see cref="F:NurApiDotNet.NurApi.LOG_USER"/>,<see cref="F:NurApiDotNet.NurApi.LOG_DATA"/>,<see cref="F:NurApiDotNet.NurApi.LOG_ALL"/></param>
            <param name="txt">Text line to log</param>
            <remarks>Use <see cref="M:NurApiDotNet.NurApi.Log(System.Int32,System.Func{System.String})"/> instead</remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.Log(System.Int32,System.Func{System.String})">
            <summary>
            Writes text to log for specified level.
            </summary>
            <param name="level">Set logging level mask: <see cref="F:NurApiDotNet.NurApi.LOG_VERBOSE"/>,<see cref="F:NurApiDotNet.NurApi.LOG_ERROR"/>,<see cref="F:NurApiDotNet.NurApi.LOG_USER"/>,<see cref="F:NurApiDotNet.NurApi.LOG_DATA"/>,<see cref="F:NurApiDotNet.NurApi.LOG_ALL"/></param>
            <param name="txt">Func delegate that returns text line to log. Delegate is only called if log level is enabled</param>
            <example>
            <code lang="C#">hNur.Log(NurApi.LOG_ERROR, () => "Error: {something}");</code>
            </example>
        </member>
        <member name="M:NurApiDotNet.NurApi.DLog(System.String)">
            <summary>
            Writes to data log.
            </summary>
            <param name="txt">A specific text to put in data log.</param>
            <remarks>Use <see cref="M:NurApiDotNet.NurApi.DLog(System.Func{System.String})"/> instead</remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.DLog(System.Func{System.String})">
            <summary>
            Writes to data log.
            </summary>
            <param name="txt">Func delegate that returns text line to log. Delegate is only called if log level is enabled</param>
            <see cref="M:NurApiDotNet.NurApi.Log(System.Int32,System.Func{System.String})"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.VLog(System.String)">
            <summary>
            Writes text to log using LOG_VERBOSE level mask.
            </summary>
            <param name="txt">Text line to log</param>
            <remarks>Use <see cref="M:NurApiDotNet.NurApi.VLog(System.Func{System.String})"/> instead</remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.VLog(System.Func{System.String})">
            <summary>
            Writes text to log using LOG_VERBOSE level mask.
            </summary>
            <param name="txt">Func delegate that returns text line to log. Delegate is only called if log level is enabled</param>
            <see cref="M:NurApiDotNet.NurApi.Log(System.Int32,System.Func{System.String})"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.ELog(System.String)">
            <summary>
            Writes text to log using LOG_ERROR level mask.
            </summary>
            <param name="txt">Text line to log</param>
            <remarks>Use <see cref="M:NurApiDotNet.NurApi.ELog(System.Func{System.String})"/> instead</remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.ELog(System.Func{System.String})">
            <summary>
            Writes text to log using LOG_ERROR level mask.
            </summary>
            <param name="txt">Func delegate that returns text line to log. Delegate is only called if log level is enabled</param>
            <see cref="M:NurApiDotNet.NurApi.Log(System.Int32,System.Func{System.String})"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.ULog(System.String)">
            <summary>
            Writes text to log using LOG_USER level mask.
            </summary>
            <param name="txt">Text line to log</param>
            <remarks>Use <see cref="M:NurApiDotNet.NurApi.ULog(System.Func{System.String})"/> instead</remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.ULog(System.Func{System.String})">
            <summary>
            Writes text to log using LOG_USER level mask.
            </summary>
            <param name="txt">Func delegate that returns text line to log. Delegate is only called if log level is enabled</param>
            <see cref="M:NurApiDotNet.NurApi.Log(System.Int32,System.Func{System.String})"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetErrorMessage(System.Int32)">
            <summary>
            Get Nur error code as string
            </summary>
            <param name="error">error code</param>
            <returns>Error as a string interpreted from the <paramref name="error"/> code.</returns>
        </member>
        <member name="P:NurApiDotNet.NurApi.FileVersion">
            <summary>
            The NurApi assembly version.
            </summary>
            <returns>Returns the NurApi assembly version string.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetFileVersion">
            <summary>
            The NurApi assembly version. Provided for compatibility, use NurApi.FileVersion instead
            </summary>
            <returns>Returns the NurApi assembly version string.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.StopContinuous">
            <summary>
            Force stop all NUR module running continuous functions.
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetMode">
            <summary>
            Get running mode
            </summary>
            <returns>Running mode: "A"=Application "B"=Bootloader</returns>            
        </member>
        <member name="M:NurApiDotNet.NurApi.EnterBoot">
            <summary>
            Starts bootloader or Application
            </summary>        
        </member>
        <member name="M:NurApiDotNet.NurApi.ModuleRestart">
            <summary>
            Force RFID module restart
            </summary>        
        </member>
        <member name="M:NurApiDotNet.NurApi.ContCarrier(System.Byte[],System.UInt32)">
            <summary>
            Continuous carrier test setup.
            </summary>
            <param name="data">Data to send-</param>
            <param name="dataLen">Length of the data to transmit.</param>
            <remarks>For testing purposes only: Do not use.</remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.StopContCarrier">
            <summary>
            Stop continuous carrier test.
            </summary>
            <remarks>For testing purposes only: Do not use.</remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.ScanChannels">
            <summary>
            Scan region channels RSSI
            </summary>
            <returns>information about channels as <see cref="T:NurApiDotNet.NurApi.ScanChannelInfo"/></returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.ScanChannels(System.Int32)">
            <summary>
            Scan region channels RSSI
            </summary>
            <param name="maxChannels">parameter is ignored</param>
            <returns>information about channel as <see cref="T:NurApiDotNet.NurApi.ScanChannelInfo"/></returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetReflectedPower">
            <summary>
            Get antenna reflected power info
            </summary>
            <returns>information about reflected power as <see cref="T:NurApiDotNet.NurApi.ReflectedPowerInfo"/></returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetReflectedPower(System.UInt32)">
            <summary>
            Get antenna reflected power info for specific frequency
            </summary>
            <param name="freq">Frequency in kHz</param>
            <returns>information about reflected power as <see cref="T:NurApiDotNet.NurApi.ReflectedPowerInfo"/></returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetReflectedPowerValue(System.UInt32)">
            <summary>
            Returns the reflected power value for given frequency.
            A return value of -100 indicates that no reflected power was detected. This may indicate broken or bad antenna connection.
            </summary>
            <param name="freq">Frequency to use for the measurement in kHz. Use 0 to measure current region middle frequency.</param>
            <returns>Reflected power in dBm.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetReflectedPowerValue">
            <summary>
            Get the reflected power as a floating point value from current region middle channel's frequency.
            </summary>
            <returns>reflected power directly as a floating point value</returns>
        </member>
        <member name="T:NurApiDotNet.NurApi.XPCSpec">
            <summary>
            Holds XPCSpec data.
            </summary>            
        </member>
        <member name="F:NurApiDotNet.NurApi.XPCSpec.xpc_w1">
            <summary>
             XPC word 1 if present.
             </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.XPCSpec.xpc_w2">
            <summary>
            XPC word 2 if present.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.XPCSpec.modifiedEpc">
            <summary>
            Modified EPC i.e. the EPC without the XPC word(s).
            </summary>            
        </member>
        <member name="M:NurApiDotNet.NurApi.GetEpcXpcSpec(System.Int32,System.Byte[])">
            <summary>
            Get the modified EPC based on the given PC contents.
            </summary>
            <param name="pc">PC bits received from the tag.</param>
            <param name="epc">The tag's EPC.</param>
            <returns>Return null, if there no modification needed. Otherwise a valid XPCSpec class is returned.</returns>
            <see cref="T:NurApiDotNet.NurApi.XPCSpec"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetGPIOConfig">
            <summary>
            Get NUR module GPIO configuration.
            </summary>
            <returns>An array containing the GPIO configuration <see cref="T:NurApiDotNet.NurApi.GpioEntry"/>.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.SetGPIOConfig(NurApiDotNet.NurApi.GpioEntry[])">
            <summary>
            Set NUR module GPIO configuration.
            </summary>
            <param name="config">New GPIO configuration.</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetGPIOStatus(System.Int32)">
            <summary>
            Get single GPIO pin state.
            </summary>
            <param name="gpio">Zero based GPIO number.</param>
            <returns>Returns the GPIO status as seen in <see cref="T:NurApiDotNet.NurApi.GpioStatus"/>.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.SetGPIOStatus(System.Int32,System.Boolean)">
            <summary>
            Set single GPIO pin state.
            <b>NOTE: GPIO must be configured as output</b>
            </summary>
            <param name="gpio">Zero based GPIO number.</param>
            <param name="state">State to set. true = high, false = low.</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.SetGPIOStatusMask(System.Int32,System.Boolean)">
            <summary>
            Set state for Gpio's specified by gpioMask<br/>
            For example: value 0x50 set state for GPIO5 and GPIO7
            </summary>
            <param name="gpioMask">Mask of GPIO's</param>
            <param name="state">State to set. true = high, false = low.</param>
        </member>
        <member name="T:NurApiDotNet.NurApi.GpioEntry">
            <summary>
            Single GPIO configuration.
            </summary>		
        </member>
        <member name="F:NurApiDotNet.NurApi.GpioEntry.available">
            <summary> true if configuration is available. When writing new configuration set to 0 if no need to configure this GPIO.</summary>			
        </member>
        <member name="F:NurApiDotNet.NurApi.GpioEntry.enabled">
            <summary> true if GPIO is enabled.</summary>			
        </member>
        <member name="F:NurApiDotNet.NurApi.GpioEntry.type">
            <summary>Type of GPIO. see GPIO_TYPE's</summary>			
        </member>
        <member name="F:NurApiDotNet.NurApi.GpioEntry.edge">
            <summary>Trigger edge, falling, rising or both. see GPIO_EDGE's</summary>			
        </member>
        <member name="F:NurApiDotNet.NurApi.GpioEntry.action">
            <summary>Trigger action. see GPIO_ACTION's</summary>		
        </member>
        <member name="M:NurApiDotNet.NurApi.GpioEntry.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.GpioConfig">
            <summary>
            Module GPIO configuration.
            </summary>		
        </member>
        <member name="F:NurApiDotNet.NurApi.GpioConfig.count">
            <summary>Number of entries filled.</summary>			
        </member>
        <member name="F:NurApiDotNet.NurApi.GpioConfig.entries">
            <summary>Configuration entries. Each entry represents one GPIO in module.</summary>			
        </member>
        <member name="T:NurApiDotNet.NurApi.GpioStatus">
            <summary>
            Single GPIO status.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GpioStatus.enabled">
            <summary>true  if GPIO is enabled.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GpioStatus.type">
            <summary>Type of GPIO. see GPIO_TYPE's</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.GpioStatus.state">
            <summary>State of the GPIO. Only valid if GPIO is configured as input (NurApi.GPIO_TYPE_INPUT).</summary>            
        </member>
        <member name="M:NurApiDotNet.NurApi.SimpleInventory">
            <summary>
            Use <see cref="M:NurApiDotNet.NurApi.Inventory"/> instead.
            </summary>
            <returns>Inventory result data as <see cref="T:NurApiDotNet.NurApi.InventoryResponse"/></returns>
            <seealso cref="M:NurApiDotNet.NurApi.Inventory"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.Inventory">
            <summary>
            Perform single tag inventory.<br/>
            This function uses rounds, Q and session values from current module settings.
            <para>
            How it works:
            </para>
            <para>
            The inventory operation returns information about the last inventory; it does not return tags.
            The inventory response <see cref="T:NurApiDotNet.NurApi.InventoryResponse"/> contains namely the number of tags that were found during last inventory and the number of tags that are stored into the module's memory.
            After exeuting an inventory the tags need to be first retrieved from the module by calling <see cref="M:NurApiDotNet.NurApi.FetchTags"/> or <see cref="M:NurApiDotNet.NurApi.FetchTags(System.Boolean,System.Int32@)"/> and after that 
            the tags are available in the NurApi's tag storage, <see cref="T:NurApiDotNet.NurApi.TagStorage"/> that can be retrieved by the get tags storage command, see <see cref="M:NurApiDotNet.NurApi.GetTagStorage"/>.
            If the inventory needs to be "clean" the method for clearing the module's is <see cref="M:NurApiDotNet.NurApi.ClearTagsEx"/>. Calling this method also clears the NurApi's tag storage and module tag storage.
            </para>
            </summary>
            <returns>Inventory result data as <see cref="T:NurApiDotNet.NurApi.InventoryResponse"/></returns>
            <example>
            <code source="DocExample\SimpleInventory.cs" lang="C#"></code>
            </example>
            <seealso cref="M:NurApiDotNet.NurApi.InventorySelect(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.InventorySelectByEPC(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.FetchTags"/>
            <seealso cref="M:NurApiDotNet.NurApi.FetchTags(System.Boolean,System.Int32@)"/>
            <seealso cref="M:NurApiDotNet.NurApi.GetTagStorage"/>
            <seealso cref="T:NurApiDotNet.NurApi.TagStorage"/>
            <seealso cref="T:NurApiDotNet.NurApi.Tag"/>     
        </member>
        <member name="M:NurApiDotNet.NurApi.Inventory(System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform single inventory using specified rounds, Q  and session.
            <para>What inventory actually returns, see <see cref="M:NurApiDotNet.NurApi.Inventory"/>'s summary.</para>
            </summary>
            <param name="rounds">Full query rounds to perform in inventory. Range 0 - 10. Value 0 means automatic round number. (see <see cref="P:NurApiDotNet.NurApi.InventoryRounds"/> property)</param>
            <param name="Q">The Q parameter. Range 0 - 15. Value 0 means automatic Q calculation. (see <see cref="P:NurApiDotNet.NurApi.InventoryQ"/> property)</param>
            <param name="session">The session parameter. Range 0 - 3.(see <see cref="P:NurApiDotNet.NurApi.InventorySession"/> property)</param>
            <returns>Inventory result data as <see cref="T:NurApiDotNet.NurApi.InventoryResponse"/></returns>
            <example>
            <code source="DocExample\SimpleInventory.cs" lang="C#"></code>
            </example>
            <seealso cref="M:NurApiDotNet.NurApi.Inventory"/>
            <seealso cref="M:NurApiDotNet.NurApi.InventorySelect(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.InventorySelectByEPC(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte[])"/>
            <seealso cref="T:NurApiDotNet.NurApi.InventoryResponse"/>
            <seealso cref="M:NurApiDotNet.NurApi.FetchTags"/>
            <seealso cref="M:NurApiDotNet.NurApi.FetchTags(System.Boolean,System.Int32@)"/>
            <seealso cref="M:NurApiDotNet.NurApi.GetTagStorage"/>
            <seealso cref="T:NurApiDotNet.NurApi.TagStorage"/>
            <seealso cref="T:NurApiDotNet.NurApi.Tag"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.InventorySelect(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[])">
            <summary>
            Perform single inventory command with specific tag singulation. 
            <para>Tags can be singluted against desired memory bank and data mask.</para>
            <para>What inventory actually returns, see <see cref="M:NurApiDotNet.NurApi.Inventory"/>'s summary.</para>
            </summary>
            <param name="rounds">Full query rounds to perform in inventory. Range 0 - 10. Value 0 means automatic round number. (see <see cref="P:NurApiDotNet.NurApi.InventoryRounds"/> property)</param>
            <param name="Q">The Q parameter. Range 0 - 15. Value 0 means automatic Q calculation. (see <see cref="P:NurApiDotNet.NurApi.InventoryQ"/> property)</param>
            <param name="session">The session parameter. Range 0 - 3.(see <see cref="P:NurApiDotNet.NurApi.InventorySession"/> property)</param>
            <param name="invertSelect">Invert select. Select tags that do not match the selection criteria.</param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits. </param>
            <param name="sMaskBitLength">Length of the mask data in bits.</param>
            <param name="sMask">Mask data buffer.</param>
            <returns>Inventory result data as <see cref="T:NurApiDotNet.NurApi.InventoryResponse"/></returns>
            <seealso cref="M:NurApiDotNet.NurApi.Inventory"/>
            <seealso cref="M:NurApiDotNet.NurApi.Inventory(System.Int32,System.Int32,System.Int32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.InventorySelectByEPC(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte[])"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.InventorySelectByEPC(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte[])">
            <summary>
            Perform single inventory command with tag singulated against EPC. 
            <para>What inventory actually returns, see <see cref="M:NurApiDotNet.NurApi.Inventory"/>'s summary.</para>
            </summary>
            <param name="rounds">Full query rounds to perform in inventory. Range 0 - 10. Value 0 means automatic round number. (see <see cref="P:NurApiDotNet.NurApi.InventoryRounds"/> property)</param>
            <param name="Q">The Q parameter. Range 0 - 15. Value 0 means automatic Q calculation. (see <see cref="P:NurApiDotNet.NurApi.InventoryQ"/> property)</param>
            <param name="session">The session parameter. Range 0 - 3.(see <see cref="P:NurApiDotNet.NurApi.InventorySession"/> property)</param>
            <param name="invertSelect">Invert select. Select tags that do not match the selection criteria. </param>
            <param name="epcBuffer">EPC memory to singulate against.</param>
            <returns>Inventory data as <see cref="T:NurApiDotNet.NurApi.InventoryResponse"/></returns>
            <seealso cref="M:NurApiDotNet.NurApi.Inventory"/>
            <seealso cref="M:NurApiDotNet.NurApi.Inventory(System.Int32,System.Int32,System.Int32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.InventorySelect(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[])"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.IsInventoryStreamRunning">
            <summary>
            Check if inventory stream routine is running.
            </summary>
            <returns>true if inventory stream routine is running.</returns>        
        </member>
        <member name="M:NurApiDotNet.NurApi.GetTagStorage">
            <summary>
            Get NurApi's internal tag storage.
            </summary>
            <remarks>If any stream is active, accesing tag storage, it must locked with lock()</remarks>
            <returns>Tag storage as <see cref="T:NurApiDotNet.NurApi.TagStorage"/></returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.FetchTags(System.Boolean,System.Int32@)">
            <summary>
            Fetch tags from reader memory
            </summary>
            <param name="includeMeta">if true, meta data of tag included</param>
            <param name="tagsAdded">Number of tags added in NurApi's internal tag storage</param>
            <remarks>If any stream is active, accesing tag storage, it must locked with lock()</remarks>
            <returns>Tag storage as <see cref="T:NurApiDotNet.NurApi.TagStorage"/></returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.FetchTags(System.Boolean)">
            <summary>
            Fetch tags from reader memory
            </summary>
            <param name="includeMeta">if true, meta data of tag included</param>       
            <remarks>If any stream is active, accesing tag storage, it must locked with lock()</remarks>
            <returns>Tag storage as <see cref="T:NurApiDotNet.NurApi.TagStorage"/></returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.FetchTags">
            <summary>
            Fetch tags from reader memory. Meta data of tag is included.
            </summary>        
            <remarks>If any stream is active, accesing tag storage, it must locked with lock()</remarks>
            <returns>Tag storage as <see cref="T:NurApiDotNet.NurApi.TagStorage"/></returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.ClearTags">
            <summary>
            Clear NurApi's internal tag storage memory from tags
            </summary>
            <remarks>NOTE: This does not clear RFID reader tag memory. Use <see cref="M:NurApiDotNet.NurApi.ClearTagsEx"/> instead.</remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.FetchTagAt(System.Boolean,System.Int32)">
            <summary>
            Fetch a single tag based on "index" in reader tag memory.
            </summary>
            <param name="includeMeta">Set to true if the metadata should be included.</param>
            <param name="tagNum">Index of the tag</param>
            <returns>New tag object.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.ClearTagsEx">
            <summary>
            Clear NurApi's internal tag storage and RFID reader memory from tags.
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.StartInventorySelectStream(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[])">
             <summary>
             Start inventory streaming with tag select on module. Module will start continuos inventory and sends new tags to host as <see cref="E:NurApiDotNet.NurApi.InventoryStreamEvent"/>.
            <para>To stop inventory stream use <see cref="M:NurApiDotNet.NurApi.StopInventoryStream"/></para>        
             </summary>
             <param name="rounds">Full query rounds to perform in inventory. Range 0 - 10. Value 0 means automatic round number. (see <see cref="P:NurApiDotNet.NurApi.InventoryRounds"/> property)</param>
             <param name="Q">The Q parameter. Range 0 - 15. Value 0 means automatic Q calculation. (see <see cref="P:NurApiDotNet.NurApi.InventoryQ"/> property)</param>
             <param name="session">The session parameter. Range 0 - 3.(see <see cref="P:NurApiDotNet.NurApi.InventorySession"/> property)</param>
             <param name="invertSelect">Invert select. Select tags that do not match the selection criteria.</param>
             <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
             <param name="sAddress">Singulation data address in bits. </param>
             <param name="sMaskBitLength">Length of the mask data in bits.</param>
             <param name="sMask">Mask data buffer.</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.StartInventorySelectStream(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte,System.UInt32,System.Byte[])">
             <summary>
             Start inventory streaming with tag select on module. Module will start continuos inventory and sends new tags to host as <see cref="E:NurApiDotNet.NurApi.InventoryStreamEvent"/>.
            <para>To stop inventory stream use <see cref="M:NurApiDotNet.NurApi.StopInventoryStream"/></para>        
             </summary>
             <param name="rounds">Full query rounds to perform in inventory. Range 0 - 10. Value 0 means automatic round number. (see <see cref="P:NurApiDotNet.NurApi.InventoryRounds"/> property)</param>
             <param name="Q">The Q parameter. Range 0 - 15. Value 0 means automatic Q calculation. (see <see cref="P:NurApiDotNet.NurApi.InventoryQ"/> property)</param>
             <param name="session">The session parameter. Range 0 - 3.(see <see cref="P:NurApiDotNet.NurApi.InventorySession"/> property)</param>
             <param name="invertSelect">Invert select. Select tags that do not match the selection criteria.</param>
             <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
             <param name="sAddress">Singulation data address in bits. </param>        
             <param name="sMask">Mask data buffer.</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.StartInventoryStream(System.Int32,System.Int32,System.Int32)">
             <summary>
             Start inventory streaming on module. Module will start continuos inventory and sends new tags to host as <see cref="E:NurApiDotNet.NurApi.InventoryStreamEvent"/>.
            <para>To stop inventory stream use <see cref="M:NurApiDotNet.NurApi.StopInventoryStream"/></para>        
             </summary>
             <param name="rounds">Full query rounds to perform in inventory. Range 0 - 10. Value 0 means automatic round number. (see <see cref="P:NurApiDotNet.NurApi.InventoryRounds"/> property)</param>
             <param name="Q">The Q parameter. Range 0 - 15. Value 0 means automatic Q calculation. (see <see cref="P:NurApiDotNet.NurApi.InventoryQ"/> property)</param>
             <param name="session">The session parameter. Range 0 - 3.(see <see cref="P:NurApiDotNet.NurApi.InventorySession"/> property)</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.StartInventoryStream">
            <summary>
            Start inventory stream using RFID reader current rounds, Q, session settings. <see cref="E:NurApiDotNet.NurApi.InventoryStreamEvent"/> is fired when data available. To stop inventory stream use <see cref="M:NurApiDotNet.NurApi.StopInventoryStream"/>
            </summary>
            <seealso cref="M:NurApiDotNet.NurApi.StopInventoryStream"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.StopInventoryStream">
            <summary>
            Stop inventory streaming on module. 
            </summary>
            <seealso cref="M:NurApiDotNet.NurApi.StartInventoryStream"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.InventoryEx(NurApiDotNet.NurApi.InventoryExParams,NurApiDotNet.NurApi.InventoryExFilter[])">
            <summary>
            Extended inventory command with multiple select filters.
            </summary>
            <param name="param">Reference to inventory parameters.</param>
            <param name="filters">Array of select filters or null.</param>
            <returns>Inventory result data as <see cref="T:NurApiDotNet.NurApi.InventoryResponse"/></returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.InventoryEx(NurApiDotNet.NurApi.InventoryExParams@,NurApiDotNet.NurApi.InventoryExFilter[])">
            <summary>
            Extended inventory command with multiple select filters.
            </summary>
            <param name="param">Reference to inventory parameters.</param>
            <param name="filters">Array of select filters or null.</param>
            <returns>Inventory result data as <see cref="T:NurApiDotNet.NurApi.InventoryResponse"/></returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.InventoryEx">
            <summary>
            Re-run the extended inventory assuming that the module has stored the parameters earlier.
            </summary>
            <returns>Inventory result data as <see cref="T:NurApiDotNet.NurApi.InventoryResponse"/></returns>
            <remarks>
            The call will fail, if a prior call to extended inventory stream or single extended inventory has not been successful.<para></para>
            This means that the extended inventory can be re-run after the InventoryEx has been called once so that the extended parameters have been correct.<para></para>
            Effectively this results in less traffic between the host and the reader.
            </remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.StartInventoryEx(NurApiDotNet.NurApi.InventoryExParams,NurApiDotNet.NurApi.InventoryExFilter[])">
            <summary>
            Start extended inventory streaming command with multiple select filters.
            </summary>
            <param name="param">Reference to inventory parameters.</param>
            <param name="filters">Array of select filters or null.</param>
            <example>
            <code lang="C#">hNur.InventoryStreamEvent += new EventHandler&lt;NurApi.InventoryStreamEventArgs&gt;(hNur_InventoryStreamEvent);</code>
            The example below shows how to use this function in order to start the Monza FastID inventory.<para></para>
            The FastID inventory is a type of inventory in which the tag returns both the EPC and TID at once:<para></para>
            <code source="DocExample\StartFastIDInventory.cs" lang="C#"></code>
            </example>
            <seealso cref="T:NurApiDotNet.NurApi.InventoryExParams"/>
            <seealso cref="T:NurApiDotNet.NurApi.InventoryExFilter"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.StartInventoryEx(NurApiDotNet.NurApi.InventoryExParams@,NurApiDotNet.NurApi.InventoryExFilter[])">
            <summary>
            Start extended inventory streaming command with multiple select filters.
            </summary>
            <param name="param">Reference to inventory parameters.</param>
            <param name="filters">Array of select filters or null.</param>
            <seealso cref="T:NurApiDotNet.NurApi.InventoryExParams"/>
            <seealso cref="T:NurApiDotNet.NurApi.InventoryExFilter"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.StopInventoryEx">
            <summary>
            Stop extended inventory streaming in module.
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.IsInventoryExRunning">
            <summary>
            Return true if streaming extended inventory routine is running.
            </summary>
            <returns>true if streaming extended inventory routine is running. false otherwise.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.SetInventoryRead(NurApiDotNet.NurApi.IrInformation)">
            <summary>
            Set Inventory read configuration.
            </summary>		
            <param name="irInfo"><see cref="T:NurApiDotNet.NurApi.IrInformation"/> Inventory+read information structure.</param>
            <seealso cref="T:NurApiDotNet.NurApi.IrInformation"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetInventoryRead">
            <summary>
            Get Inventory read information.
            </summary>
            <returns>IrInformation if successful. </returns>
            <seealso cref="T:NurApiDotNet.NurApi.IrInformation"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.TIDInventory(System.UInt32,System.UInt32)">
            <summary>
            Setup TID inventory.
            Configures inventory + read so that it result only in TID data.
            </summary>
            <param name="firstWord">First word to read.</param>
            <param name="nWords">Number of words to read. Range is 1...31 (2...64 bytes).</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.UserMemInventory(System.UInt32,System.UInt32)">
            <summary>
            Setup user memory inventory.
            Configures inventory + read so that it result only in user memory data.
            </summary>
            <param name="firstWord">First word to read.</param>
            <param name="nWords">Number of words to read. Range is 1...31 (2...64 bytes).</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.ConfigureXTIDInventory(System.Boolean,System.Boolean)">
            <summary>
            Setup TID content based inventory + read.
            Configures inventory + read so that the data part is read based on the TID (XTID) contents.
            </summary>
            <param name="dataOnly">Set to true to have the TID contents only; otherwise the TID contents is appended to the EPC field.</param>
            <param name="includeAll">If set to true then the reader shall add all of the TID contents into the replies.</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.InventoryRead(System.Boolean,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Setup inventory + read data.
            Call to this method only configures the inventory + read; it does not start it itself.
            This means that the inventory + read is done use during the next call to e.g. <see cref="M:NurApiDotNet.NurApi.Inventory"/> or <see cref="M:NurApiDotNet.NurApi.Inventory(System.Int32,System.Int32,System.Int32)"/>.
            </summary>
            <param name="on">true if the inventory + read configuration is taken into use.
            The configuration takes place immediately (if inventory running) or next time an inventory is started.
            </param>
            <param name="type">Either <see cref="F:NurApiDotNet.NurApi.NUR_IR_EPCDATA"/> (EPC + data) or <see cref="F:NurApiDotNet.NurApi.NUR_IR_DATAONLY"/> (data is returned instead of EPC).</param>
            <param name="bank">Bank to read from.</param>
            <param name="addr">First word to read.</param>
            <param name="nWords">Number of words to read. Range is 1...31 (2...64 bytes).</param>
        </member>
        <member name="P:NurApiDotNet.NurApi.InventoryReadCtl">
            <summary>
            Takes the inventory + read into use (true) or turns it off (false).
            When read tells whether there is a valid inventory + read configuration present in the module or not.
            Uses the configuration set with <see cref="M:NurApiDotNet.NurApi.InventoryRead(System.Boolean,System.UInt32,System.UInt32,System.UInt32,System.UInt32)"/>, <see cref="M:NurApiDotNet.NurApi.TIDInventory(System.UInt32,System.UInt32)"/> or <see cref="M:NurApiDotNet.NurApi.UserMemInventory(System.UInt32,System.UInt32)"/>
            </summary>
            <value>
            <para>
            When set to true then the current inventory + read configuration stored into the module is taken into use.
            NOTE: the inventory + read takes place next time an inventory, in any form, is performed so calling this does not perform anythin rather than only takes the configuration into use.
            </para>
            <para>Reading returns whether the inventory + read is currently active or not.</para>
            </value>
            <seealso cref="M:NurApiDotNet.NurApi.GetInventoryRead"/>
            <seealso cref="M:NurApiDotNet.NurApi.SetInventoryRead(NurApiDotNet.NurApi.IrInformation)"/>
        </member>
        <member name="T:NurApiDotNet.NurApi.InventoryResponse">
            <summary>
            Last inventory data result
            </summary>
            <seealso cref="M:NurApiDotNet.NurApi.Inventory"/>
            <seealso cref="M:NurApiDotNet.NurApi.Inventory(System.Int32,System.Int32,System.Int32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.InventorySelect(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.InventorySelectByEPC(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte[])"/>
        </member>
        <member name="F:NurApiDotNet.NurApi.InventoryResponse.numTagsFound">
            <summary>
            Number of tags found in this inventory.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.InventoryResponse.numTagsMem">
            <summary>
            Total number of tags in module memory.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.InventoryResponse.roundsDone">
            <summary>
            Number of full Q rounds done in this inventory.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.InventoryResponse.collisions">
            <summary>
            Number of possible collisions or reception errors in this inventory.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.InventoryResponse.Q">
            <summary>
             Q used in this inventory.
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.IrInformation">
            <summary>
            NUR module inventory + read configuration.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.IrInformation.active">
            <summary>
            Inventory + read active / not.
            </summary>
            <value>True indicates that the inventory + read is active or is to be taken into use (as the current set up in the module states).</value>
        </member>
        <member name="F:NurApiDotNet.NurApi.IrInformation.type">
            <summary>
            Type of the inventory read.
            </summary>
            <value>
            <para>Values, i.e. behavior when the tags are fetched from the module:</para>
            <para><see cref="F:NurApiDotNet.NurApi.NUR_IR_EPCDATA"/>EPC + data is returned</para>
            <para><see cref="F:NurApiDotNet.NurApi.NUR_IR_DATAONLY"/> Only the read data is returned (placed into the EPC field). </para>
            <para><see cref="F:NurApiDotNet.NurApi.NUR_IR_EPCXTID"/>EPC + TID data is returned as a combination.</para>
            <para><see cref="F:NurApiDotNet.NurApi.NUR_IR_XTIDONLY"/>Only the read TID data is returned.</para>
            </value>
        </member>
        <member name="F:NurApiDotNet.NurApi.IrInformation.bank">
            <summary>
            Bank the read from.
            </summary>
            <value>Allowed values are: <see cref="F:NurApiDotNet.NurApi.BANK_EPC"/>, <see cref="F:NurApiDotNet.NurApi.BANK_TID"/> and <see cref="F:NurApiDotNet.NurApi.BANK_USER"/></value>
        </member>
        <member name="F:NurApiDotNet.NurApi.IrInformation.wAddress">
            <summary>
            Word address to start from.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.IrInformation.wLength">
            <summary>
            Number of words toread. Range is 1...32 (=2...64 bytes).
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetCacheStats">
            <summary>
            Internal cache stats.
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.#ctor">
            <summary>
            Nurapi contructor. Single NurApi handle for single RFID Device at the time.
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.Dispose">
            <summary>
            Dispose and free all allocated resources.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.ConnectedDeviceUri">
            <summary>
            Get Uri of currently connected device, null if not connected.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.LastConnectUri">
            <summary>
            Get Uri of last Connect(Uri) call.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.AutoReconnect">
            <summary>
            Enable/disable automatic reconnection on connection loss.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.Setup">
            <summary>
            Get current connected device ModuleSetup
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.Info">
            <summary>
            Get information about connected device.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.Capabilites">
            <summary>
            Get reader capabilities about connected device.
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetTimeStamp">
            <summary>
            Get milliseconds after NurApi initialized
            </summary>
            <returns>milliseconds after NurApi initialized</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.TimeStampToDateUtc(System.UInt32)">
            <summary>
            Convert NurApi timestamp to UTC DateTime
            </summary>
            <param name="ts">NurApi timestamp</param>
            <returns>UTC DateTime</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.TimeStampToDate(System.UInt32)">
            <summary>
            Convert NurApi timestamp to DateTime
            </summary>
            <param name="ts">NurApi timestamp</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.IsConnected">
            <summary>
            This function will return only connection state of the transport layer.
            In order to know that module is responding, you'll need to communicate with module by calling e.g. <see cref="M:NurApiDotNet.NurApi.Ping"/>.
            </summary>
            <see cref="M:NurApiDotNet.NurApi.Ping"/>
            <returns>true if connected, otherwise false.</returns>
        </member>
        <member name="P:NurApiDotNet.NurApi.ConnectionStatus">
            <summary>
            Get current transport connection status.
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.Connect(System.String)">
            <summary>
            Connect to specific reader.
            </summary>
            <param name="uriStr">Uri string of the reader. e.g. "tcp://1.2.3.4"</param>
            <see cref="M:NurApiDotNet.NurApi.Connect(System.Uri)"/>
            <see cref="T:NurApiDotNet.NurDeviceDiscovery"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.Connect(System.Uri)">
            <summary>
            Connect to specified reader.<br/>
            NurApi supportes 'tcp://' and 'mdns://' types by default.<br/>
            - 'tcp' connect to reader by ip address; tcp://address[:port]<br/>
            - 'mdns' connect to reader by mdns name; mdns://device_name
            <br/>
            <br/>
            Serial port and BLE transports are platform specific and require additional 
            assemblies, such as NordicID.NurApi.Android, NordicID.NurApi.SerialTransport, NordicID.NurApi.SerialTransport.UWP
            </summary>
            <param name="uri">Uri of reader. e.g. "tcp://1.2.3.4"</param>
            <see cref="T:NurApiDotNet.NurDeviceDiscovery"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetTransportStats">
            <summary>
            Internal transport stats.
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.Connect">
            <summary>
            (Re)Connect to last connected device.
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.ConnectSerialPort(System.Int32)">
            <summary>
            Connects to COM port using default baudrate (115200 bps)
            </summary>
            <remarks>
            ConnectSerialPort() is obsolete, use Connect(Uri) instead. Using this will disable automatic reconnect!
            </remarks>
            <param name="comNumber">Com port number</param>
            <see cref="M:NurApiDotNet.NurApi.Connect(System.Uri)"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.ConnectSocket(System.String,System.Int32)">
            <summary>
            Connects to reader TCP/IP socket.
            </summary>
            <remarks>
            ConnectSocket() is obsolete, use Connect(Uri) instead. Using this will disable automatic reconnect!
            </remarks>
            <param name="host">Address</param>
            <param name="port">TCP/IP port number. Default NUR port is 4333</param>
            <see cref="M:NurApiDotNet.NurApi.Connect(System.Uri)"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.DisconnectAsync">
            <summary>
            Disconnect device async
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.Disconnect">
            <summary>
            Disconnect current transport from device
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.CancelOperation">
            <summary>
            Cancel all pending/queued NurApi operations.
            </summary>
            <remarks>NOTE: This does not cancel operations on RFID reader.</remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.ExecuteCommand(NurApiDotNet.Commands.NurCmd,System.Threading.CancellationTokenSource)">
            <summary>
            Excute NUR command
            </summary>
            <param name="cmd">NurCmd</param>
            <param name="ct">cancellation token source</param>
            <returns>result of execution as NurCmd</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.ExecuteCommandAsync(NurApiDotNet.Commands.NurCmd,System.Threading.CancellationTokenSource)">
            <summary>
            Excute NUR command asyncronously
            </summary>
            <param name="cmd">NurCmd</param>
            <param name="ct">cancellation token source</param>
            <returns>result of execution as NurCmd</returns>
        </member>
        <member name="E:NurApiDotNet.NurApi.ConnectionStatusEvent">
            <summary>
            Transport status event fired when change happend in transportation between reader and NurApi
            </summary>
            <see cref="T:NurApiDotNet.NurTransportStatus"/>
        </member>
        <member name="E:NurApiDotNet.NurApi.ConnectedEvent">
            <summary>
            Occurs when the reader is connected.
            </summary>
        </member>
        <member name="E:NurApiDotNet.NurApi.DisconnectedEvent">
            <summary>
            Occurs when the reader is disconnected.
            </summary>
        </member>
        <member name="E:NurApiDotNet.NurApi.InventoryStreamEvent">
            <summary>
            Tag data from inventory stream
            </summary>
        </member>
        <member name="E:NurApiDotNet.NurApi.PermissionRequiredEvent">
            <summary>
             Triggered when a reconnected device lacks the necessary permissions for nur to proceed.
            </summary>
        </member>
        <member name="E:NurApiDotNet.NurApi.BootEvent">
            <summary>
            BootEvent
            </summary>
        </member>
        <member name="E:NurApiDotNet.NurApi.IOChangeEvent">
            <summary>
            IO Change event
            </summary>
        </member>
        <member name="E:NurApiDotNet.NurApi.TraceTagEvent">
            <summary>
            Tag data from trace tag
            </summary>
        </member>
        <member name="E:NurApiDotNet.NurApi.TriggerReadEvent">
            <summary>
            Triggered tag read.
            </summary>
        </member>
        <member name="E:NurApiDotNet.NurApi.HopEvent">
            <summary>
            Frequency hop.
            </summary>
        </member>
        <member name="E:NurApiDotNet.NurApi.LogEvent">
            <summary>
            Occurs when the notification Log is received.
            </summary>
        </member>
        <member name="E:NurApiDotNet.NurApi.InventoryExEvent">
            <summary>
            Tag data from extended inventory stream.
            </summary>
        </member>
        <member name="E:NurApiDotNet.NurApi.NXPAlarmStreamEvent">
            <summary>
            NXP EAS Alarm state change.
            </summary>
        </member>
        <member name="E:NurApiDotNet.NurApi.TuneEvent">
            <summary>
            The automatic tune event. 
            </summary>
        </member>
        <member name="E:NurApiDotNet.NurApi.DiagReportEvent">
            <summary>
            DiagReportEvent
            </summary>
        </member>
        <member name="E:NurApiDotNet.NurApi.WLanSearchEvent">
            <summary>
            WLanSearchEvent
            NOTE: Not tested as products do not support this functionality
            </summary>
        </member>
        <member name="E:NurApiDotNet.NurApi.OnAccSensorChangedEvent">
            <summary>
            Occurs when the sensor is added or removed to/from reader.
            </summary>
        </member>
        <member name="E:NurApiDotNet.NurApi.OnAccRangeDataEvent">
            <summary>
            Occurs when the Accessory sensor value range data is received.
            </summary>
        </member>
        <member name="E:NurApiDotNet.NurApi.OnAccBarcodeResult">
            <summary>
            Occurs when the Accessory sensor value range data is received.
            </summary>
        </member>
        <member name="E:NurApiDotNet.NurApi.AccessorySensorChangedEvent">
            <summary>
            Occurs when the sensor is added or removed to/from reader.
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.AccessorySensorChangedEventArgs">
            <summary>
            Accessory Sensor Changed Event Arguments class (for AccessorySensorChangedEvent)
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccessorySensorChangedEventArgs.#ctor(System.UInt32,NurApiDotNet.AccessorySensorChanged)">
            <summary>
            AccessorySensorChangedEvent Arguments
            </summary>
            <param name="timestamp">milliseconds after NurApi initialized</param>
            <param name="sensorChanged">AccessorySensorChanged</param>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorChangedEventArgs.sensorChanged">
            <summary>Information about sensor change</summary>
        </member>
        <member name="E:NurApiDotNet.NurApi.AccessoryRangeDataEvent">
            <summary>
            Occurs when the Accessory sensor value range data is received.
            </summary>
        </member>
        <member name="E:NurApiDotNet.NurApi.AccessorySensorToFFrBfaRawDataEvent">
            <summary>
            Occurs when the Accessory sensor value ToF FR BFA raw data is received.
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.AccessoryRangeDataEventArgs">
            <summary>
            Accessory Range Data Event Arguments class (for AccessoryRangeDataEvent)
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccessoryRangeDataEventArgs.#ctor(System.UInt32,NurApiDotNet.AccSensorRangeData)">
            <summary>
            AccessoryRangeDataEvent Arguments
            </summary>
            <param name="timestamp">milliseconds after NurApi initialized</param>
            <param name="rangeData">AccSensorRangeData</param>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryRangeDataEventArgs.rangeData">
            <summary>Range data information</summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.AccessorySensorToFFrBfaRawDataEventArgs">
            <summary>
            Accessory ToF FR BFA Data Event Arguments class (for AccessoryRangeDataEvent)
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccessorySensorToFFrBfaRawDataEventArgs.#ctor(System.UInt32,NurApiDotNet.AccSensorToFFrBfaRawData)">
            <summary>
            AccessorySensorToFFrBfaRawDataEvent Arguments
            </summary>
            <param name="timestamp">milliseconds after NurApi initialized</param>
            <param name="rawData">AccSensorToFFrBfaRawData</param>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessorySensorToFFrBfaRawDataEventArgs.rawData">
            <summary>Raw FR BFA ToF data</summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.AccessoryEventArgs">
            <summary>
            Accessory Event Arguments class (for AccessoryEvent)
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.AccessoryEventArgs.#ctor(System.UInt32,System.Int32,NurApiDotNet.NurApi.AccessoryEventType,System.Byte[])">
            <summary>
            AccessoryEvent Arguments
            </summary>
            <param name="timestamp">milliseconds after NurApi initialized</param>
            <param name="status">status code</param>
            <param name="type">Type of event</param>
            <param name="data">byte array of event arguments</param>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryEventArgs.type">
            <summary>Type of AccessoryEvent</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AccessoryEventArgs.data">
            <summary>byte array of AccessoryEvent arguments</summary>
        </member>
        <member name="E:NurApiDotNet.NurApi.UnknownNotifyEvent">
            <summary>
            Occurs when the unknown notification is received.
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.NurEventArgs">
            <summary>
            Nur event arguments
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.NurEventArgs.#ctor(System.UInt32)">
            <summary>
            Nur event arguments
            </summary>
            <param name="timestamp">milliseconds after NurApi initialized</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.NurEventArgs.#ctor(System.UInt32,System.Int32)">
            <summary>
            Nur event arguments
            </summary>
            <param name="timestamp">milliseconds after NurApi initialized</param>
            <param name="status">Notification status</param>
        </member>
        <member name="F:NurApiDotNet.NurApi.NurEventArgs.timestamp">
            <summary>
            milliseconds after NurApi initialized
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.NurEventArgs.status">
            <summary>
            Notification status code, this one of the NurApiErrors
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.BootEventArgs">
            <summary>
            Boot event arguments class (<see cref="E:NurApiDotNet.NurApi.BootEvent"/>)
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.BootEventArgs.#ctor(System.UInt32,System.String)">
            <summary>
            Boot event arguments
            </summary>
            <param name="timestamp">milliseconds after NurApi initialized</param>
            <param name="message">Event message string</param>            
        </member>
        <member name="F:NurApiDotNet.NurApi.BootEventArgs.message">
            <summary>
            Event message string
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.LogEventArgs">
            <summary>
            Log event arguments class (<see cref="E:NurApiDotNet.NurApi.LogEvent"/>)
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.LogEventArgs.#ctor(System.UInt32,System.String)">
            <summary>
            Log event arguments
            </summary>
            <param name="timestamp">milliseconds after NurApi initialized</param>
            <param name="message">Event message string</param>
        </member>
        <member name="F:NurApiDotNet.NurApi.LogEventArgs.message">
            <summary>
            Event message string
            </summary>            
        </member>
        <member name="T:NurApiDotNet.NurApi.InventoryStreamEventArgs">
            <summary>
            Inventory Stream Event arguments class (<see cref="E:NurApiDotNet.NurApi.InventoryStreamEvent"/>)
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.InventoryStreamEventArgs.#ctor(System.UInt32,NurApiDotNet.InventoryStreamData)">
            <summary>
            Inventory Stream Event arguments 
            </summary>
            <param name="timestamp">milliseconds after NurApi initialized</param>
            <param name="data">Inventory stream event arguments as <see cref="T:NurApiDotNet.InventoryStreamData"/></param>            
        </member>
        <member name="F:NurApiDotNet.NurApi.InventoryStreamEventArgs.data">
            <summary>
            Inventory stream event arguments as <see cref="T:NurApiDotNet.InventoryStreamData"/>
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.IOChangeEventArgs">
            <summary>
            I/O change event arguments class (<see cref="E:NurApiDotNet.NurApi.IOChangeEvent"/>)
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.IOChangeEventArgs.#ctor(System.UInt32,NurApiDotNet.IOChangeData)">
            <summary>
            IOChange event arguments
            </summary>
            <param name="timestamp">milliseconds after NurApi initialized</param>
            <param name="data">I/O change event arguments as <see cref="T:NurApiDotNet.IOChangeData"/></param>
        </member>
        <member name="F:NurApiDotNet.NurApi.IOChangeEventArgs.data">
            <summary>
            I/O change results as <see cref="T:NurApiDotNet.IOChangeData"/>
            </summary>            
        </member>
        <member name="T:NurApiDotNet.NurApi.UnknownNotifyEventArgs">
            <summary>
            Unknown Notify Event Arguments class (<see cref="E:NurApiDotNet.NurApi.UnknownNotifyEvent"/>)
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.UnknownNotifyEventArgs.#ctor(System.UInt32,System.Int32,System.Byte[])">
            <summary>
            Unknown Notify Event Arguments
            </summary>
            <param name="timestamp">milliseconds after NurApi initialized</param>
            <param name="type">Type of notification</param>
            <param name="data">byte array of notification arguments</param>
        </member>
        <member name="F:NurApiDotNet.NurApi.UnknownNotifyEventArgs.type">
            <summary>Type of notification</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.UnknownNotifyEventArgs.data">
            <summary>byte array of notification arguments</summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.TriggerReadEventArgs">
            <summary>
            Trigger Read Event arguments class (<see cref="E:NurApiDotNet.NurApi.TriggerReadEvent"/>)
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.TriggerReadEventArgs.#ctor(System.UInt32,NurApiDotNet.TriggerReadData)">
            <summary>
            Trigger Read Event arguments
            </summary>
            <param name="timestamp">milliseconds after NurApi initialized</param>
            <param name="data">Trigger read event arguments as <see cref="T:NurApiDotNet.TriggerReadData"/></param>
        </member>
        <member name="F:NurApiDotNet.NurApi.TriggerReadEventArgs.data">
            <summary>
            Trigger read event arguments as <see cref="T:NurApiDotNet.TriggerReadData"/>
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.HopEventArgs">
            <summary>
            Hop event arguments class (<see cref="E:NurApiDotNet.NurApi.HopEvent"/>)
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.HopEventArgs.#ctor(System.UInt32,NurApiDotNet.HopEventData)">
            <summary>
            Hop Event arguments
            </summary>
            <param name="timestamp">milliseconds after NurApi initialized</param>
            <param name="data">Hop event arguments as <see cref="T:NurApiDotNet.HopEventData"/></param>
        </member>
        <member name="F:NurApiDotNet.NurApi.HopEventArgs.data">
            <summary>
            Hop event arguments as <see cref="T:NurApiDotNet.HopEventData"/>
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.TraceTagEventArgs">
            <summary>
            Trace Tag event arguments class (<see cref="E:NurApiDotNet.NurApi.TraceTagEvent"/>)
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.TraceTagEventArgs.#ctor(System.UInt32,NurApiDotNet.NurApi.TraceTagData)">
            <summary>
            Trace tag event arguments
            </summary>
            <param name="timestamp">milliseconds after NurApi initialized</param>
            <param name="data">Trace Tag event arguments as <see cref="T:NurApiDotNet.NurApi.TraceTagData"/></param>
        </member>
        <member name="F:NurApiDotNet.NurApi.TraceTagEventArgs.data">
            <summary>
            Trace Tag event result as <see cref="T:NurApiDotNet.NurApi.TraceTagData"/>
            </summary>            
        </member>
        <member name="T:NurApiDotNet.NurApi.TuneEventArgs">
            <summary>
            Tune event arguments class.
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.TuneEventArgs.#ctor(System.UInt32,NurApiDotNet.TuneEventData)">
            <summary>
            Tune Event arguments
            </summary>
            <param name="timestamp">milliseconds after NurApi initialized</param>
            <param name="data">Tune event arguments as <see cref="T:NurApiDotNet.TuneEventData"/></param>
        </member>
        <member name="F:NurApiDotNet.NurApi.TuneEventArgs.data">
            <summary>
            Tune event arguments as <see cref="T:NurApiDotNet.TuneEventData"/>
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.NXPAlarmStreamEventArgs">
            <summary>
            NXP alarm stream event arguments class (<see cref="E:NurApiDotNet.NurApi.NXPAlarmStreamEvent"/>)
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.NXPAlarmStreamEventArgs.#ctor(System.UInt32,NurApiDotNet.NXPAlarmStreamData)">
            <summary>
            Inventory Stream Event arguments 
            </summary>
            <param name="timestamp">milliseconds after NurApi initialized</param>
            <param name="data">NXP EAS Alarm stream event arguments as <see cref="T:NurApiDotNet.NXPAlarmStreamData"/></param>            
        </member>
        <member name="F:NurApiDotNet.NurApi.NXPAlarmStreamEventArgs.data">
            <summary>
            NXP EAS Alarm stream event arguments as <see cref="T:NurApiDotNet.NXPAlarmStreamData"/>
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.DiagReportEventArgs">
            <summary>
            Diagnostics report event arguments class.
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.DiagReportEventArgs.#ctor(System.UInt32,NurApiDotNet.NurApi.DiagReport)">
            <summary>
            Diagnostics report event arguments
            </summary>
            <param name="timestamp">milliseconds after NurApi initialized</param>
            <param name="data">DiagReport item argument as <see cref="T:NurApiDotNet.NurApi.DiagReport"/></param>
        </member>
        <member name="F:NurApiDotNet.NurApi.DiagReportEventArgs.data">
            <summary>
            DiagReport event arguments as <see cref="T:NurApiDotNet.NurApi.DiagReport"/>
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.WLanSearchEventArgs">
            <summary>
            WLAN search event arguments class.
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.WLanSearchEventArgs.#ctor(System.UInt32,NurApiDotNet.WLanSearchEventData)">
            <summary>
            WLan search event arguments
            NOTE: Not tested as products do not support this functionality
            </summary>
            <param name="timestamp">milliseconds after NurApi initialized</param>
            <param name="data">WLan search item argument as <see cref="T:NurApiDotNet.WLanSearchEventData"/></param>
        </member>
        <member name="P:NurApiDotNet.NurApi.WLanSearchEventArgs.data">
            <summary>
            WLAN search event arguments as <see cref="T:NurApiDotNet.WLanSearchEventData"/>
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.ArrayToStruct``1(System.Byte[])">
            <summary>
            Array to data struture conversion.
            </summary>
            <typeparam name="T">Structure name.</typeparam>
            <param name="ptr">Byte data to convert.</param>
            <returns>Return the byte data converted to the given structure.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.ArrayToStruct``1(System.Byte[],System.Int32)">
            <summary>
            Array to data struture conversion.
            </summary>
            <typeparam name="T">Structure name.</typeparam>
            <param name="ptr">Byte data to convert.</param>
            <param name="index">Index from where to start in ptr.</param>
            <returns>Return the byte data converted to the given structure.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.BitLenToByteLen(System.Int32)">
            <summary>
            Get required byte length for given number of bits.
            </summary>
            <param name="nrBits">Number of bit in a buffer.</param>
            <returns>Number of bytes required for the bit buffer</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.SwapEndian(System.UInt32)">
            <summary>
            Swap endianess of 32-bit value
            </summary>
            <param name="value">value to swap</param>
            <returns>swapped uint value</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.SwapEndian(System.UInt16)">
            <summary>
            Swap endianess of 16-bit value
            </summary>
            <param name="value">ushort value to swap</param>
            <returns>swapped value</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetBitCount(System.UInt32)">
            <summary>
            Get count of bits set
            </summary>
            <param name="n">target value</param>
            <returns>count of bits set</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.MemCompare(System.Byte[],System.Byte[])">
            <summary>
            Comparing memory
            </summary>
            <param name="b1">memory array1</param>
            <param name="b2">memory array2</param>
            <returns>true if equal</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.BinToHexString(System.Byte[],System.String)">
            <summary>
            Converts byte array to Hex strings and appends delimiter string to end
            </summary>
            <param name="buf">Buffer of binary data</param>
            <param name="delim">Delimiter string</param>
            <returns>Hex string</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.HexStringToBin(System.String,System.String)">
            <summary>
            Converts hex string to byte array
            </summary>
            <param name="value">String to be converted</param>
            <param name="delim">Hex string byte delimeter, can be empty</param>
            <returns>array of binary values</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.XDigitValue(System.Char)">
            <summary>
            Check whether given character is a hexadecimal digit.
            </summary>
            <param name="isdigit">Character to check.</param>
            <returns>The hexadecimal value if OK, otherwise -1.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.HexStringToBin(System.String)">
            <summary>
            Converts hex string to byte array.
            </summary>
            <param name="value">String to be converted</param>
            <returns>array of binary values</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.IsTagError(System.Int32)">
            <summary>
            Returns whether the given error is a tag backscattered error or not.
            </summary>
            <param name="error">Error from the tag / NurApi.</param>
            <returns>TRUE if tag error.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.BitBufferAddValue(System.Byte[],System.UInt32,System.Int32,System.Int32)">
            <summary>
            Bit buffer: add 32-bit value's bits to bit buffer.
            </summary>
            <param name="buf">Destination bit buffer.</param>
            <param name="Value32">32-bit value to add.</param>
            <param name="numBits">Number of bits to use from the value (1...32).</param>
            <param name="curPt">Current number of bits in the buffer.</param>
            <exception cref="T:NurApiDotNet.NurApiException">Thrown when the native API reports a parameter error (returns false).</exception> 
            <returns>New bit address when successful.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.BitBufferAddEBV32(System.Byte[],System.UInt32,System.Int32)">
            <summary>
            Bit buffer: add EBV (Extensible Bit Vector) to the buffer.
            </summary>
            <param name="buf">Destination bit buffer.</param>
            <param name="ebv">32-bit EBV value to add.</param>
            <param name="curPt">Current number of bits in the buffer.</param>
            <exception cref="T:NurApiDotNet.NurApiException">Thrown when the native API reports a parameter error (returns false).</exception> 
            <returns>New bit address when successful.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.AllocAuthParam(System.Byte,System.UInt16,System.UInt16)">
            <summary>
            Basic allocation of authentication parameters.
            </summary>
            <param name="csi">Cryptographic Suite Indicator. </param>
            <param name="rxLength">Bit length of the reception (0 if not know, NOTE: not recommended). </param>
            <param name="msgBitLength">Message's bit length.</param>
            <returns>Returns the authentication parameter structure with basic setup. </returns>
            <remarks>
            <para>The <see cref="F:NurApiDotNet.NurApi.AuthenticateParam.timeout"/> is set to 25 milliseconds.</para>
            <para>The <see cref="F:NurApiDotNet.NurApi.AuthenticateParam.rxAttn"/> is set to false.</para>
            <para>The <see cref="F:NurApiDotNet.NurApi.AuthenticateParam.preTxWait"/> is set to 2000 microseconds.</para>
            <para>The <see cref="M:NurApiDotNet.NurApi.AuthenticateParam.GetMessage"/> is allocated to <see cref="F:NurApiDotNet.NurApi.GEN2V2_MAX_AUTHBYTES"/> length.</para>
            </remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.AllocTAMParam(System.Byte,System.Byte[])">
            <summary>
            Simple ISO 29167-10 TAM parameter allocation using only the key number and ket data.
            </summary>
            <param name="keyNum">Key number to use.</param>
            <param name="keyData">AES key data. If null, the key is initialized to all zeros.</param>
            <returns>Returns the TAM response structure.</returns>
            <seealso cref="T:NurApiDotNet.NurApi.TAM_PARAM"/>
            <remarks>The <paramref name="keyData"/> can be null. In such a case the key is not initialized.</remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.AllocTAM2Param(System.Byte,System.Byte[],System.UInt32,System.Byte,System.UInt16,System.Byte)">
            <summary>
            ISO 29167-10 TAM 2 parameter allocation helper.
            </summary>
            <param name="keyNum">Key number to use.</param>
            <param name="keyData">AES key data. If null, the key is initialized to all zeros.</param>
            <param name="blockCount">Custom data's block count. The range is 1...<see cref="F:NurApiDotNet.NurApi.TAM_MAXBLOCKS"/>. Support depends on tag.</param>
            <param name="mpi">Memory Profile Indicator. The basic profiles are: 0 = EPC memory, 1 = TID memory and 2 = user memory, other values are manufacturer defined (range: 0...0x0F).</param>
            <param name="offset">The offset parameter in the authentication command as specified by the ISO 29167-10 (range: 0...0x0FFF).</param>
            <param name="protMode">The mode parameter as defined by the ISO 29167-10. </param>
            <returns>Returns the TAM response structure.</returns>
            <seealso cref="T:NurApiDotNet.NurApi.TAM_PARAM"/>
            <remarks>The <paramref name="keyData"/> can be null. In such a case the key is not initialized. </remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.AES128_ECBEncrypt(System.Byte[],System.Byte[])">
            <summary>
            Do a single block AES128 ECB encryption.
            </summary>
            <param name="input">16-byte long input buffer.</param>
            <param name="key">16-byte key to use.</param>
            <returns>If successful, returns the encrypted buffer.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.AES128_ECBDecrypt(System.Byte[],System.Byte[])">
            <summary>
            Do a single block AES128 ECB decryption.
            </summary>
            <param name="input">16-byte long input buffer.</param>
            <param name="key">16-byte key to use.</param>
            <returns>If successful, returns the decrypted buffer.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.AES128_CBCEncrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Perform an AES128 CBC encryption.
            </summary>
            <param name="input">Input buffer.</param>
            <param name="key">16-byte key to use.</param>
            <param name="iv">16-byte Initialization Vector to use.</param>
            <returns>If successful, returns the encrypted buffer.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.AES128_CBCDecrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Perform an AES128 CBC decryption.
            </summary>
            <param name="input">Input buffer.</param>
            <param name="key">16-byte key to use.</param>
            <param name="iv">16-byte Initialization Vector to use.</param>
            <returns>If successful, returns the decrypted buffer.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.ISO29167_10_TAM1(System.Byte,System.Byte[])">
            <summary>
            The ISO 29167-10 TAM 1 with no tag singulation.
            </summary>
            <param name="keyNum">Key number to use.</param>
            <param name="key">Key data for response decryption. Must be 16 bytes long.</param>
            <returns>Returns true if there was a response that was correctly parsed and decrypted.</returns>
            <remarks>The authentication is checked by the C_TAM1 value and internally comparing the decryption result against the internally generated challenge. </remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.ISO29167_10_TAM1ByEPC(System.Byte[],System.Byte,System.Byte[])">
            <summary>
            The ISO 29167-10 TAM 1 using tag's EPC for singulation.
            </summary>
            <param name="epc">Tag's EPC contents.</param>
            <param name="keyNum">Key number to use.</param>
            <param name="key">Key data for response decryption. Must be 16 bytes long.</param>
            <returns>Returns true if there was a response that was correctly parsed and decrypted.</returns>
            <remarks>The authentication is checked by the C_TAM1 value and internally comparing the decryption result against the internally generated challenge. </remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.ISO29167_10_TAM1Singulated(System.Byte,System.UInt32,System.Int32,System.Byte[],System.Byte,System.Byte[])">
            <summary>
            The ISO 29167-10 TAM 1 using specific tag singulation.
            </summary>
            <param name="sBank">Bank where the selection mask is applied to. </param>
            <param name="sAddress">Selection mask's bit address.</param>
            <param name="sMaskBitLength">Selection mask's length in bits. </param>
            <param name="sMask">Selection mask data.</param>
            <param name="keyNum">Key number to use.</param>
            <param name="key">Key data for response decryption. Must be 16 bytes long.</param>
            <returns>Returns true if there was a response that was correctly parsed and decrypted.</returns>
            <remarks>The authentication is checked by the C_TAM1 value and internally comparing the decryption result against the internally generated challenge. </remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.ISO29167_10_TAM2(NurApiDotNet.NurApi.TAM_PARAM)">
            <summary>
            The ISO 29167-10 TAM 2 with no tag singulation.
            </summary>
            <param name="tamParam">The TAM 2 parameter structure.</param>
            <returns>Returns the TAM 2 response structure if there was no API error when executing.</returns>
            <seealso cref="T:NurApiDotNet.NurApi.TAM_PARAM"/>
            <seealso cref="T:NurApiDotNet.NurApi.TAM_RESP"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.ISO29167_10_TAM2ByEPC(System.Byte[],NurApiDotNet.NurApi.TAM_PARAM)">
            <summary>
            The ISO 29167-10 TAM 2 using tag's EPC for singulation.
            </summary>
            <param name="epc">Tag's EPC contents.</param>
            <param name="tamParam">The TAM 2 parameter structure.</param>
            <returns>Returns the TAM 2 response structure if there was no API error when executing.</returns>
            <seealso cref="T:NurApiDotNet.NurApi.TAM_PARAM"/>
            <seealso cref="T:NurApiDotNet.NurApi.TAM_RESP"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.ISO29167_10_TAM2Singulated(System.Byte,System.UInt32,System.Int32,System.Byte[],NurApiDotNet.NurApi.TAM_PARAM)">
            <summary>
            The ISO 29167-10 TAM 2 using specific tag singulation.
            </summary>
            <param name="sBank">Bank where the selection mask is applied to. </param>
            <param name="sAddress">Selection mask's bit address.</param>
            <param name="sMaskBitLength">Selection mask's length in bits. </param>
            <param name="sMask">Selection mask data.</param>
            <param name="tamParam">The TAM 2 parameter structure.</param>
            <returns>Returns the TAM 2 response structure if there was no API error when executing.</returns>
            <seealso cref="T:NurApiDotNet.NurApi.TAM_PARAM"/>
            <seealso cref="T:NurApiDotNet.NurApi.TAM_RESP"/>
        </member>
        <member name="T:NurApiDotNet.NurApi.TAM_PARAM">
            <summary> 
            The ISO29167-10 authentication parameters for methods 1 and 2.
            </summary> 		
        </member>
        <member name="F:NurApiDotNet.NurApi.TAM_PARAM.tam2">
            <summary> If true then the method is 2 (TAM2 with custom data). </summary>				
        </member>
        <member name="F:NurApiDotNet.NurApi.TAM_PARAM.decrypt">
            <summary> If true then the contents are decrypted using the key. With TAM2 the contents are decrypted with key and using an IV (->CBC) from the first data block. </summary>			
        </member>
        <member name="F:NurApiDotNet.NurApi.TAM_PARAM.keyNum">
            <summary> Key number to use. </summary>	
        </member>
        <member name="F:NurApiDotNet.NurApi.TAM_PARAM.mpi">
            <summary> TAM2: Memory Profile Indicator. Basic indicators are: 0 = EPC, 1 = TID and 2 = user memory. </summary>	
        </member>
        <member name="F:NurApiDotNet.NurApi.TAM_PARAM.protMode">
            <summary> Encipherment mode. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TAM_PARAM.offset">
            <summary> The block data's offset value in TAM2. </summary>	
        </member>
        <member name="F:NurApiDotNet.NurApi.TAM_PARAM.blockCount">
            <summary> Number of custom data blocks. Allowed range is 1...4 (8...32 bytes as a result). </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TAM_PARAM.key">
            <summary> Key to use if response is decrypted. </summary>				
        </member>
        <member name="T:NurApiDotNet.NurApi.TAM_RESP">
            <summary> 
            The ISO29167-10 authentication response for methods 1 and 2.
            </summary> 		
        </member>
        <member name="F:NurApiDotNet.NurApi.TAM_RESP.response">
            <summary> There is a response. </summary>			
        </member>
        <member name="F:NurApiDotNet.NurApi.TAM_RESP.ok">
            <summary> The response is decrypted, C_TAM matches and challenge contents was OK. </summary>			
        </member>
        <member name="F:NurApiDotNet.NurApi.TAM_RESP.C_TAM">
            <summary> The 16-bit constant in the first block. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TAM_RESP.TRnd32">
            <summary> The following 32-bit random value in the first block. </summary>	
        </member>
        <member name="F:NurApiDotNet.NurApi.TAM_RESP.szBlocks">
            <summary> Actual number of byte int blockData in the block data. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TAM_RESP.challenge">
            <summary> Challenge that the native API generated. </summary>			
        </member>
        <member name="F:NurApiDotNet.NurApi.TAM_RESP.firstBlock">
            <summary> Decrypted contents of the first block. </summary>			
        </member>
        <member name="F:NurApiDotNet.NurApi.TAM_RESP.blockData">
            <summary> Block data if custom data was requested. </summary>			
        </member>
        <member name="F:NurApiDotNet.NurApi.TAM_RESP.cmac">
            <summary> CMAC data if protection mode 2,3. </summary>			
        </member>
        <member name="T:NurApiDotNet.NurApi.WLAN_STATUS">
            <summary>
            WLAN status bits
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_STATUS.CONNECTION">
            <summary>
            the device is connected to the AP
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_STATUS.CONNECTED">
            <summary>
            client is connected to device
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_STATUS.IP_ACQUIRED">
            <summary>
            the device has acquired an IP
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_STATUS.IP_LEASED">
            <summary>
            the device has leased an IP
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_STATUS.CONNECTION_FAILED">
            <summary>
            failed to connect to device
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.WLAN_EAP_METHOD">
            <summary>
            EAP methods for WLAN Enterprise security profile
            NOTE: Currently not implemented in any product!
            
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_EAP_METHOD.SL_ENT_EAP_METHOD_TLS">
            <summary>
            EAP method TLS
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_EAP_METHOD.SL_ENT_EAP_METHOD_TTLS_TLS">
            <summary>
            EAP method TTLS_TLS
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_EAP_METHOD.SL_ENT_EAP_METHOD_TTLS_MSCHAPv2">
            <summary>
            EAP method TTLS_MSCHAPv2
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_EAP_METHOD.SL_ENT_EAP_METHOD_TTLS_PSK">
            <summary>
            EAP method TTLS_PSK
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_EAP_METHOD.SL_ENT_EAP_METHOD_PEAP0_TLS">
            <summary>
            EAP method PEAP0_TLS
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_EAP_METHOD.SL_ENT_EAP_METHOD_PEAP0_MSCHAPv2">
            <summary>
            EAP method PEAP0_MSCHAPv2
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_EAP_METHOD.SL_ENT_EAP_METHOD_PEAP0_PSK">
            <summary>
            EAP method PEAP0_PSK
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_EAP_METHOD.SL_ENT_EAP_METHOD_PEAP1_TLS">
            <summary>
            EAP method PEAP1_TLS
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_EAP_METHOD.SL_ENT_EAP_METHOD_PEAP1_MSCHAPv2">
            <summary>
            EAP method PEAP1_MSCHAPv2
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_EAP_METHOD.SL_ENT_EAP_METHOD_PEAP1_PSK">
            <summary>
            EAP method PEAP1_PSK
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_EAP_METHOD.SL_ENT_EAP_METHOD_FAST_AUTH_PROVISIONING">
            <summary>
            EAP method FAST_AUTH_PROVISIONING
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_EAP_METHOD.SL_ENT_EAP_METHOD_FAST_UNAUTH_PROVISIONING">
            <summary>
            EAP method FAST_UNAUTH_PROVISIONING
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_EAP_METHOD.SL_ENT_EAP_METHOD_FAST_NO_PROVISIONING">
            <summary>
            EAP method NO_PROVISIONING
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.WLAN_SCAN_SECTYPE">
            <summary>
            WLAN security type for result of network scan         
            </summary>
            <seealso cref="M:NurApiDotNet.NurApi.WLanScanEnable(System.Boolean)"/>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_SCAN_SECTYPE.OPEN">
            <summary>
            Open
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_SCAN_SECTYPE.WEP">
            <summary>
            WEP
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_SCAN_SECTYPE.WPA">
            <summary>
            WPA
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_SCAN_SECTYPE.WPA2">
            <summary>
            WPA2
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.WLAN_SECTYPE">
            <summary>
            WLAN Security types
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_SECTYPE.OPEN">
            <summary>
            Open
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_SECTYPE.WEP">
            <summary>
            WEP
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_SECTYPE.WPA">
            <summary>
            WPA
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_SECTYPE.WPA2">
            <summary>
            WPA2
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_SECTYPE.WPA_ENT">
            <summary>
            WPA Enterprise
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.WLAN_ROLE">
            <summary>
            Current role of WLAN module
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_ROLE.ROLE_STA">
            <summary>
            ROLE Station
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_ROLE.ROLE_AP">
            <summary>
            ROLE Access Point
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_ROLE.ROLE_P2P">
            <summary>
            ROLE P2P
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_ROLE.ROLE_STA_ERR">
            <summary>
            Failure to load MAC/PHY in STA role
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_ROLE.ROLE_AP_ERR">
            <summary>
            Failure to load MAC/PHY in AP role
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLAN_ROLE.ROLE_P2P_ERR">
            <summary>
            Failure to load MAC/PHY in P2P role
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.WLanEnable(System.Boolean)">
            <summary>
            Enable/Disable WLan functionality from reader.
            </summary>
            <param name="enable">true=WLan nodule running. false=Wlan module not in use.</param>
            <exception cref="T:NurApiDotNet.NurApiException">Thrown when "API not created" or "WLanEnable" error </exception>
        </member>
        <member name="M:NurApiDotNet.NurApi.WLanScanEnable(System.Boolean)">
            <summary>
            Enable/Disable WLan network scan.
            NOTE: Sampo S2 gives HW error exception if WLan scan disabling is attempted.
            </summary>
            <param name="enable">true=WLan nodule running. false=Wlan module not in use.</param>
            <exception cref="T:NurApiDotNet.NurApiException">Thrown when "API not created" or "WLanScanEnable" error </exception>      
        </member>
        <member name="M:NurApiDotNet.NurApi.WLanGetStatus">
            <summary>
            Get status of WLan.         
            </summary>
            <returns>WLAN status information data: <see cref="T:NurApiDotNet.NurApi.WLanStatus"/></returns>
            <exception cref="T:NurApiDotNet.NurApiException">Thrown when "API not created" or "WLanGetStatus" error </exception>
        </member>
        <member name="M:NurApiDotNet.NurApi.WLanGetProfile(System.Byte)">
            <summary>
            Get WLAN profile from module.
            <param name="profileIndex">Index of profile for retrieving information (1-7)</param>
            get/ <returns>WLanProfile struct of given profileIndex. If not exist, WlanProfile-->index = 0<see cref="T:NurApiDotNet.NurApi.WLanStatus"/></returns>
            <exception cref="T:NurApiDotNet.NurApiException">Thrown when "API not created" or "WLanGetStatus" error </exception>
            <exception cref="T:NurApiDotNet.NurApiException">Thrown when profileIndex out of range. (Use 1-7)</exception>
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.WLanDelProfile(System.Byte)">
            <summary>
            Used for deleting a certain stored profile, or for deleting all profiles at once.
            </summary>
            <param name="profileIndex">profile index to delete (1-7) 0=delete all profiles</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.WLanAddEnterpriseProfile(System.String,System.String,System.String,System.String,NurApiDotNet.NurApi.WLAN_EAP_METHOD,System.Byte)">
            <summary>
            NOTE: Currently not implemented in any product!
            Add enterprise connection profile to WLAN module. The device connects to a station from the profiles table. Only one enterprise profile is supported.
            </summary>
            <param name="ssid">SSID name</param>
            <param name="secKey">Security key. (hexadecimal digits 0-9, a-f and A-F)</param>
            <param name="user">The enterprise user name</param>
            <param name="anonuser">The anonymous user name (optional) for two phase enterprise connections.</param>
            <param name="eapmethod">EAP Method</param>
            <param name="priority">0-7 (0=lowest) If several profiles configured the device chose the highest priority profile, within each priority group, device will chose profile based on security policy, signal strength, etc parameters</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.WLanAddProfile(System.String,System.Byte,System.String,System.Byte)">
            <summary>
            Add connection profile to WLAN module. The device connects to a station from the profiles table. Up to 7 profiles are supported.
            </summary>
            <param name="ssid">SSID name</param>
            <param name="secType">Security type. <see cref="T:NurApiDotNet.NurApi.WLAN_SECTYPE"/></param>
            <param name="secKey">Security key. (hexadecimal digits 0-9, a-f and A-F)</param>
            <param name="priority">0-7 (0=lowest) If several profiles configured the device chose the highest priority profile, within each priority group, device will chose profile based on security policy, signal strength, etc parameters</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.WLanFileWrite(System.String,System.Int32,System.Byte[])">
            <summary>
            NOTE: Currently not implemented in any product!
            Write file to WLAN module file system
            </summary>
            <param name="name">Name/Path of the file</param>
            <param name="length">File length in bytes</param>
            <param name="buf">data buffer of file</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.WLanFileDelete(System.String)">
            <summary>
            NOTE: Currently not implemented in any product!
            Delete file from file system of WLAN module
            </summary>
            <param name="name">name/path of file to delete</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.TraceTag(System.Byte,System.UInt32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Trace singulated single tag. 
            </summary>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits. </param>
            <param name="sMaskBitLength">Length of the mask data in bits.</param>
            <param name="sMask">Mask data buffer.</param>
            <param name="flags">Flags for trace. See <see cref="F:NurApiDotNet.NurApi.TRACETAG_NO_EPC"/>  <see cref="F:NurApiDotNet.NurApi.TRACETAG_START_CONTINUOUS"/>  <see cref="F:NurApiDotNet.NurApi.TRACETAG_STOP_CONTINUOUS"/> </param>
            <returns>Receives trace response in to <see cref="T:NurApiDotNet.NurApi.TraceTagData"/>. If continuous tracing is specified in flags response is not received, instead module will send <see cref="E:NurApiDotNet.NurApi.TraceTagEvent"/> notification for tracing. </returns>
            <seealso cref="M:NurApiDotNet.NurApi.TraceTagByEPC(System.Byte[],System.Int32)"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.TraceTagByEPC(System.Byte[],System.Int32)">
            <summary>
            Trace single tag singluated against tag's EPC memory.
            </summary>
            <param name="epc">EPC memory to singulate against.</param>
            <param name="flags">Flags for trace. See <see cref="F:NurApiDotNet.NurApi.TRACETAG_NO_EPC"/>  <see cref="F:NurApiDotNet.NurApi.TRACETAG_START_CONTINUOUS"/>  <see cref="F:NurApiDotNet.NurApi.TRACETAG_STOP_CONTINUOUS"/> </param>
            <returns>Receives trace response in to <see cref="T:NurApiDotNet.NurApi.TraceTagData"/>. If continuous tracing is specified in flags response is not received, instead module will send <see cref="E:NurApiDotNet.NurApi.TraceTagEvent"/> notification for tracing.</returns>
            <seealso cref="M:NurApiDotNet.NurApi.TraceTag(System.Byte,System.UInt32,System.Int32,System.Byte[],System.Int32)"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.IsTraceRunning">
            <summary>
            Return TRUE if tag trace routine is running on module. 
            </summary>
            <returns>true if tag trace routine is running on module</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.ScanSingle(System.Int32)">
            <summary>
            The single scan is used to read a single tag's EPC contents using a timeout defined in milliseconds.
            </summary>
            <param name="timeout">Timeout in milliseconds. Range 50 - 2000. </param>
            <returns>read tag information as <see cref="T:NurApiDotNet.TriggerReadData"/>.</returns>
            <remarks>If there's more than one tag in the reader range, this function will most likely fail.</remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.ReadTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32)">
            <summary>
            Read data from tag without any singulation data. This function can be used for tags that do not have an EPC.
            </summary>
            <param name="passwd">Password for secured operations.</param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE.</param>
            <param name="bank">Memory bank for read operation. </param>
            <param name="address">address for read operation.</param>
            <param name="byteCount">Number of bytes to read. This must divisible by two.</param>
            <returns>buffer for receiving data</returns>
            <seealso cref="M:NurApiDotNet.NurApi.ReadSingulatedTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[],System.Byte,System.UInt32,System.Int32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.ReadTagByEPC(System.UInt32,System.Boolean,System.Byte[],System.Byte,System.UInt32,System.Int32)"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.ReadSingulatedTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[],System.Byte,System.UInt32,System.Int32)">
            <summary>
            Read data from tag with specific singulation. Tag can be singluted against desired memory bank and mask.
            </summary>
            <param name="passwd">Password for secured operations.</param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE.</param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits.</param>
            <param name="sMaskBitLength">Length of the mask data in bits.</param>
            <param name="sMask">Mask data buffer.</param>
            <param name="rdBank">Memory bank for read operation. 0=<see cref="F:NurApiDotNet.NurApi.BANK_PASSWD"/> 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="rdAddress">Address for read operation.</param>
            <param name="rdByteCount">Number of bytes to read. This must divisible by two. </param>
            <returns>Pointer to a buffer that received read data. Must be atleast rdByteCount bytes long</returns>
            <seealso cref="M:NurApiDotNet.NurApi.ReadTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.ReadTagByEPC(System.UInt32,System.Boolean,System.Byte[],System.Byte,System.UInt32,System.Int32)"/> 
        </member>
        <member name="M:NurApiDotNet.NurApi.ReadSingulatedTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[],System.Byte,System.UInt32,System.Byte)">
            <summary>
            Read data from tag with specific singulation. Tag can be singluted against desired memory bank and mask.
            </summary>
            <param name="passwd">Password for secured operations.</param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE.</param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits.</param>
            <param name="sMask">Mask data buffer.</param>
            <param name="rdBank">Memory bank for read operation. 0=<see cref="F:NurApiDotNet.NurApi.BANK_PASSWD"/> 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="rdAddress">Address for read operation.</param>
            <param name="rdByteCount">Number of bytes to read. This must divisible by two. </param>
            <returns>Pointer to a buffer that received read data. Must be atleast rdByteCount bytes long</returns>
            <seealso cref="M:NurApiDotNet.NurApi.ReadTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.ReadTagByEPC(System.UInt32,System.Boolean,System.Byte[],System.Byte,System.UInt32,System.Int32)"/> 
        </member>
        <member name="M:NurApiDotNet.NurApi.ReadTagByEPC(System.UInt32,System.Boolean,System.Byte[],System.Byte,System.UInt32,System.Int32)">
            <summary>
            Read data from tag singulated by tag's EPC memory.
            </summary>
            <param name="passwd">Password for secured operations.</param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE.</param>
            <param name="epc">EPC memory to singulate against.</param>
            <param name="rdBank">Memory bank for read operation. 0=<see cref="F:NurApiDotNet.NurApi.BANK_PASSWD"/> 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="rdAddress">Address for read operation.</param>
            <param name="rdByteCount">Number of bytes to read. This must divisible by two. </param>
            <returns>Pointer to a buffer that received read data. Must be atleast rdByteCount bytes long</returns>
            <seealso cref="M:NurApiDotNet.NurApi.ReadTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.ReadSingulatedTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[],System.Byte,System.UInt32,System.Int32)"/> 
        </member>
        <member name="M:NurApiDotNet.NurApi.CustomReadTag(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.UInt32,System.Int32)">
            <summary>
            Read data from tag without any singulation data using customized read command and bank parameters.
            This function can be used for tags that do not have an EPC.
            </summary>
            <param name="rdCmd">Custom read command.</param>
            <param name="cmdBits">Number of bits in the custom read command (1...32).</param>
            <param name="rdBank">Custom bank parameter.</param>
            <param name="bankBits">Number of bits in the custom bank parameter. Can be 0.</param>
            <param name="passwd">Password for secured operations.</param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE.</param>
            <param name="address">address for read operation.</param>
            <param name="byteCount">Number of bytes to read. This must divisible by two.</param>
            <returns>buffer for receiving data</returns>
            <seealso cref="M:NurApiDotNet.NurApi.CustomReadSingulatedTag(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[],System.UInt32,System.Int32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.CustomReadTagByEPC(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.Byte[],System.UInt32,System.Int32)"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.CustomReadSingulatedTag(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[],System.UInt32,System.Int32)">
            <summary>
            Read data from tag with specific singulation. Tag can be singluted against desired memory bank and mask.
            This command uses custom read command and bank parameters.
            </summary>
            <param name="rdCmd">Custom read command.</param>
            <param name="cmdBits">Number of bits in the custom read command (1...32).</param>
            <param name="rdBank">Custom bank parameter.</param>
            <param name="bankBits">Number of bits in the custom bank parameter. Can be 0.</param>
            <param name="passwd">Password for secured operations.</param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE.</param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits.</param>
            <param name="sMaskBitLength">Length of the mask data in bits.</param>
            <param name="sMask">Mask data buffer.</param>
            <param name="rdAddress">Address for read operation.</param>
            <param name="rdByteCount">Number of bytes to read. This must divisible by two. </param>
            <returns>Pointer to a buffer that received read data. Must be atleast rdByteCount bytes long</returns>
            <seealso cref="M:NurApiDotNet.NurApi.CustomReadTag(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.UInt32,System.Int32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.CustomReadTagByEPC(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.Byte[],System.UInt32,System.Int32)"/> 
        </member>
        <member name="M:NurApiDotNet.NurApi.CustomReadSingulatedTag(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[],System.UInt32,System.Byte)">
            <summary>
            Read data from tag with specific singulation, customized read command and bank parameter. 
            Tag can be singluted against desired memory bank and mask.
            </summary>
            <param name="rdCmd">Custom read command.</param>
            <param name="cmdBits">Number of bits in the custom read command (1...32).</param>
            <param name="rdBank">Custom bank parameter.</param>
            <param name="bankBits">Number of bits in the custom bank parameter. Can be 0.</param>
            <param name="passwd">Password for secured operations.</param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE.</param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits.</param>
            <param name="sMask">Mask data buffer.</param>        
            <param name="rdAddress">Address for read operation.</param>
            <param name="rdByteCount">Number of bytes to read. This must divisible by two. </param>
            <returns>Pointer to a buffer that received read data. Must be atleast rdByteCount bytes long</returns>
            <seealso cref="M:NurApiDotNet.NurApi.CustomReadTag(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.UInt32,System.Int32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.CustomReadTagByEPC(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.Byte[],System.UInt32,System.Int32)"/> 
        </member>
        <member name="M:NurApiDotNet.NurApi.CustomReadTagByEPC(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.Byte[],System.UInt32,System.Int32)">
            <summary>
            Read data from tag singulated by tag's EPC memory using custom read command and custom bank parameter.
            </summary>
            <param name="rdCmd">Custom read command.</param>
            <param name="cmdBits">Number of bits in the custom read command (1...32).</param>
            <param name="rdBank">Custom bank parameter.</param>
            <param name="bankBits">Number of bits in the custom bank parameter. Can be 0.</param>
            <param name="passwd">Password for secured operations.</param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE.</param>
            <param name="epc">EPC memory to singulate against.</param>
            <param name="rdAddress">Address for read operation.</param>
            <param name="rdByteCount">Number of bytes to read. This must divisible by two. </param>
            <returns>Pointer to a buffer that received read data. Must be atleast rdByteCount bytes long</returns>
            <seealso cref="M:NurApiDotNet.NurApi.CustomReadTag(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.UInt32,System.Int32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.CustomReadSingulatedTag(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[],System.UInt32,System.Int32)"/> 
        </member>
        <member name="M:NurApiDotNet.NurApi.WriteSingulatedTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[],System.Byte,System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data to tag with specific singulation. Tag can be singluted against desired memory bank and mask.
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE. </param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits. </param>
            <param name="sMaskBitLength">Length of the mask data in bits. </param>
            <param name="sMask">Mask data buffer.</param>
            <param name="wrBank">Memory bank for write operation.</param>
            <param name="wrAddress">Address for write operation.</param>
            <param name="wrBuffer">Data to write. Must be atleast wrByteCount bytes long.</param>
            <param name="wrBufferPos">Start position</param>
            <param name="wrBufferLen">Number of bytes to write. This must divisible by two. </param>
            <seealso cref="M:NurApiDotNet.NurApi.WriteTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.WriteTagByEPC(System.UInt32,System.Boolean,System.Byte[],System.Byte,System.UInt32,System.Byte[],System.Int32,System.Int32)"/> 
        </member>
        <member name="M:NurApiDotNet.NurApi.WriteSingulatedTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[],System.Byte,System.UInt32,System.Byte[])">
            <summary>
            Write data to tag with specific singulation. Tag can be singluted against desired memory bank and mask.
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE. </param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits. </param>
            <param name="sMaskBitLength">Length of the mask data in bits. </param>
            <param name="sMask">Mask data buffer.</param>
            <param name="wrBank">Memory bank for write operation.</param>
            <param name="wrAddress">Address for write operation.</param>
            <param name="wrBuffer">Data to write. Must be atleast wrByteCount bytes long.</param>        
            <seealso cref="M:NurApiDotNet.NurApi.WriteTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.WriteTagByEPC(System.UInt32,System.Boolean,System.Byte[],System.Byte,System.UInt32,System.Byte[],System.Int32,System.Int32)"/> 
        </member>
        <member name="M:NurApiDotNet.NurApi.WriteSingulatedTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[],System.Byte,System.UInt32,System.Byte[])">
            <summary>
            Write data to tag with specific singulation. Tag can be singluted against desired memory bank and mask.
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE. </param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits. </param>
            <param name="sMask">Mask data buffer.</param>
            <param name="wrBank">Memory bank for write operation.</param>
            <param name="wrAddress">Address for write operation.</param>
            <param name="wrBuffer">Data to write. Must be atleast wrByteCount bytes long.</param>        
            <seealso cref="M:NurApiDotNet.NurApi.WriteTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.WriteTagByEPC(System.UInt32,System.Boolean,System.Byte[],System.Byte,System.UInt32,System.Byte[],System.Int32,System.Int32)"/> 
        </member>
        <member name="M:NurApiDotNet.NurApi.WriteTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data to tag without any singulation data. This function can be used for tags that do not have an EPC.
            <para>Note:If there's more than one tag in range, this function will most likely fail due to the RF collision.</para>
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE. </param>
            <param name="wrBank">Memory bank for write operation.</param>
            <param name="wrAddress">Address for write operation.</param>
            <param name="wrBuffer">Data to write. Must be atleast wrByteCount bytes long.</param>
            <param name="wrBufferPos">Start position</param>
            <param name="wrBufferLen">Number of bytes to write. This must divisible by two. </param>
            <seealso cref="M:NurApiDotNet.NurApi.WriteSingulatedTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[],System.Byte,System.UInt32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.WriteTagByEPC(System.UInt32,System.Boolean,System.Byte[],System.Byte,System.UInt32,System.Byte[],System.Int32,System.Int32)"/> 
        </member>
        <member name="M:NurApiDotNet.NurApi.WriteTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[])">
            <summary>
            Write data to tag without any singulation data. This function can be used for tags that do not have an EPC.
            <para>Note:If there's more than one tag in range, this function will most likely fail due to the RF collision.</para>
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE. </param>
            <param name="wrBank">Memory bank for write operation.</param>
            <param name="wrAddress">Address for write operation.</param>
            <param name="wrBuffer">Data to write.</param>        
            <seealso cref="M:NurApiDotNet.NurApi.WriteSingulatedTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[],System.Byte,System.UInt32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.WriteTagByEPC(System.UInt32,System.Boolean,System.Byte[],System.Byte,System.UInt32,System.Byte[],System.Int32,System.Int32)"/> 
        </member>
        <member name="M:NurApiDotNet.NurApi.WriteTagByEPC(System.UInt32,System.Boolean,System.Byte[],System.Byte,System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data to tag singulated by tag's EPC memory.         
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE. </param>
            <param name="epc">EPC memory to singulate against.</param>
            <param name="wrBank">Memory bank for write operation.</param>
            <param name="wrAddress">Address for write operation.</param>
            <param name="wrBuffer">Data to write.</param>      
            <param name="wrBufferPos">Start position</param>
            <param name="wrBufferLen">Number of bytes to write. This must divisible by two. </param>
            <seealso cref="M:NurApiDotNet.NurApi.WriteSingulatedTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[],System.Byte,System.UInt32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.WriteTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[])"/> 
        </member>
        <member name="M:NurApiDotNet.NurApi.WriteTagByEPC(System.UInt32,System.Boolean,System.Byte[],System.Byte,System.UInt32,System.Byte[])">
            <summary>
            Write data to tag singulated by tag's EPC memory.         
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE. </param>
            <param name="epc">EPC memory to singulate against.</param>
            <param name="wrBank">Memory bank for write operation.</param>
            <param name="wrAddress">Address for write operation.</param>
            <param name="wrBuffer">Data to write.</param>              
            <seealso cref="M:NurApiDotNet.NurApi.WriteSingulatedTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[],System.Byte,System.UInt32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.WriteTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[])"/> 
        </member>
        <member name="M:NurApiDotNet.NurApi.SetAccessPassword(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[],System.UInt32)">
            <summary>
            Write new access password to tag with specific singulation. Tag can be singluted against desired memory bank and mask.
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE.</param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits.</param>
            <param name="sMaskBitLength">Length of the mask data in bits.</param>
            <param name="sMask">Mask data buffer.</param>
            <param name="newPasswd">New access password to write.</param>
            <seealso cref="M:NurApiDotNet.NurApi.SetAccessPasswordByEPC(System.UInt32,System.Boolean,System.Byte[],System.UInt32)"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.SetAccessPassword(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Write new access password to tag with specific singulation. Tag can be singluted against desired memory bank and mask.
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE.</param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits.</param>
            <param name="sMask">Mask data buffer.</param>
            <param name="newPasswd">New access password to write.</param>
            <seealso cref="M:NurApiDotNet.NurApi.SetAccessPasswordByEPC(System.UInt32,System.Boolean,System.Byte[],System.UInt32)"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.SetAccessPasswordByEPC(System.UInt32,System.Boolean,System.Byte[],System.UInt32)">
            <summary>
            Write new access password to specific tag singulated by tag's EPC memory.
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE.</param>
            <param name="epc">EPC memory to singulate against. </param>
            <param name="newPasswd">New access password to write.</param>
            <seealso cref="M:NurApiDotNet.NurApi.SetAccessPassword(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[],System.UInt32)"/>"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetAccessPassword(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[])">
            <summary>
            Read access password from tag with specific singulation. Tag can be singluted against desired memory bank and mask.
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE.</param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits.</param>
            <param name="sMaskBitLength">Length of the mask data in bits.</param>
            <param name="sMask">Mask data buffer.</param>
            <returns>Access password</returns>
            <seealso cref="M:NurApiDotNet.NurApi.GetKillPassword(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.GetKillPasswordByEPC(System.UInt32,System.Boolean,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.SetKillPasswordByEPC(System.UInt32,System.Boolean,System.Byte[],System.UInt32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.GetAccessPasswordByEPC(System.UInt32,System.Boolean,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.SetKillPassword(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[],System.UInt32)"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetAccessPasswordByEPC(System.UInt32,System.Boolean,System.Byte[])">
            <summary>
            Read access password from specific tag singulated by tag's EPC memory. 
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE.</param>
            <param name="epc">EPC memory to singulate against. </param>
            <returns>Access password</returns>
            <seealso cref="M:NurApiDotNet.NurApi.GetKillPassword(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.GetKillPasswordByEPC(System.UInt32,System.Boolean,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.SetKillPasswordByEPC(System.UInt32,System.Boolean,System.Byte[],System.UInt32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.GetAccessPassword(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.SetKillPassword(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[],System.UInt32)"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.SetKillPassword(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[],System.UInt32)">
            <summary>
            Write new kill password to tag with specific singulation. Tag can be singluted against desired memory bank and mask.
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE.</param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits.</param>
            <param name="sMaskBitLength">Length of the mask data in bits.</param>
            <param name="sMask">Mask data buffer.</param>
            <param name="newPasswd">New kill password to write.</param>
            <seealso cref="M:NurApiDotNet.NurApi.GetKillPassword(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.GetKillPasswordByEPC(System.UInt32,System.Boolean,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.SetKillPasswordByEPC(System.UInt32,System.Boolean,System.Byte[],System.UInt32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.GetAccessPassword(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[])"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.SetKillPassword(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Write new kill password to tag with specific singulation. Tag can be singluted against desired memory bank and mask.
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE.</param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits.</param>
            <param name="sMask">Mask data buffer.</param>
            <param name="newPasswd">New kill password to write.</param>
            <seealso cref="M:NurApiDotNet.NurApi.GetKillPassword(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.GetKillPasswordByEPC(System.UInt32,System.Boolean,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.SetKillPasswordByEPC(System.UInt32,System.Boolean,System.Byte[],System.UInt32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.GetAccessPassword(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[])"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.SetKillPasswordByEPC(System.UInt32,System.Boolean,System.Byte[],System.UInt32)">
            <summary>
            Write new kill password to specific tag singulated by tag's EPC memory. 
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE.</param>
            <param name="epc">EPC memory to singulate against. </param>
            <param name="newPasswd">New kill password to write.</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetKillPassword(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[])">
            <summary>
            Read kill password from tag with specific singulation. Tag can be singluted against desired memory bank and mask.
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE.</param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits.</param>
            <param name="sMaskBitLength">Length of the mask data in bits.</param>
            <param name="sMask">Mask data buffer.</param>
            <returns>Kill password</returns>
            <seealso cref="M:NurApiDotNet.NurApi.GetKillPasswordByEPC(System.UInt32,System.Boolean,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.SetKillPassword(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[],System.UInt32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.SetKillPasswordByEPC(System.UInt32,System.Boolean,System.Byte[],System.UInt32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.GetAccessPassword(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.GetAccessPasswordByEPC(System.UInt32,System.Boolean,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.SetAccessPassword(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[],System.UInt32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.SetAccessPasswordByEPC(System.UInt32,System.Boolean,System.Byte[],System.UInt32)"/>        
        </member>
        <member name="M:NurApiDotNet.NurApi.GetKillPasswordByEPC(System.UInt32,System.Boolean,System.Byte[])">
            <summary>
            Read kill password from specific tag singulated by tag's EPC memory. 
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE.</param>
            <param name="epc">EPC memory to singulate against.</param>
            <returns>Kill password</returns>
            <seealso cref="M:NurApiDotNet.NurApi.GetKillPassword(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.SetKillPassword(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[],System.UInt32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.SetKillPasswordByEPC(System.UInt32,System.Boolean,System.Byte[],System.UInt32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.GetAccessPassword(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.GetAccessPasswordByEPC(System.UInt32,System.Boolean,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.SetAccessPassword(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[],System.UInt32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.SetAccessPasswordByEPC(System.UInt32,System.Boolean,System.Byte[],System.UInt32)"/>        
        </member>
        <member name="M:NurApiDotNet.NurApi.SetLock(System.UInt32,System.Byte,System.UInt32,System.Int32,System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Set memory lock for tag with specific singulation.
            <para>Tag can be singluted against desired memory bank and mask.</para>
            </summary>
            <param name="passwd">Password for secured operations. Password is always needed.</param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits.</param>
            <param name="sMaskBitLength">Length of the mask data in bits.</param>
            <param name="sMask">Mask data buffer.</param>
            <param name="memoryMask">Which memories to lock. See flags: <see cref="F:NurApiDotNet.NurApi.LOCK_OPEN"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_SECURED"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_PERMAWRITE"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_PERMALOCK"/></param>
            <param name="action">Action to perform for memories. See flags: <see cref="F:NurApiDotNet.NurApi.LOCK_USERMEM"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_TIDMEM"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_EPCMEM"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_ACCESSPWD"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_KILLPWD"/></param>
            <seealso cref="M:NurApiDotNet.NurApi.SetLockByEPC(System.UInt32,System.Byte[],System.UInt32,System.UInt32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.SetLockRaw(System.UInt32,System.Byte,System.UInt32,System.Byte[],System.UInt32,System.UInt32)"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_OPEN"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_SECURED"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_PERMAWRITE"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_PERMALOCK"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_USERMEM"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_TIDMEM"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_EPCMEM"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_ACCESSPWD"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_KILLPWD"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.SetLock(System.UInt32,System.Byte,System.UInt32,System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Set memory lock for tag with specific singulation.
            </summary>
            <param name="passwd">Password for secured operations. Password is always needed.</param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits.</param>
            <param name="sMask">Mask data buffer.</param>
            <param name="memoryMask">Which memories to lock. See flags: <see cref="F:NurApiDotNet.NurApi.LOCK_OPEN"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_SECURED"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_PERMAWRITE"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_PERMALOCK"/></param>
            <param name="action">Action to perform for memories. See flags: <see cref="F:NurApiDotNet.NurApi.LOCK_USERMEM"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_TIDMEM"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_EPCMEM"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_ACCESSPWD"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_KILLPWD"/></param>
            <seealso cref="M:NurApiDotNet.NurApi.SetLockByEPC(System.UInt32,System.Byte[],System.UInt32,System.UInt32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.SetLockRaw(System.UInt32,System.Byte,System.UInt32,System.Byte[],System.UInt32,System.UInt32)"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_OPEN"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_SECURED"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_PERMAWRITE"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_PERMALOCK"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_USERMEM"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_TIDMEM"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_EPCMEM"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_ACCESSPWD"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_KILLPWD"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.SetLockRaw(System.UInt32,System.Byte,System.UInt32,System.Int32,System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Set memory lock for tag with specific singulation.
            <para>Tag can be singluted against desired memory bank and mask.</para>
            <para>Lock mask and action parameter are in raw format defined in UHF C1G2 standard section "6.3.2.11.3.5 Lock (mandatory).</para>
            </summary>
            <param name="passwd">Password for secured operations. Password is always needed.</param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits.</param>
            <param name="sMaskBitLength">Length of the mask data in bits.</param>
            <param name="sMask">Mask data buffer.</param>
            <param name="lockMask">Standard defined lock payload bits 19-10, starting from bit 0.</param>
            <param name="lockAction">Standard defined lock payload bits 9-0, starting from bit 0.</param>
            <seealso cref="M:NurApiDotNet.NurApi.SetLock(System.UInt32,System.Byte,System.UInt32,System.Byte[],System.UInt32,System.UInt32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.SetLockByEPC(System.UInt32,System.Byte[],System.UInt32,System.UInt32)"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_OPEN"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_SECURED"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_PERMAWRITE"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_PERMALOCK"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_USERMEM"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_TIDMEM"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_EPCMEM"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_ACCESSPWD"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_KILLPWD"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.SetLockRaw(System.UInt32,System.Byte,System.UInt32,System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Set memory lock for tag with specific singulation.
            <para>Tag can be singluted against desired memory bank and mask.</para>
            <para>Lock mask and action parameter are in raw format defined in UHF C1G2 standard section "6.3.2.11.3.5 Lock (mandatory).</para>
            </summary>
            <param name="passwd">Password for secured operations. Password is always needed.</param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits.</param>
            <param name="sMask">Mask data buffer.</param>
            <param name="lockMask">Standard defined lock payload bits 19-10, starting from bit 0.</param>
            <param name="lockAction">Standard defined lock payload bits 9-0, starting from bit 0.</param>
            <seealso cref="M:NurApiDotNet.NurApi.SetLock(System.UInt32,System.Byte,System.UInt32,System.Byte[],System.UInt32,System.UInt32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.SetLockByEPC(System.UInt32,System.Byte[],System.UInt32,System.UInt32)"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_OPEN"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_SECURED"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_PERMAWRITE"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_PERMALOCK"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_USERMEM"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_TIDMEM"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_EPCMEM"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_ACCESSPWD"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_KILLPWD"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.SetLockByEPC(System.UInt32,System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Set memory lock for specific tag singulated by tag's EPC memory. 
            </summary>
            <param name="passwd">Password for secured operations. Password is always needed. </param>
            <param name="epc">EPC memory to singulate against. </param>
            <param name="memoryMask">Which memories to lock. See flags: <see cref="F:NurApiDotNet.NurApi.LOCK_USERMEM"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_TIDMEM"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_EPCMEM"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_ACCESSPWD"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_KILLPWD"/></param>
            <param name="action">Action to perform for memories. See flags: <see cref="F:NurApiDotNet.NurApi.LOCK_OPEN"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_SECURED"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_PERMAWRITE"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_PERMALOCK"/></param>
            <seealso cref="M:NurApiDotNet.NurApi.SetLock(System.UInt32,System.Byte,System.UInt32,System.Byte[],System.UInt32,System.UInt32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.SetLockRaw(System.UInt32,System.Byte,System.UInt32,System.Byte[],System.UInt32,System.UInt32)"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.OpenStateLock(System.Byte,System.UInt32,System.Byte[],System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Set tag lock using specified singulation parameters.
            Lock is done in open state i.e. without using password access.
            </summary>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits.</param>
            <param name="sMaskBitLength">Length of the mask data in bits.</param>
            <param name="sMask">Mask data buffer.</param>
            <param name="lockMask">Which memories to lock. See flags: <see cref="F:NurApiDotNet.NurApi.LOCK_OPEN"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_SECURED"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_PERMAWRITE"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_PERMALOCK"/></param>
            <param name="lockAction">Action to perform for memories. See flags: <see cref="F:NurApiDotNet.NurApi.LOCK_USERMEM"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_TIDMEM"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_EPCMEM"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_ACCESSPWD"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_KILLPWD"/></param>
            <seealso cref="M:NurApiDotNet.NurApi.OpenStateLockByEPC(System.Byte[],System.UInt32,System.UInt32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.OpenStateLockRaw(System.Byte,System.UInt32,System.Byte[],System.Int32,System.UInt32,System.UInt32)"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.OpenStateLockRaw(System.Byte,System.UInt32,System.Byte[],System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Set memory lock for tag with specific singulation in open state i.e. without password access.
            <para>Tag can be singluted against desired memory bank and mask.</para>
            <para>Lock mask and action parameter are in raw format defined in UHF C1G2 standard section "6.3.2.11.3.5 Lock (mandatory).</para>
            </summary>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits.</param>
            <param name="sMaskBitLength">Length of the mask data in bits.</param>
            <param name="sMask">Mask data buffer.</param>
            <param name="lockMask">Standard defined lock payload bits 19-10, starting from bit 0.</param>
            <param name="lockAction">Standard defined lock payload bits 9-0, starting from bit 0.</param>
            <seealso cref="M:NurApiDotNet.NurApi.OpenStateLock(System.Byte,System.UInt32,System.Byte[],System.Int32,System.UInt32,System.UInt32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.OpenStateLockByEPC(System.Byte[],System.UInt32,System.UInt32)"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_OPEN"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_SECURED"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_PERMAWRITE"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_PERMALOCK"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_USERMEM"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_TIDMEM"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_EPCMEM"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_ACCESSPWD"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_KILLPWD"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.OpenStateLockByEPC(System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Set tag lock singulating it by the EPC contents.
            Lock is done in open state i.e. without using password access.
            </summary>
            <param name="epc">EPC memory to singulate against.</param>
            <param name="lockMask">Which memories to lock. See flags: <see cref="F:NurApiDotNet.NurApi.LOCK_OPEN"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_SECURED"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_PERMAWRITE"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_PERMALOCK"/></param>
            <param name="lockAction">Action to perform for memories. See flags: <see cref="F:NurApiDotNet.NurApi.LOCK_USERMEM"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_TIDMEM"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_EPCMEM"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_ACCESSPWD"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_KILLPWD"/></param>
            <seealso cref="M:NurApiDotNet.NurApi.OpenStateLock(System.Byte,System.UInt32,System.Byte[],System.Int32,System.UInt32,System.UInt32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.OpenStateLockRaw(System.Byte,System.UInt32,System.Byte[],System.Int32,System.UInt32,System.UInt32)"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.KillTag(System.UInt32,System.Byte,System.UInt32,System.Int32,System.Byte[])">
            <summary>
            Kill tag with specific singulation. Tag can be singluted against desired memory bank and mask.
            </summary>
            <param name="passwd">Password for secured operations. Password is always needed.</param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits.</param>
            <param name="sMaskBitLength">Length of the mask data in bits.</param>
            <param name="sMask">Mask data buffer.</param>
            <seealso cref="M:NurApiDotNet.NurApi.KillTagByEPC(System.UInt32,System.Byte[])"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.KillTagByEPC(System.UInt32,System.Byte[])">
            <summary>
            Kill specific tag singulated by tag's EPC memory.
            </summary>
            <param name="passwd">Password for secured operations. Password is always needed.</param>
            <param name="epc">EPC memory to singulate against.</param>
            <seealso cref="M:NurApiDotNet.NurApi.KillTag(System.UInt32,System.Byte,System.UInt32,System.Int32,System.Byte[])"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.WriteEPC(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[],System.Byte[])">
            <summary>
            Write new EPC to tag with specific singulation.This function sets also tag PC word correctly for new EPC length. Tag can be singluted against desired memory bank and mask.
            </summary>
            <param name="passwd">Password for secured operations.</param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE. </param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits. </param>
            <param name="sMaskBitLength">Length of the mask data in bits.</param>
            <param name="sMask">Mask data buffer.</param>
            <param name="epcBuffer">New EPC to write.</param>
            <seealso cref="M:NurApiDotNet.NurApi.WriteEPCByEPC(System.UInt32,System.Boolean,System.Byte[],System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.WriteEPCByEPC(System.UInt32,System.Boolean,System.String,System.String)"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.WriteEPCByEPC(System.UInt32,System.Boolean,System.Byte[],System.Byte[])">
            <summary>
            Write new EPC to specific tag singulated by tag's EPC memory. 
            </summary>
            <param name="passwd">Password for secured operations.</param>
            <param name="secured">True if operation is secured, otherwise false.</param>
            <param name="currentEpcBuffer">EPC of the tag to write.</param>
            <param name="newEpcBuffer">New EPC to write.</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.WriteEPCByEPC(System.UInt32,System.Boolean,System.String,System.String)">
            <summary>
            Write new EPC to specific tag singulated by tag's EPC memory. 
            </summary>
            <param name="passwd">Password for secured operations.</param>
            <param name="secured">True if operation is secured, otherwise false.</param>
            <param name="currentEpcBuffer">Current of EPC of the tag to write as HEX String.</param>
            <param name="newEpcBuffer">New EPC to write as (HEX) string.</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.NXPSetReadProtect(System.UInt32,System.Byte,System.UInt32,System.Int32,System.Byte[])">
            <summary>
            Set specific tag's read protect with given singulation data. 
            </summary>
            <param name="passwd">Password for secured operations. Password is always needed.</param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits.</param>
            <param name="sMaskBitLength">Length of the mask data in bits.</param>
            <param name="sMask">Mask data buffer.</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.NXPResetReadProtect(System.UInt32,System.Byte,System.UInt32,System.Int32,System.Byte[])">
            <summary>
            Reset specific tag's read protect with given singulation data. 
            </summary>
            <param name="passwd">Password for secured operations. Password is always needed.</param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits.</param>
            <param name="sMaskBitLength">Length of the mask data in bits.</param>
            <param name="sMask">Mask data buffer.</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.NXPSetEAS(System.UInt32,System.Byte,System.UInt32,System.Int32,System.Byte[])">
            <summary>
            Set specific tag's EAS alarm bit to 1 with given singulation data. 
            When tag's EAS alarm bit is set to 1, tag will reply to EAS Alarm command.
            </summary>
            <param name="passwd">Password for secured operations. Password is always needed.</param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits.</param>
            <param name="sMaskBitLength">Length of the mask data in bits.</param>
            <param name="sMask">Mask data buffer.</param>       
        </member>
        <member name="M:NurApiDotNet.NurApi.NXPResetEAS(System.UInt32,System.Byte,System.UInt32,System.Int32,System.Byte[])">
            <summary>
            Reset specific tag's EAS alarm bit to 0 with given singulation data. 
            When tag's EAS alarm bit is set to 1, tag will reply to EAS Alarm command.
            </summary>
            <param name="passwd">Password for secured operations. Password is always needed.</param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits.</param>
            <param name="sMaskBitLength">Length of the mask data in bits.</param>
            <param name="sMask">Mask data buffer.</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.NXPAlarm">
            <summary>
            Send NXP EAS Alarm command. Return true when there's armed EAS tags in range of reader.
            </summary>
            <returns>Returns true when there's armed EAS tags in range of reader, false when no armed tags in range.</returns>
            <seealso cref="M:NurApiDotNet.NurApi.NXPStartAlarmStream"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.NXPStartAlarmStream">
            <summary>
            Start NXP EAS Alarm streaming on module.
            Module will start continuos EAS Alarm stream and sends notification to host when there's armed tags in range.
            </summary>
            <seealso cref="M:NurApiDotNet.NurApi.NXPAlarm"/>
            <seealso cref="M:NurApiDotNet.NurApi.NXPStopAlarmStream"/>
            <seealso cref="M:NurApiDotNet.NurApi.IsNXPAlarmStreamRunning"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.NXPStopAlarmStream">
            <summary>
            Stop EAS Alarm streaming on module.
            </summary>
            <seealso cref="M:NurApiDotNet.NurApi.NXPStartAlarmStream"/>
            <seealso cref="M:NurApiDotNet.NurApi.IsNXPAlarmStreamRunning"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.IsNXPAlarmStreamRunning">
            <summary>
            Return true if EAS Alarm stream routine is running on module.
            </summary>
            <returns>
              <c>true</c> if EAS Alarm stream routine is running on module; otherwise, <c>false</c>.
            </returns>
            <seealso cref="M:NurApiDotNet.NurApi.NXPStartAlarmStream"/>
            <seealso cref="M:NurApiDotNet.NurApi.NXPStopAlarmStream"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.Monza4QTWrite(System.UInt32,System.Boolean,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[])">
            <summary>
            Monza4 QT command. Writes the QT_SR and QT_MEM bits.
            </summary>
            <param name="passwd">Password for secured operations. Password is always needed.</param>
            <param name="reduce">The QT_SR bit (0/1) (range reduction). </param>
            <param name="pubmem">The QT_MEM bit (0/1) (public private memory selection). </param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits.</param>
            <param name="sMaskBitLength">Length of the mask data in bits. </param>
            <param name="sMask">Mask data buffer.</param>
            <seealso cref="M:NurApiDotNet.NurApi.Monza4QTRead(System.UInt32,System.Boolean@,System.Boolean@,System.Byte,System.UInt32,System.Int32,System.Byte[])"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.Monza4QTRead(System.UInt32,System.Boolean@,System.Boolean@,System.Byte,System.UInt32,System.Int32,System.Byte[])">
            <summary>
            Monza4 QT command. Reads the QT_SR bit to <paramref name="reduce"/> and QT_MEM bit to <paramref name="pubmem"/>  .
            </summary>
            <param name="passwd">Password for secured operations. Password is always needed.</param>
            <param name="reduce">The QT_SR bit (0/1) (range reduction). </param>
            <param name="pubmem">The QT_MEM bit (0/1) (public private memory selection). </param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits.</param>
            <param name="sMaskBitLength">Length of the mask data in bits. </param>
            <param name="sMask">Mask data buffer.</param>
            <seealso cref="M:NurApiDotNet.NurApi.Monza4QTWrite(System.UInt32,System.Boolean,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[])"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.ResetToTarget(System.Int32,System.Boolean)">
            <summary>
            Reset tag inventoried flag to specific target in selected session.
            All tags in reader range will be reset.
            </summary>
            <param name="session">Session to reset, 0 - 3</param>
            <param name="targetIsA">True to set inventoried flag to A, false to set inventoried flag to B</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.CustomWriteSingulatedTag(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[],System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data to tag with specific singulation using customizable write command and bank parameter.
            Tag can be singluted against desired memory bank and mask.
            </summary>
            <param name="wrCmd">Custom write command. </param>
            <param name="cmdBits">Number of bits in the custom write command (1..32). </param>
            <param name="wrBank">Custom bank parameter.</param>
            <param name="bankBits">Number of bits in the custom bank value (0..32). </param>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE. </param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits. </param>
            <param name="sMaskBitLength">Length of the mask data in bits. </param>
            <param name="sMask">Mask data buffer.</param>
            <param name="wrAddress">Address for write operation.</param>
            <param name="wrBuffer">Data to write. Must be atleast wrByteCount bytes long.</param>
            <param name="wrBufferPos">Start position</param>
            <param name="wrBufferLen">Number of bytes to write. This must divisible by two. </param>
            <seealso cref="M:NurApiDotNet.NurApi.CustomWriteTag(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.UInt32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.CustomWriteTagByEPC(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.Byte[],System.UInt32,System.Byte[],System.Int32,System.Int32)"/> 
        </member>
        <member name="M:NurApiDotNet.NurApi.CustomWriteSingulatedTag(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[],System.UInt32,System.Byte[])">
            <summary>
            Write data to tag with specific singulation using customizable write command and bank parameter.
            Tag can be singluted against desired memory bank and mask.
            </summary>
            <param name="wrCmd">Custom write command. </param>
            <param name="cmdBits">Number of bits in the custom write command (1..32). </param>
            <param name="wrBank">Custom bank parameter. </param>
            <param name="bankBits">Number of bits in the custom bank value (0..32). </param>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE. </param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits. </param>
            <param name="sMaskBitLength">Length of the mask data in bits. </param>
            <param name="sMask">Mask data buffer.</param>
            <param name="wrAddress">Address for write operation.</param>
            <param name="wrBuffer">Data to write. Must be atleast wrByteCount bytes long.</param>        
            <seealso cref="M:NurApiDotNet.NurApi.CustomWriteTag(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.UInt32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.CustomWriteTagByEPC(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.Byte[],System.UInt32,System.Byte[],System.Int32,System.Int32)"/> 
        </member>
        <member name="M:NurApiDotNet.NurApi.CustomWriteSingulatedTag(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[],System.UInt32,System.Byte[])">
            <summary>
            Write data to tag with specific singulation using customizable write command and bank parameter.
            Tag can be singluted against desired memory bank and mask.
            </summary>
            <param name="wrCmd">Custom write command. </param>
            <param name="cmdBits">Number of bits in the custom write command (1..32). </param>
            <param name="wrBank">Custom bank parameter. </param>
            <param name="bankBits">Number of bits in the custom bank value (0..32). </param>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE. </param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits. </param>
            <param name="sMask">Mask data buffer.</param>
            <param name="wrAddress">Address for write operation.</param>
            <param name="wrBuffer">Data to write. Must be atleast wrByteCount bytes long.</param>        
            <seealso cref="M:NurApiDotNet.NurApi.CustomWriteTag(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.UInt32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.CustomWriteTagByEPC(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.Byte[],System.UInt32,System.Byte[],System.Int32,System.Int32)"/> 
        </member>
        <member name="M:NurApiDotNet.NurApi.CustomWriteTag(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data to tag without any singulation data using customizable write command and bank parameter.
            This function can be used for tags that do not have an EPC.
            <para>Note:If there's more than one tag in range, this function will most likely fail due to the RF collision.</para>
            </summary>
            <param name="wrCmd">Custom write command. </param>
            <param name="cmdBits">Number of bits in the custom write command (1..32). </param>
            <param name="wrBank">Custom bank parameter. </param>
            <param name="bankBits">Number of bits in the custom bank value (0..32). </param>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE. </param>
            <param name="wrAddress">Address for write operation.</param>
            <param name="wrBuffer">Data to write. Must be atleast wrByteCount bytes long.</param>
            <param name="wrBufferPos">Start position</param>
            <param name="wrBufferLen">Number of bytes to write. This must divisible by two. </param>
            <seealso cref="M:NurApiDotNet.NurApi.CustomWriteSingulatedTag(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[],System.UInt32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.CustomWriteTagByEPC(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.Byte[],System.UInt32,System.Byte[],System.Int32,System.Int32)"/> 
        </member>
        <member name="M:NurApiDotNet.NurApi.CustomWriteTag(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.UInt32,System.Byte[])">
            <summary>
            Write data to tag without any singulation data using customizable write command and bank parameter.
            This function can be used for tags that do not have an EPC.
            <para>Note:If there's more than one tag in range, this function will most likely fail due to the RF collision.</para>
            </summary>
            <param name="wrCmd">Custom write command. </param>
            <param name="cmdBits">Number of bits in the custom write command (1..32). </param>
            <param name="wrBank">Custom bank parameter. </param>
            <param name="bankBits">Number of bits in the custom bank value (0..32). </param>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE. </param>
            <param name="wrAddress">Address for write operation.</param>
            <param name="wrBuffer">Data to write.</param>        
            <seealso cref="M:NurApiDotNet.NurApi.WriteSingulatedTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[],System.Byte,System.UInt32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.WriteTagByEPC(System.UInt32,System.Boolean,System.Byte[],System.Byte,System.UInt32,System.Byte[],System.Int32,System.Int32)"/> 
        </member>
        <member name="M:NurApiDotNet.NurApi.CustomWriteTagByEPC(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.Byte[],System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data to tag singulated by tag's EPC memory using customizable write command and bank parameter.
            </summary>
            <param name="wrCmd">Custom write command. </param>
            <param name="cmdBits">Number of bits in the custom write command (1..32). </param>
            <param name="wrBank">Custom bank parameter. </param>
            <param name="bankBits">Number of bits in the custom bank value (0..32). </param>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE. </param>
            <param name="epc">EPC memory to singulate against.</param>
            <param name="wrAddress">Address for write operation.</param>
            <param name="wrBuffer">Data to write.</param>      
            <param name="wrBufferPos">Start position</param>
            <param name="wrBufferLen">Number of bytes to write. This must divisible by two. </param>
            <seealso cref="M:NurApiDotNet.NurApi.CustomWriteSingulatedTag(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[],System.UInt32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.CustomWriteTag(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.UInt32,System.Byte[])"/> 
        </member>
        <member name="M:NurApiDotNet.NurApi.CustomWriteTagByEPC(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.Byte[],System.UInt32,System.Byte[])">
            <summary>
            Write data to tag singulated by tag's EPC memory using customizable write command and bank parameter.
            </summary>
            <param name="wrCmd">Custom write command. </param>
            <param name="cmdBits">Number of bits in the custom write command (1..32). </param>
            <param name="wrBank">Custom bank parameter. </param>
            <param name="bankBits">Number of bits in the custom bank value (0..32). </param>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE. </param>
            <param name="epc">EPC memory to singulate against.</param>
            <param name="wrAddress">Address for write operation.</param>
            <param name="wrBuffer">Data to write.</param>              
            <seealso cref="M:NurApiDotNet.NurApi.CustomWriteSingulatedTag(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[],System.UInt32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.CustomWriteTag(System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Boolean,System.UInt32,System.Byte[])"/> 
        </member>
        <member name="M:NurApiDotNet.NurApi.CustomExchangeSingulated(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[],NurApiDotNet.NurApi.CustomExchangeParams)">
            <summary>
            Exchange a custom bit stream with a singulated tag using the custom bit stream control structure.
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE. </param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits. </param>
            <param name="sMaskBitLength">Length of the mask data in bits.</param>
            <param name="sMask">Mask data buffer.</param>
            <param name="cxcParams">Custom bit stream control structure.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>                  
            <returns>Custom exchange reponse structure along with error and tag response.<see cref="T:NurApiDotNet.NurApi.CustomExchangeResponse"/></returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.CustomExchangeSingulated(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[],System.UInt16,System.UInt16,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Byte[])">
            <summary>
            Exchange a custom bit stream with a singulated tag specifying all the parameters.
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE. </param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits. </param>
            <param name="sMaskBitLength">Length of the mask data in bits.</param>
            <param name="sMask">Mask data buffer.</param> 
            <param name="txLen">TX length in bits.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>
            <param name="rxLen">Expected number of bit in reception.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="rxTimeout">Receive timeout in ms (20...100).<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="asWrite">Act as a write operation (receiver instruction).<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="appendHandle">Append singulated tag's handle.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="xorRN16">XOR bit data with sungulated tag's RN16; TX length needs to be 16.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="txOnly">Transmit only.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="noTxCRC">No CRC in transmission.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="noRxCRC">No CRC inresponse; receive 'as is'.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="txCRC5">Transmission CRC is CRC-5.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="rxLenUnk">RX length is unknown; rxLen parameter will be ignored.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="rxStripHandle">Strip the appended handle from the reponse.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="bitBuffer">Bit buffer to send.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>                
            <returns>Custom exchange reponse structure along with error and tag response.<see cref="T:NurApiDotNet.NurApi.CustomExchangeResponse"/></returns>  
        </member>
        <member name="M:NurApiDotNet.NurApi.CustomExchangeByEPC(System.UInt32,System.Boolean,System.Byte[],NurApiDotNet.NurApi.CustomExchangeParams)">
            <summary>
            Exchange a custom bit stream with an EPC singulated tag using the custom bit stream control structure.
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE. </param>
            <param name="epc">EPC data for sungulation.</param>
            <param name="cxcParams">Custom bit stream control structure.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>
            <returns>Custom exchange reponse structure along with error and tag response.<see cref="T:NurApiDotNet.NurApi.CustomExchangeResponse"/></returns>  
        </member>
        <member name="M:NurApiDotNet.NurApi.CustomExchangeByEPC(System.UInt32,System.Boolean,System.Byte[],System.UInt16,System.UInt16,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Byte[])">
            <summary>
            Exchange a custom bit stream with an EPC singulated tag specifying all the parameters.
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE. </param>
            <param name="epc">EPC data for sungulation.</param>
            <param name="txLen">TX length in bits.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>
            <param name="rxLen">Expected number of bit in reception.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="rxTimeout">Receive timeout in ms (20...100).<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="asWrite">Act as a write operation (receiver instruction).<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="appendHandle">Append singulated tag's handle.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="xorRN16">XOR bit data with sungulated tag's RN16; TX length needs to be 16.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="txOnly">Transmit only.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="noTxCRC">No CRC in transmission.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="noRxCRC">No CRC inresponse; receive 'as is'.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="txCRC5">Transmission CRC is CRC-5.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="rxLenUnk">RX length is unknown; rxLen parameter will be ignored.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>
            <param name="rxStripHandle">Strip the appended handle from the reponse.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="bitBuffer">Bit buffer to send.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <returns>Custom exchange reponse structure along with error and tag response.<see cref="T:NurApiDotNet.NurApi.CustomExchangeResponse"/></returns>  
        </member>
        <member name="M:NurApiDotNet.NurApi.CustomExchange(System.UInt32,System.Boolean,NurApiDotNet.NurApi.CustomExchangeParams)">
            <summary>
            Exchange a custom bit stream without any singulation using the custom bit stream control structure.
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE. </param>
            <param name="cxcParams">Custom bit stream control structure.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>
            <returns>Custom exchange reponse structure along with error and tag response.<see cref="T:NurApiDotNet.NurApi.CustomExchangeResponse"/></returns>  
        </member>
        <member name="M:NurApiDotNet.NurApi.CustomExchange(System.UInt32,System.Boolean,System.UInt16,System.UInt16,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Byte[])">
            <summary>
            Exchange a custom bit stream without any singulation specifying all the parameters.
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE. </param>
            <param name="txLen">TX length in bits.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>
            <param name="rxLen">Expected number of bit in reception.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="rxTimeout">Receive timeout in ms (20...100).<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="asWrite">Act as a write operation (receiver instruction).<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="appendHandle">Append singulated tag's handle.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="xorRN16">XOR bit data with sungulated tag's RN16; TX length needs to be 16.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="txOnly">Transmit only.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="noTxCRC">No CRC in transmission.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="noRxCRC">No CRC inresponse; receive 'as is'.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="txCRC5">Transmission CRC is CRC-5.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="rxLenUnk">RX length is unknown; rxLen parameter will be ignored.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="rxStripHandle">Strip the appended handle from the reponse.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <param name="bitBuffer">Bit buffer to send.<see cref="T:NurApiDotNet.NurApi.CustomExchangeParams"/></param>        
            <returns>Custom exchange reponse structure along with error and tag response.<see cref="T:NurApiDotNet.NurApi.CustomExchangeResponse"/></returns>  
        </member>
        <member name="M:NurApiDotNet.NurApi.EraseSingulatedTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[],System.Byte,System.UInt32,System.Byte)">
            <summary>
            Erase block in a tag specifically singulated.
            </summary>
            <param name="passwd">Password for secured operations.</param>
            <param name="secured">true if operation is secured, otherwise false. </param>		
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits. </param>
            <param name="sMaskBitLength">Length of the mask data in bits.</param>
            <param name="sMask">Mask data buffer.</param>
            <param name="erBank">Bank where the erAddress is located in. 0=<see cref="F:NurApiDotNet.NurApi.BANK_PASSWD"/> 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="erAddress">Word address of the first word to be erased.</param>
            <param name="erWordCount">Number of word to erase starting from erAddress.</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.EraseTagByEPC(System.UInt32,System.Boolean,System.Byte[],System.Byte,System.UInt32,System.Byte)">
            <summary>
            Erase block in a tag singulated by EPC.
            </summary>
            <param name="passwd">Password for secured operations.</param>
            <param name="secured">true if operation is secured, otherwise false. </param>		
            <param name="epc">EPC memory to singulate against.</param>
            <param name="erBank">Bank where the erAddress is located in. 0=<see cref="F:NurApiDotNet.NurApi.BANK_PASSWD"/> 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="erAddress">Word address of the first word to be erased.</param>
            <param name="erWordCount">Number of word to erase starting from erAddress.</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.BlockWriteSingulatedTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[],System.Byte,System.UInt32,System.Byte[],System.Int32,System.Byte)">
            <summary>
            Write data to tag with specific singulation using specific block write.
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE. </param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits. </param>
            <param name="sMaskBitLength">Length of the mask data in bits. </param>
            <param name="sMask">Mask data buffer.</param>
            <param name="wrBank">Memory bank for write operation.</param>
            <param name="wrAddress">Address for write operation.</param>
            <param name="wrBuffer">Data to write. Must be atleast wrByteCount bytes long.</param>
            <param name="wrBufferLen">Number of bytes to write. This must divisible by two. If <b>blSize</b> is not zero then also must be divisible by <b>blSize</b>.</param>
            <param name="blSize">Size of single block in words, not bytes. If 0 the whole data is considred to be a 'single block'.</param>
            <seealso cref="M:NurApiDotNet.NurApi.WriteTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.WriteTagByEPC(System.UInt32,System.Boolean,System.Byte[],System.Byte,System.UInt32,System.Byte[],System.Int32,System.Int32)"/> 
        </member>
        <member name="M:NurApiDotNet.NurApi.BlockWriteSingulatedTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[],System.Byte,System.UInt32,System.Byte[],System.Byte)">
            <summary>
            Write data to tag with specific singulation using specific block write.
            The Selection mask is assumed to be in byte length i.e. divisible by 8.
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE. </param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits. </param>
            <param name="sMask">Mask data buffer.</param>
            <param name="wrBank">Memory bank for write operation.</param>
            <param name="wrAddress">Address for write operation.</param>
            <param name="wrBuffer">Data to write. Must be atleast wrByteCount bytes long.</param>
            <param name="blSize">Size of single block in words, not bytes. If 0 the whole data is considred to be a 'single block'.</param>
            <seealso cref="M:NurApiDotNet.NurApi.WriteTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.WriteTagByEPC(System.UInt32,System.Boolean,System.Byte[],System.Byte,System.UInt32,System.Byte[],System.Int32,System.Int32)"/> 
        </member>
        <member name="M:NurApiDotNet.NurApi.BlockWriteByEPC(System.UInt32,System.Boolean,System.Byte[],System.Byte,System.UInt32,System.Byte[],System.Byte)">
            <summary>
            Write data to tag by EPC singulation using specific block write.
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE. </param>
            <param name="epcBuffer">EPC used in sungulation.</param>
            <param name="wrBank">Memory bank for write operation.</param>
            <param name="wrAddress">Address for write operation.</param>
            <param name="wrBuffer">Data to write. Must be atleast wrByteCount bytes long.</param>
            <param name="blSize">Size of single block in words, not bytes. If 0 the whole data is considred to be a 'single block'.</param>
            <seealso cref="M:NurApiDotNet.NurApi.WriteTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.WriteTagByEPC(System.UInt32,System.Boolean,System.Byte[],System.Byte,System.UInt32,System.Byte[],System.Int32,System.Int32)"/> 
        </member>
        <member name="M:NurApiDotNet.NurApi.BlockWriteTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[],System.Byte)">
            <summary>
            Write data to tag with no singulation using specific block write.
            </summary>
            <param name="passwd">Password for secured operations. </param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE. </param>
            <param name="wrBank">Memory bank for write operation.</param>
            <param name="wrAddress">Address for write operation.</param>
            <param name="wrBuffer">Data to write. Must be atleast wrByteCount bytes long.</param>
            <param name="blSize">Size of single block in words, not bytes. If 0 the whole data is considred to be a 'single block'.</param>
            <seealso cref="M:NurApiDotNet.NurApi.WriteTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[])"/>
            <seealso cref="M:NurApiDotNet.NurApi.WriteTagByEPC(System.UInt32,System.Boolean,System.Byte[],System.Byte,System.UInt32,System.Byte[],System.Int32,System.Int32)"/> 
        </member>
        <member name="M:NurApiDotNet.NurApi.ReadPermalock(System.UInt32,System.Boolean,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Read block permalock statuses without selecting a tag.
            Assume one tag in field.
            </summary>
            <param name="password">Password parameter for access.</param>
            <param name="secured">If true then access is done with the password</param>
            <param name="bank">Bank range is 1...3. </param>
            <param name="addr">This is the first address of the first of 16-block chunk to read (0 -> 0, 1 -> 16, ...). </param>
            <param name="range">Number of 16-block chunks to read.</param>
            <returns>A word array where each word represent a 16-block chunk's lock states (1=locked).</returns>
            <seealso cref="M:NurApiDotNet.NurApi.ReadPermalockByEPC(System.UInt32,System.Boolean,System.Byte[],System.UInt32,System.UInt32,System.UInt32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.ReadPermalockSingulated(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[],System.UInt32,System.UInt32,System.UInt32)"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.ReadPermalockByEPC(System.UInt32,System.Boolean,System.Byte[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Read block permalock statuses by selecting the tag by its EPC.
            </summary>
            <param name="password">Password parameter for access.</param>
            <param name="secured">If true then access is done with the password</param>
            <param name="epc">EPC of the tag.</param>
            <param name="bank">Bank range is 1...3. </param>
            <param name="addr">This is the first address of the first of 16-block chunk to read (0 -> 0, 1 -> 16, ...). </param>
            <param name="range">Number of 16-block chunks to read.</param>
            <returns>A word array where each word represent a 16-block chunk's lock states (1=locked).</returns>
            <seealso cref="M:NurApiDotNet.NurApi.ReadPermalock(System.UInt32,System.Boolean,System.UInt32,System.UInt32,System.UInt32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.ReadPermalockSingulated(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[],System.UInt32,System.UInt32,System.UInt32)"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.ReadPermalockSingulated(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Read block permalock statuses by selecting the tag with specific singulation data.
            </summary>
            <param name="password">Password parameter for access.</param>
            <param name="secured">If true then access is done with the password</param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits. </param>
            <param name="sMaskBitLength">Length of the mask data in bits.</param>
            <param name="sMask">Mask data buffer.</param>
            <param name="bank">Bank range is 1...3. </param>
            <param name="addr">This is the first address of the first of 16-block chunk to read (0 -> 0, 1 -> 16, ...). </param>
            <param name="range">Number of 16-block chunks to read.</param>
            <returns>A word array where each word represent a 16-block chunk's lock states (1=locked).</returns>
            <seealso cref="M:NurApiDotNet.NurApi.ReadPermalockByEPC(System.UInt32,System.Boolean,System.Byte[],System.UInt32,System.UInt32,System.UInt32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.ReadPermalock(System.UInt32,System.Boolean,System.UInt32,System.UInt32,System.UInt32)"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.BlockPermalock(System.UInt32,System.Boolean,System.UInt32,System.UInt32,System.UInt32,System.UInt16[])">
            <summary>
            Do BlockPermalock without selecting any tag.
            Assume one tag in field.
            </summary>
            <param name="password">Password parameter for access.</param>
            <param name="secured">If true then access is done with the password</param>
            <param name="bank">Bank range is 1...3. </param>
            <param name="addr">This is the first address of the first of 16-block chunk to apply the mask to (0 -> 0, 1 -> 16, ...). </param>
            <param name="range">Number of 16-block chunks to apply the mask to.</param>
            <param name="lockMask">Each word represents on 16-block chunks lock mask as specified by Gen2 specification 1.2.0.</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.BlockPermalockByEPC(System.UInt32,System.Boolean,System.Byte[],System.UInt32,System.UInt32,System.UInt32,System.UInt16[])">
            <summary>
            Do BlockPermalock by selecting the tag by its EPC.
            </summary>
            <param name="password">Password parameter for access.</param>
            <param name="secured">If true then access is done with the password</param>
            <param name="epc">EPC of the tag.</param>
            <param name="bank">Bank range is 1...3.</param>
            <param name="addr">This is the first address of the first of 16-block chunk to apply the mask to (0 -> 0, 1 -> 16, ...).</param>
            <param name="range">Number of 16-block chunks to apply the mask to.</param>
            <param name="lockMask">Each word represents on 16-block chunks lock mask as specified by Gen2 specification 1.2.0.</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.BlockPermalockSingulated(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32,System.Byte[],System.UInt32,System.UInt32,System.UInt32,System.UInt16[])">
            <summary>
            do BlockPermalock by selecting the tag with specific singulation data.
            </summary>
            <param name="password">Password parameter for access.</param>
            <param name="secured">If true then access is done with the password</param>
            <param name="sBank">Memory bank used for tag singulation. 1=<see cref="F:NurApiDotNet.NurApi.BANK_EPC"/> 2=<see cref="F:NurApiDotNet.NurApi.BANK_TID"/> 3=<see cref="F:NurApiDotNet.NurApi.BANK_USER"/></param>
            <param name="sAddress">Singulation data address in bits. </param>
            <param name="sMaskBitLength">Length of the mask data in bits.</param>
            <param name="sMask">Mask data buffer.</param>
            <param name="bank">Bank range is 1...3.</param>
            <param name="addr">This is the first address of the first of 16-block chunk to apply the mask to (0 -> 0, 1 -> 16, ...).</param>
            <param name="range">Number of 16-block chunks to apply the mask to.</param>
            <param name="lockMask">Each word represents on 16-block chunks lock mask as specified by Gen2 specification 1.2.0.</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.GetUseBlockWrite">
            <summary>
            Get current block write usage flag.
            </summary>
            <returns>true: all NurApi tag write functions will G2 BlockWrite method to write data. false: Single word writes are used</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.SetUseBlockWrite(System.Boolean)">
            <summary>
            When set to true, all NurApi tag write functions will use UHF C1G2 BlockWrite command (uhf c1g2 spec available at epcglobal) to write data to tag.
            </summary>
            <param name="val">true is enabled, false is disabled</param>
        </member>
        <member name="T:NurApiDotNet.NurApi.AuthenticateParam">
            <summary>
            Gen2 version 2 Authenticate-command's parameters.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AuthenticateParam.csi">
            <summary>The Cruptographic Suite Indicator.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AuthenticateParam.rxLength">
            <summary> Set to 0 if reception length is not known, otherwise this is the bit length of the reception ranging in 1...1008.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AuthenticateParam.rxAttn">
            <summary> RX attenuation for response reception; true causes "write-like" operation thus reduces operation's range. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AuthenticateParam.reSelect">
            <summary> If module needs to internally use the ReadBuffer command then setting this to true causes the tag to be re-selected between operations.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AuthenticateParam.timeout">
            <summary> Response timeout similar to read or write; unit is milliseconds ranging from 20...50.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AuthenticateParam.preTxWait">
            <summary> Additional wait time before executing the command in microseconds (0...50000); may be used to energize the tag properly (carrier is on).</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AuthenticateParam.msgBitLength">
            <summary> The CSI message's length in bits.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AuthenticateParam.mMessage">
            <summary> Must be taken care by the host application.</summary>			
        </member>
        <member name="M:NurApiDotNet.NurApi.AuthenticateParam.SetMessage(System.Int32,System.Byte[])">
            <summary>
            Set up the message required by the used CSI.            
            </summary>
            <param name="msgBitLen">Bit length of the message</param>
            <param name="message">Message contents as byte array</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.AuthenticateParam.GetMessage">
            <summary>
            Get the current message from the class.           
            </summary>
            <returns>If OK, returns the copy of the currently set up message</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.AuthenticateParam.#ctor">
            <summary>
            Basic constructor with nothing specific set up yet.
            </summary>            
        </member>
        <member name="M:NurApiDotNet.NurApi.AuthenticateParam.#ctor(NurApiDotNet.NurApi.AuthenticateParam)">
            <summary>
            Constructor that copies parameters from another object.
            </summary>
            <param name="other">object to copy from</param>
        </member>
        <member name="T:NurApiDotNet.NurApi.AuthenticateResp">
            <summary>
            Gen2 version 2 Authenticate-command's response.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AuthenticateResp.RESPONSE_RECEIVED">
            <summary>
            Indicates that was some response, whether it is OK or not, from the tag.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AuthenticateResp.NO_RESPONSE">
            <summary>
            Indicates that there was no data nor reply received from the tag.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AuthenticateResp.TAG_ERROR">
            <summary>
            Indicates that there was a clear, one byte error reply from the tag.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AuthenticateResp.ERROR_NOT_RECEIVED">
            <summary>
            Indicates that the tag backscattered error code is not present.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AuthenticateResp.status">
            <summary>
            General status of the data exchange with the tag.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AuthenticateResp.tagError">
            <summary>
            The tag's error code is present.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AuthenticateResp.bitLength">
            <summary>
            Number of bits received from the tag.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AuthenticateResp.reply">
            <summary>
            The tag's backscattered bits.
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.AutotuneSetup">
            <summary>
            AutoTune setup
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.AutotuneSetup.Mode">
            <summary>
            AutoTune modes
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AutotuneSetup.Mode.Off">
            <summary>
            Autotune not in use.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AutotuneSetup.Mode.Enable">
            <summary>
            Autotune enable.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AutotuneSetup.Mode.ThresholdEnable">
            <summary>
            Autotune threshold use enable.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AutotuneSetup.mode">
            <summary>
            Autotune mode bits: <see cref="F:NurApiDotNet.NurApi.AUTOTUNE_MODE_ENABLE"/>, <see cref="F:NurApiDotNet.NurApi.AUTOTUNE_MODE_THRESHOLD_ENABLE"/>.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.AutotuneSetup.threshold_dBm">
            <summary>
             Threshold when used. Reflected power higher than this value causes the autotune to execute.
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.AutotuneSetup.#ctor(System.Byte,System.SByte)">
            <summary>
            Controls the module's internal automatic tuning during inventories.
            </summary>
            <param name="mode">Autotune enable/disable and threshold use enable/disable.</param>
            <param name="thresh">Threshold when used and autotune enabled. Reflected power higher than this value causes the autotune to execute.</param>
        </member>
        <member name="T:NurApiDotNet.NurApi.CustomExchangeResponse">
            <summary>
            Custom bit stream / exchange response.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CustomExchangeResponse.error">
            <summary>
            Error from the native API.
            </summary>
            <remarks>If this error is tag's error (0x42) then the tag bytes 
            can be used to determine the error (byte at index 0 is the tag backscattered error).
            </remarks>
        </member>
        <member name="F:NurApiDotNet.NurApi.CustomExchangeResponse.tagBytes">
            <summary>
            Byte array from the tag.
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.CustomHoptable">
            <summary>
            Extended custom hoptable: added LBT limit and maximum TX level.
            </summary>
            <seealso cref="M:NurApiDotNet.NurApi.GetRegionInfo(System.Int32)"/> 
            <seealso cref="M:NurApiDotNet.NurApi.GetCustomHoptableEx"/> 
        </member>
        <member name="F:NurApiDotNet.NurApi.CustomHoptable.Count">
            <summary>
            Channel count.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CustomHoptable.chTime">
            <summary>
            Channel time.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CustomHoptable.silentTime">
            <summary>
            Pause time between channel change.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CustomHoptable.maxLF">
            <summary>
            Maximum LF.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CustomHoptable.Tari">
            <summary>
            Tari. (1=12.5 us, 2=25 us)
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CustomHoptable.lbtThresh">
            <summary>
            LBT threshold. Minimum value is -90.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CustomHoptable.maxTxLevel">
            <summary>
            Maximum TX level. Range is 0...19; level = 27 - max dBm.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.CustomHoptable.freqs">
            <summary>
            Frequencies.
            </summary>		
        </member>
        <member name="T:NurApiDotNet.NurApi.DeviceCapabilites">
            <summary>
            Device capabilities.
            </summary>
            <seealso cref="M:NurApiDotNet.NurApi.GetDeviceCaps"/>
        </member>
        <member name="T:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1">
            <summary>
            Enums of device capabilities flag set 1.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.RXDECFM0">
            <summary>
            FM0 receiver decoding.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.RXDECM2">
            <summary>
            Miller-2 receiver decoding.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.RXDECM4">
            <summary>
            Miller-4 receiver decoding.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.RXDECM8">
            <summary>
            Miller-8 receiver decoding.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.RXLF40k">
            <summary>
             Link frequency of 40kHz supported.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.RXLF80k">
            <summary>
            Link frequency of 80kHz supported.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.RXLF160k">
            <summary>
            Link frequency of 160kHz supported.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.RXLF256k">
            <summary>
            Link frequency of 256kHz supported.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.RXLF320k">
            <summary>
            Link frequency of 320kHz supported.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.RXLF640k">
            <summary>
            Link frequency of 640kHz supported.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.RXLFres1">
            <summary>
            Reserved LF 1.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.RXLFres2">
            <summary>
            Reserved LF 2.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.RXLFMask">
            <summary>
            Link frequency bit mask.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.HasBeep">
            <summary>
            Module can "beep".
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.HasLight">
            <summary>
             Light sensor supported.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.HasTap">
            <summary>
            Tap sensor supported.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.AntTune">
            <summary>
            Antenna tuning supported.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.ChScanner">
            <summary>
            XChannel scanning is supported.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.InvRead">
            <summary>
            Inventory read is supported NUR05WL2/NUR10W only.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.AntPower">
            <summary>
            Per antenna power supported.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.PowerOffset">
            <summary>
            Power "offset" supported.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.BeamAnt">
            <summary>
            Antenna beam control supported.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.FetchSingle">
            <summary>
            Can fetch single tag entry from the internal buffer.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.AntennaMap">
            <summary>
            Internal antenna map supported.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.Gen2Ver2">
            <summary>
            Gen2 version 2 command support / not.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.RfProfile">
            <summary>
            The module FW supports RF profile setting
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.Diag">
            <summary>
            This module FW supports diagnostics commands.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1.TagPhase">
            <summary>
            This module FW supports tag phase info.
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.DeviceCapabilites.ModuleTypeCode">
            <summary>
            Type of NUR module
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.ModuleTypeCode.NUR05W">
            <summary>
            1st generation NUR.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.ModuleTypeCode.NUR05WL">
            <summary>
            2nd generation NUR.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.ModuleTypeCode.NUR05WL2">
            <summary>
            3rd generation NUR.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.ModuleTypeCode.NUR1W0">
            <summary>
            3rd generation NUR (1W device).
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.ModuleTypeCode.NUR2_1W">
            <summary>
            Module type NUR2-1W (1W module)
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.ModuleTypeCode.NUR2_01W">
            <summary>
            Module type nanoNUR-01W
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.ModuleTypeCode.NUR3_RSVD">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.ModuleTypeCode.NUR3FR_1W">
            <summary>
            Module type FR22 integrated nur3
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.ModuleTypeCode.NUR3MOD_1W">
            <summary>
            Module type NUR3-1W
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.DeviceCapabilites.ModuleConf">
            <summary>
            Module configuration bits
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.ModuleConf.None">
            <summary>
            No configuration set for the module.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.ModuleConf.UsbTableReader">
            <summary>
            USB table reader configuration bit.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.ModuleConf.EthTableReader">
            <summary>
            Ethernet table reader configuration bit.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.ModuleConf.StixReader">
            <summary>
            STIX mini reader configuration bit.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.ModuleConf.OnewattReader">
            <summary>
            One watt reader configuration bit.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.ModuleConf.BeamReader">
            <summary>
            Beam forming reader configuration bit.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.ModuleConf.Multiport">
            <summary>
            Multiport reader.
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.DeviceCapabilites.ChipVersionCode">
            <summary>
            RFID chip version
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.ChipVersionCode.AS3992">
            <summary>
            1st generation RFID chip version.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.ChipVersionCode.AS3993">
            <summary>
            2nd generation RFID chip version.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.ChipVersionCode.R2000">
            <summary>
            Chip version R2000
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.ChipVersionCode.R2000D">
            <summary>
            Chip version R2000 direct
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.ChipVersionCode.E310">
            <summary>
            Chip version impinj E310
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.ChipVersionCode.E510">
            <summary>
            Chip version impinj E510
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.ChipVersionCode.E710">
            <summary>
            Chip version impinj E710
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.ChipVersionCode.E910">
            <summary>
            Chip version impinj E910
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.flagSet1">
            <summary>
             Device capabilities flag set 1.        
            </summary>
            <see cref="T:NurApiDotNet.NurApi.DeviceCapabilites.FlagSet1"/>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.flagSet2">
            <summary>
            Device capabilities flag set 2.         
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.DeviceCapabilites.fm0">
            <summary>
            FM0 RX decoding support.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.DeviceCapabilites.m2">
            <summary>
            Miller-2 RX decoding support.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.DeviceCapabilites.m4">
            <summary>
            Miller-4 RX decoding support.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.DeviceCapabilites.m8">
            <summary>
            Miller-8 RX decoding support.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.DeviceCapabilites.lf40k">
            <summary>
            Link frequency of 40kHz support.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.DeviceCapabilites.lf80k">
            <summary>
            Link frequency of 80kHz support.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.DeviceCapabilites.lf160k">
            <summary>
            Link frequency of 160kHz support.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.DeviceCapabilites.lf256k">
            <summary>
            Link frequency of 256kHz support.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.DeviceCapabilites.lf320k">
            <summary>
            Link frequency of 320kHz support.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.DeviceCapabilites.lf640k">
            <summary>
            Link frequency of 640kHz support.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.DeviceCapabilites.beep">
            <summary>
            Bepper presence.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.DeviceCapabilites.light">
            <summary>
            Light sensor support.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.DeviceCapabilites.tap">
            <summary>
            Tap sensor support.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.DeviceCapabilites.tune">
            <summary>
            Antenna tune support.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.DeviceCapabilites.scanChan">
            <summary>
            Support for channel scan.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.DeviceCapabilites.invRead">
            <summary>
            Support for inventory + read.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.maxTxdBm">
            <summary>
            Maximum TX power in terms of dBm.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.txAttnStep">
            <summary>
            TX level attenuation pre step in dBm.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.maxTxmW">
            <summary>
            Maximum TX level in mW.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.txSteps">
            <summary>
            Number of TX attenuation levels available.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.szTagBuffer">
            <summary>
            Number of 96-bit EPCs that the module tag buffer can currently hold.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.maxAnt">
            <summary>
            Number of maximum possible antennas with current configuration.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.maxGPIO">
            <summary>
            Number of maximum possible GPIO pins with current configuration.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.chipVersion">
            <summary>
            RFID chip version.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.chipVersionCode">
            <summary>
            RFID chip version.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.moduleType">
            <summary>
            Module type.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.moduleTypeCode">
            <summary>
            Module type.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.moduleConfigFlags">
            <summary>
            Module configuration flag bits.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.DeviceCapabilites.perAntPower">
            <summary>
            Per antenna power support.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.DeviceCapabilites.perAntOffset">
            <summary>
            Per antenna low power setting offset support (-1...1).
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.DeviceCapabilites.gridAntenna">
            <summary>
            DEPRECATED! Provided for compatibility. Use beamAntenna member instead.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.DeviceCapabilites.beamAntenna">
            <summary>
            True if the module supports beam forming antenna.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.DeviceCapabilites.fetchSingle">
            <summary>
            True if the module supports fetching tags one by one
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.DeviceCapabilites.antennaMap">
            <summary>
            True if the module provides antenna mapping information
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.DeviceCapabilites.gen2ver2">
            <summary>
            True if the module FW supports Gen2V2 at some level. See the level from gen2v2Support.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.gen2v2Support">
            <summary>
            Support level of Gen2 version 2 command.
            Zero means no support.
            1 = Authenticate, Untraceable and ReadBuffer.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.DeviceCapabilites.rfProfile">
            <summary>
            True if the module FW supports RF profile setting.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.DeviceCapabilites.diagCommands">
            <summary>
            True if the module FW supports diagnostics commands.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.DeviceCapabilites.tagPhaseInfo">
            <summary>
            True if the module FW supports tag phase info. see OPFLAGS_EN_TAG_PHASE */
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.secChipMajorVersion">
            <summary>
            Secondary chip major SW version
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.secChipMinorVersion">
            <summary>
            Secondary chip minor SW version
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.secChipMaintenanceVersion">
            <summary>
            Secondary chip maintenance SW version
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DeviceCapabilites.secChipReleaseVersion">
            <summary>
            Secondary chip release SW version
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.DeviceCapabilites.IsUsbTableReader">
            <summary>
            USB table reader configuration.        
            </summary>
            <returns>True if the device has been configured as a USB table reader.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.DeviceCapabilites.IsEthernetTableReader">
            <summary>
            Ethernet table reader configuration.        
            </summary>
            <returns>True if the device has been configured as an Ethernet table reader.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.DeviceCapabilites.IsStixReader">
            <summary>
            STIX mini reader configuration.        
            </summary>
            <returns>True if the device has been configured as a STIX mini reader.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.DeviceCapabilites.IsOneWattReader">
            <summary>
            1W / high power support.       
            </summary>
            <returns>True if the module's RF front end has been configured to operate in 1W mode.</returns>        
        </member>
        <member name="M:NurApiDotNet.NurApi.DeviceCapabilites.IsBeamReader">
            <summary>
            Beam reader configuration.
            </summary>
            <returns>True if the module is configured to act as a beam reader.</returns>         
        </member>
        <member name="M:NurApiDotNet.NurApi.DeviceCapabilites.GetTxLevels">
            <summary>
            Get list of supported Tx levels as milli Watts (mW).
            </summary>
            <returns>list of mW values</returns>   
        </member>
        <member name="M:NurApiDotNet.NurApi.DeviceCapabilites.GetSupportedLinkFreqs">
            <summary>
            Get supported link frequencies.
            </summary>
            <returns>List of supported link frequencies</returns>
        </member>
        <member name="T:NurApiDotNet.NurApi.DiagReport">
            <summary>
            Diagnostics report data.
            <seealso cref="M:NurApiDotNet.NurApi.DiagGetReport(System.UInt32)"/>, <seealso cref="M:NurApiDotNet.NurApi.DiagGetConfig(System.UInt32@,System.UInt32@)"/>, <seealso cref="M:NurApiDotNet.NurApi.DiagSetConfig(System.UInt32,System.UInt32)"/>
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DiagReport.flags">
            <summary>
            Report flags. see enum NUR_DIAG_REPORT_FLAGS
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DiagReport.uptime">
            <summary>
            Uptime in milliseconds
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DiagReport.rfActiveTime">
            <summary>
            RF on time in milliseconds
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DiagReport.temperature">
            <summary>
            Temperature in celcius. 1000 if not supported
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DiagReport.bytesIn">
            <summary>
            Number of bytes in to module
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DiagReport.bytesOut">
            <summary>
            Number of bytes out from module
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DiagReport.bytesIgnored">
            <summary>
            Number of ignored (invalid) bytes
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DiagReport.antennaErrors">
            <summary>
            Number of bad antenna errors
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DiagReport.hwErrors">
            <summary>
            Number of automatically recovered internal HW failures
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DiagReport.invTags">
            <summary>
            Number of successfully inventoried tags
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DiagReport.invColl">
            <summary>
            Number of collisions during inventory
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DiagReport.readTags">
            <summary>
            Number of successfully read tag commands
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DiagReport.readErrors">
            <summary>
            Number of failed read tag commands
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DiagReport.writeTags">
            <summary>
            Number of successfully write tag commands
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DiagReport.writeErrors">
            <summary>
            Number of failed write tag commands
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DiagReport.errorConds">
            <summary>
            Number of temporary error conditions (over temp, low voltage) occured
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DiagReport.setupErrs">
            <summary>
            Number of invalid setup errors
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.DiagReport.invalidCmds">
            <summary>
            Number of invalid (not supported) commands received
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.EthConfig">
            <summary>
            Holds information about Ethernet settings of connected module if available (<see cref="M:NurApiDotNet.NurApi.GetEthConfig"/>)
            </summary>
            <seealso cref="M:NurApiDotNet.NurApi.GetEthConfig"/> 	
        </member>
        <member name="F:NurApiDotNet.NurApi.EthConfig.transport">
            <summary>
            Transport method used with NurApiSetEthConfig().
            if transport = 0 then ethernet settings will be set to Sampo via current connection.(USB,serial or TCP)
            if transport = 1 then ethernet settings will be set to Sampo using broadcast message.
            This method requires that correct 'mac' address has been set to structure. MAC address is used for filtering that only certain device receives new configurations.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.EthConfig.title">
            <summary>
            Get / Set the title of an Ethernet Sampo device.
            </summary>
            <value>"Friendly" name of the device. Default: "Nordic ID Sampo S1".</value>		
        </member>
        <member name="F:NurApiDotNet.NurApi.EthConfig.version">
            <summary>
            (Get) Current Revision of ethernet CPU firmware 
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.EthConfig.ip">
            <summary>
            (Get) Current IP address of Sampo device
            </summary>		
        </member>
        <member name="F:NurApiDotNet.NurApi.EthConfig.mask">
            <summary>
            (Get/Set) Subnet mask (used in static IP mode) 
            </summary>	
        </member>
        <member name="F:NurApiDotNet.NurApi.EthConfig.gw">
            <summary>
            (Get/Set) Gateway	(used in static IP mode)
            </summary>	
        </member>
        <member name="F:NurApiDotNet.NurApi.EthConfig.addrType">
            <summary>
            (Get/Set) Address type 0=DHCP(default) 1=STATIC
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.EthConfig.staticip">
            <summary>
            (Get/Set) Static IP. When using static IP address, set addrType to 1=STATIC 
            </summary>	
        </member>
        <member name="F:NurApiDotNet.NurApi.EthConfig.mac">
            <summary>
            (Get/(Set only if using transport as broadcast)) MAC address of device. Used for addressing when sending new settings via Broadcast. 
            </summary>		
        </member>
        <member name="F:NurApiDotNet.NurApi.EthConfig.serverPort">
            <summary>
            (Get/Set) Server port where client connects to when hostmode=Server. default 1300. 
            </summary>	
        </member>
        <member name="F:NurApiDotNet.NurApi.EthConfig.hostmode">
            <summary>
            (Get/Set) hostmode 0=Server (default) 1=Client.
            If server, Sampo listens port 'serverPort' for client connections (default).
            If Client, Sampo automatically tries to initialize connection to 'hostip' : 'hostPort' server.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.EthConfig.hostip">
            <summary>
            (Get/Set) Client host IP (if Mode=Client)
            </summary>		
        </member>
        <member name="F:NurApiDotNet.NurApi.EthConfig.hostPort">
            <summary>
            (Get/Set) Client host port (if Mode=Client)
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.EthConfig.reserved">
            <summary>
            (Get/Set) reserved for future usage
            </summary>		
        </member>
        <member name="M:NurApiDotNet.NurApi.EthConfig.#ctor">
            <summary>
             Used to create an empty NUR module Ethernet configure.
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.InventoryExFilter">
            <summary>
            Inventory filter parameters. Represents G2 Select command, see UHF G2 standard section 6.3.2.11.1.1.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.InventoryExFilter.truncate">
            <summary>
            Set to false always. NOT SUPPORTED AT THE MOMENT
            </summary>		
        </member>
        <member name="F:NurApiDotNet.NurApi.InventoryExFilter.target">
            <summary>
            Target session or SL. Indicates whether G2 select command modifies tag's SL flag or inventoried (A/B) flag.
            </summary>
            <seealso cref="F:NurApiDotNet.NurApi.SESSION_SL"/>			
        </member>
        <member name="F:NurApiDotNet.NurApi.InventoryExFilter.action">
            <summary>
            Indicates whether matching tags assert or deassert SL, or set their inventoried flag to A or B.
            </summary>
            <remarks>
            <para>
            The field action as per standard section 6.3.2.11.1.1 is defined as follows:
            </para>
            <list type="table"> <listheader><term>Value</term><description>Action</description></listheader>			
            <item><term>0</term><description>Matching tags: assert SL or inventoried session flag -> A. Non-matching: deassert SL or inventoried session flag -> B.</description></item>
            <item><term>1</term><description>Matching tags: assert SL or inventoried session flag -> A. Non-matching: do nothing.</description></item>
            <item><term>2</term><description>Matching tags: do nothing. Non-matching: deassert SL or inventoried session -> B.</description></item>
            <item><term>3</term><description>Matching tags: negate SL or invert inventoried session flag (A->B, B->A). Non-matching: do nothing.</description></item>
            <item><term>4</term><description>Matching tags: deassert SL or inventoried session flag -> B. Non-matching: assert SL or inventoried session flag -> A.</description></item>
            <item><term>5</term><description>Matching tags: deassert SL or inventoried session flag -> B. Non-matching: do nothing.</description></item>
            <item><term>6</term><description>Matching tags: do nothing. Non-matching: assert SL or inventoried session flag -> A.</description></item>
            <item><term>7</term><description>Matching tags: do nothing. Non-matching: negate SL or invert inventoried session flag (A->B, B->A).</description></item>
            </list>        	
            </remarks>       		
        </member>
        <member name="F:NurApiDotNet.NurApi.InventoryExFilter.bank">
            <summary>
            Memory bank used for filter mask (1, 2 or 3). Bank must not be passwd bank.
            </summary>		
        </member>
        <member name="F:NurApiDotNet.NurApi.InventoryExFilter.address">
            <summary>
            Filter mask data address in <b>bits</b>.
            </summary>		
        </member>
        <member name="F:NurApiDotNet.NurApi.InventoryExFilter.maskBitLength">
            <summary>
            Length of the mask data in <b>bits</b>. Maximum length is 255 bits
            </summary>		
        </member>
        <member name="F:NurApiDotNet.NurApi.InventoryExFilter.maskData">
            <summary>
            Mask data buffer.
            </summary>
            <remarks>
            Note that the data is left aligned.
            </remarks>            			
        </member>
        <member name="T:NurApiDotNet.NurApi.InventoryExParams">
            <summary>
            Extended inventory function parameters
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.InventoryExParams.Q">
            <summary>
            Q value used for inventory. Value 0 - 15, where value 0 means automatic Q selection. The Q is number of tag slots in single G2 query round.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.InventoryExParams.session">
            <summary>
            Session for inventory. Value 0 - 3.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.InventoryExParams.rounds">
            <summary>
            Default rounds for inventory. Value 0 - 10, where 0 means automatic rounds selection. 
            This value specifies full G2 query rounds performed in one inventory command.
            NOTE: If transitTime is specified, this value is ignored.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.InventoryExParams.transitTime">
            <summary>
            Total inventory time specified in milliseconds. Time is limited by maximum region channel time. Use 0 to disable.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.InventoryExParams.inventoryTarget">
            <summary>
            Inventory target, select whether tags whose inventoried flag is A or B participate in the inventory.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.InventoryExParams.inventorySelState">
            <summary>
            Chooses which tags respond to the inventory.
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.ModuleSetup">
            <summary>
            Module settings data.
            </summary>    
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.linkFreq">
            <summary>
            <para>Link frequency. See also the link frequency property: <see cref="P:NurApiDotNet.NurApi.LinkFrequency"/>.</para>
            <para>160000/256000/320000 = 160/256/320 kHz.</para>
            </summary>      
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.rxDecoding">
            <summary>
            <para>RX encoding (Miller encoding) (see<see cref="P:NurApiDotNet.NurApi.RxDecoding"/> property)</para>
            <para>FM0: <see cref="F:NurApiDotNet.NurApi.RXDECODING_FM0"/> (least robust reception)</para>
            <para>Miller-2: <see cref="F:NurApiDotNet.NurApi.RXDECODING_M2"/></para>
            <para>Miller-4: <see cref="F:NurApiDotNet.NurApi.RXDECODING_M4"/></para>
            <para>Miller-8: <see cref="F:NurApiDotNet.NurApi.RXDECODING_M8"/></para>
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.txLevel">
            <summary>
            Transmission (TX) power level in 1dB steps. See also the <see cref="P:NurApiDotNet.NurApi.TxLevel"/> property)			
            <para>Range is 0...19: there are 20 (0...19) steps so minimum output power value for 500mW devices is 8dBm (about 6mW) and 11dBm (about 40W) for the 1W devices.</para>
            <para>This value is subtracted from the maxiumum TX level producing the actual level as follows:</para>
            <list type="table"> <listheader><term>TX Level</term><desc1>Power dBm / mW (500 mW device)</desc1><desc2>Power dBm / mW (1W device)</desc2></listheader>
            <item><term>0</term><desc1>27 / 500</desc1><desc2>30 / 1000</desc2></item>
            <item><term>1</term><desc1>26 / 398</desc1><desc2>29 / 794</desc2></item>
            <item><term>2</term><desc1>25 / 316</desc1><desc2>28 / 631</desc2></item>
            <item><term>3</term><desc1>24 / 251</desc1><desc2>27 / 501</desc2></item>
            <item><term>4</term><desc1>23 / 200</desc1><desc2>26 / 398</desc2></item>
            <item><term>5</term><desc1>22 / 158</desc1><desc2>25 / 316</desc2></item>
            <item><term>6</term><desc1>21 / 126</desc1><desc2>24 / 251</desc2></item>
            <item><term>7</term><desc1>20 / 100</desc1><desc2>23 / 200</desc2></item>
            <item><term>8</term><desc1>19 / 79</desc1><desc2>22 / 158</desc2></item>
            <item><term>9</term><desc1>18 / 63</desc1><desc2>21 / 126</desc2></item>
            <item><term>10</term><desc1>17 / 50</desc1><desc2>20 / 100</desc2></item>
            <item><term>11</term><desc1>16 / 40</desc1><desc2>19 / 79</desc2></item>
            <item><term>12</term><desc1>15 / 32</desc1><desc2>18 / 63</desc2></item>
            <item><term>13</term><desc1>14 / 25</desc1><desc2>17 / 50</desc2></item>
            <item><term>14</term><desc1>13 / 20</desc1><desc2>16 / 40</desc2></item>
            <item><term>15</term><desc1>12 / 16</desc1><desc2>15 / 32</desc2></item>
            <item><term>16</term><desc1>11 / 13</desc1><desc2>14 / 25</desc2></item>
            <item><term>17</term><desc1>10 / 10</desc1><desc2>13 / 20</desc2></item>
            <item><term>18</term><desc1>9 / 8</desc1><desc2>12 / 16</desc2></item>
            <item><term>19</term><desc1>8 / 6</desc1><desc2>11 / 13</desc2></item>
            </list>
            </summary>     
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.txModulation">
            <summary>
            <para>Tx modulation style (see<see cref="P:NurApiDotNet.NurApi.TxModulation"/> property).</para>
            <para>The TX modulation is either ASK (<see cref="F:NurApiDotNet.NurApi.TXMODULATION_ASK"/>) or PR-ASK (<see cref="F:NurApiDotNet.NurApi.TXMODULATION_PRASK"/>).</para>
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.regionId">
            <summary>
            <para>Region ID. See also the <see cref="P:NurApiDotNet.NurApi.Region"/> property.</para>
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.inventoryQ">
            <summary>
            <para>Inventory Q (see <see cref="P:NurApiDotNet.NurApi.InventoryQ"/> property).</para>
            <para>Range is from 0 to 15 where zero means "automatic Q".</para>
            </summary>       
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.inventorySession">
            <summary>
            <para>Session (see <see cref="P:NurApiDotNet.NurApi.InventorySession"/> property)</para>
            <para>Valid session is 0...3.</para>
            </summary>  
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.inventoryRounds">
            <summary>
            <para>Module's Internal inventory rounds per call (see <see cref="P:NurApiDotNet.NurApi.InventoryRounds"/> property).</para>
            <para>Range is from 0 to 10 where zero means "automatic rounds".</para>
            </summary>            
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.antennaMask">
            <summary>
            Bitmask of enabled antennas. Mask constants in range <see cref="F:NurApiDotNet.NurApi.ANTENNAMASK_1"/>...<see cref="F:NurApiDotNet.NurApi.ANTENNAMASK_32"/>.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.scanSingleTriggerTimeout">
            <summary>
            Triggered SingleScan scanning timeout in milliseconds.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.inventoryTriggerTimeout">
            <summary>
            <para>Triggered Inventory timeout in milliseconds.</para>
            <para>Range is 0...60000, unit is milliseconds.</para>
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.selectedAntenna">
            <summary>
            Zero based index of selected antenna.
            <para>Values are in range <see cref="F:NurApiDotNet.NurApi.ANTENNAID_1"/>...<see cref="F:NurApiDotNet.NurApi.ANTENNAID_32"/>.</para>
            <para>Use value <see cref="F:NurApiDotNet.NurApi.ANTENNAID_AUTOSELECT"/> to make the module automativally select the antenna.</para>
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.opFlags">
            <summary>
            Operation flags.
            <para>Enable hop events: <see cref="F:NurApiDotNet.NurApi.OPFLAGS_EN_HOPEVENTS"/></para>
            <para>Enable "zero tags found" notification during inventory streams: <see cref="F:NurApiDotNet.NurApi.OPFLAGS_INVSTREAM_ZEROS"/></para>
            <para>The value can be either of the above flags, none or both. OR-operation can be used as these flags are bits.</para>
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.inventoryTarget">
            <summary>
            Inventory target, select whether tags whose inventoried flag is: 0 = A, 1 = B, 2 = A or B (dual target).
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.inventoryEpcLength">
            <summary>
            <para>The exact EPC reception length in bytes.</para>
            <para>Use even values in range 2...62 or -1 for "accept all".</para>
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.readRssiFilter">
            <summary>
            <para>RSSI Filters used for read operations.</para>
            <para>Required module firmware 2.5-A or later or NUR05WL2 module.</para>
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.writeRssiFilter">
            <summary>
            <para>RSSI Filters used for write operations.</para>
            <para>Required module firmware 2.5-A or later or NUR05WL2 module.</para>
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.inventoryRssiFilter">
            <summary>
            <para>RSSI Filters used for inventory operations.</para>
            <para>Required module firmware 2.5-A or later or NUR05WL2 module.</para>
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.readTO">
            <summary>
            Tag read timeout in ms.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.writeTO">
            <summary>
            Tag write timeout in ms.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.lockTO">
            <summary>
            Tag lock timeout in ms.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.killTO">
            <summary>
            Tag kill timeout in ms.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.periodSetup">
            <summary>
            <para>Defines how the periodic auto-inventory power saving is configured.</para>
            <para>When in use, reader will be power save mode while no tags in view.</para>
            <para>Settings: <see cref="F:NurApiDotNet.NurApi.NUR_AUTOPER_OFF"/>, <see cref="F:NurApiDotNet.NurApi.NUR_AUTOPER_25"/>, <see cref="F:NurApiDotNet.NurApi.NUR_AUTOPER_33"/> and <see cref="F:NurApiDotNet.NurApi.NUR_AUTOPER_50"/>.</para>
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.perAntPower">
            <summary>
            DEPRECATED! Per antenna specific power levels. Use antPowerEx instead.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.perAntOffset">
            <summary>
            DEPRECATED! Per antenna specific power levels. Use antPowerEx instead.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.antennaMaskEx">
            <summary>
            Extended version of the antenna mask.            
            <remarks>Supported in L2 module from FW version 5.0-A onwards.</remarks>
            <remarks>Recommedation is to use only this with L2 from FW version 5.0-A onwards.</remarks>
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.autotune">
            <summary>
            Runtime autotuning setup, setup: <see cref="T:NurApiDotNet.NurApi.AutotuneSetup"/>
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.antPowerEx">
            <summary>
            Extended version per antenna power settings.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.rxSensitivity">
            <summary>
            Receiver sensitivity: <see cref="F:NurApiDotNet.NurApi.RXSENS_LOW"/>, <see cref="F:NurApiDotNet.NurApi.RXSENS_NOMINAL"/> and <see cref="F:NurApiDotNet.NurApi.RXSENS_HIGH"/>.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.rfProfile">
            <summary>
            RF Profile: <see cref="F:NurApiDotNet.NurApi.RFPROFILE_ROBUST"/>, <see cref="F:NurApiDotNet.NurApi.RFPROFILE_NOMINAL"/> and <see cref="F:NurApiDotNet.NurApi.RFPROFILE_HIGHSPEED"/>.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleSetup.toSleepTime">
            <summary>
            Time before module enters deep sleep in milliseconds. 
            0 disables deep sleep. 
            NOTE: When module is in deep sleep there might be slight (100ms) delay before command is executed.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.ModuleSetup.ReturnedFlags">
            <summary>
            ModuleSetup flags returned when last fetched from NUR.
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.ModuleVersions">
            <summary>
            Hold information about the module version.<br/>
            See <see cref="M:NurApiDotNet.NurApi.GetVersions"/>
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleVersions.isApplicationMode">
            <summary>
            True if the reply was received when running in application mode.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.ModuleVersions.applicationVersion">
            <summary>
            Get application version
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.ModuleVersions.bootloaderVersion">
            <summary>
            Get bootloader version
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleVersions.mode">
            <summary>
            A = application (primary version is application version)
            B = bootloader (primary version is bootloader version)
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleVersions.primaryVersion">
            <summary>
            Primary version.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ModuleVersions.secondaryVersion">
            <summary>
            Secondary version.
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.PermalockResp">
            <summary>
            Response to block permalock status read.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.PermalockResp.bank">
            <summary>
            Read from bank.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.PermalockResp.from">
            <summary>
            Starting from this address.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.PermalockResp.nBlocks">
            <summary>
            Number of mask words in response.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.PermalockResp.lockStates">
            <summary>
            Lock states. Each word represents the lock state of 16 blocks.
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.ReaderInfo">
            <summary>
            Holds information about connected module.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ReaderInfo.serial">
            <summary>
            Module serial number.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ReaderInfo.altSerial">
            <summary>
            Alternative manufacturer serial number.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ReaderInfo.name">
            <summary>
            Module name.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ReaderInfo.fccId">
            <summary>
            FCC ID
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ReaderInfo.hwVersion">
            <summary>
            Hardware version
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ReaderInfo.swVerMajor">
            <summary>
            Software version major number
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ReaderInfo.swVerMinor">
            <summary>
            Software version minor number
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ReaderInfo.devBuild">
            <summary>
            Software development build identifier.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ReaderInfo.numGpio">
            <summary>
            Number of GPIO's available on module.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ReaderInfo.numSensors">
            <summary>
            Number of sensors available on module.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ReaderInfo.numRegions">
            <summary>
            Number of regions available on module.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ReaderInfo.numAntennas">
            <summary>
            Number of enabled antennas on module.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ReaderInfo.maxAntennas">
            <summary>
            Number of maximum antennas on module.
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.ReaderInfo.GetVersionString">
            <summary>
            Get version string
            </summary>
            <returns>Current version of reader</returns>
        </member>
        <member name="T:NurApiDotNet.NurApi.ReflectedPowerInfo">
            <summary>
            Reflected power data. See <see cref="M:NurApiDotNet.NurApi.GetReflectedPower"/>
            </summary>
            <seealso cref="M:NurApiDotNet.NurApi.GetReflectedPower"/>
        </member>
        <member name="F:NurApiDotNet.NurApi.ReflectedPowerInfo.iPart">
            <summary>
            i Part ***
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ReflectedPowerInfo.qPart">
            <summary>
            q Part ***
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ReflectedPowerInfo.div">
            <summary>
            div ***
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ReflectedPowerInfo.freq">
            <summary>
            Frequency in kHz or 0 if not available
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.ReflectedPowerInfo.dBm">
            <summary>
            Get reflected power as dBm
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.RegionInfo">
            <summary>
            Holds information about specific region
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.RegionInfo.name">
            <summary>
            Name of region
            </summary>		
        </member>
        <member name="F:NurApiDotNet.NurApi.RegionInfo.regionId">
            <summary>
            Region ID see <see cref="P:NurApiDotNet.NurApi.Region"/> property
            </summary>			
        </member>
        <member name="F:NurApiDotNet.NurApi.RegionInfo.baseFrequency">
            <summary>
            RF base frequency in kHz.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.RegionInfo.channelSpacing">
            <summary>
            RF channel spacing in kHz.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.RegionInfo.channelCount">
            <summary>
            RF channel count.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.RegionInfo.channelTime">
            <summary>
            Maximum RF channel on time.
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.RssiFilter">
            <summary>
            Tag RSSI filter.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.RssiFilter.min">
            <summary>
            Minimum accepted RSSI in dBm. Use 0 to disable filtering.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.RssiFilter.max">
            <summary>
            Maximum accepted RSSI in dBm. Use 0 to disable filtering.
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.RssiFilter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.RssiFilter.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="min">Minimum accepted RSSI in dBm. Use 0 to disable filtering.</param>
            <param name="max">Maximum accepted RSSI in dBm.Use 0 to disable filtering</param>
        </member>
        <member name="T:NurApiDotNet.NurApi.ScanChannelInfo">
            <summary>
            Scannel scan data. See <see cref="M:NurApiDotNet.NurApi.ScanChannels"/>
            </summary>
            <seealso cref="M:NurApiDotNet.NurApi.ScanChannels"/>
        </member>
        <member name="F:NurApiDotNet.NurApi.ScanChannelInfo.freq">
            <summary>
            Frequency used
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ScanChannelInfo.rssi">
            <summary>
            RSSI (Received Signal Strength Indicator) value
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.ScanChannelInfo.rawiq">
            <summary>
            Raw IQ
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.SensorConfig">
            <summary>
            Sensor configuration structure see <see cref="M:NurApiDotNet.NurApi.GetSensorConfig"/>, <see cref="M:NurApiDotNet.NurApi.SetSensorConfig(NurApiDotNet.NurApi.SensorConfig)"/>
            </summary>
            <seealso cref="M:NurApiDotNet.NurApi.GetSensorConfig"/>
            <seealso cref="M:NurApiDotNet.NurApi.SetSensorConfig(NurApiDotNet.NurApi.SensorConfig)"/>
        </member>
        <member name="F:NurApiDotNet.NurApi.SensorConfig.tapEnabled">
            <summary>
            Tap sensor enable
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SensorConfig.tapAction">
            <summary>
            Action for tap sensor.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SensorConfig.lightEnabled">
            <summary>
            Enable Light sensor
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SensorConfig.lightAction">
            <summary>
            Action for light sensor.
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.SensorConfig.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.SystemInfo">
            <summary>
            Holds information about NUR module system.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SystemInfo.blAddr">
            <summary>
            Bootloader address.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SystemInfo.appAddr">
            <summary>
            Application base address.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SystemInfo.vectorBase">
            <summary>
            Interrupt vector base.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SystemInfo.appSzWord">
            <summary>
            Application size.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SystemInfo.appCRCWord">
            <summary>
            Application CRC.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SystemInfo.szFlash">
            <summary>
            Flash memory size.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SystemInfo.szSram">
            <summary>
            Internal SRAM size.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SystemInfo.stackTop">
            <summary>
            Top of stack.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SystemInfo.nvSetAddr">
            <summary>
            Non-vilatile settings' address.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SystemInfo.szNvSettings">
            <summary>
            Size reserved for non-volatile settings.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SystemInfo.mainStackUsage">
            <summary>
            Stack usage when entered main().
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SystemInfo.szUsedSram">
            <summary>
            Used SRAM.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.SystemInfo.szTagBuffer">
            <summary>
            Tag buffer size in bytes.
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.TagDataEx">
            <summary>
            Contains single tag inventoried information.
            </summary>    
            <remarks>
            Supported by the L2 (NUR05WL2) module.
            Used in combined inventory + read.
            <seealso cref="M:NurApiDotNet.NurApi.GetInventoryRead"/>
            <seealso cref="T:NurApiDotNet.NurApi.IrInformation"/>
            </remarks>
        </member>
        <member name="F:NurApiDotNet.NurApi.TagDataEx.timestamp">
            <summary>
            Timestamp when tag was found in milliseconds; Only valid when meta data is fetched.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TagDataEx.rssi">
            <summary>
            Tag RSSI; Only valid when meta data is fetched.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TagDataEx.scaledRssi">
            <summary>
            Tag RSSI scaled to 0% - 100%; Only valid when meta data is fetched. 
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TagDataEx.freq">
            <summary>
            Frequency in kHz where tag was found; Only valid when meta data is fetched.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TagDataEx.pc">
            <summary>
            Tag PC word; Only valid when meta data is fetched.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TagDataEx.channel">
            <summary>
            Channel index where tag was found; Only valid when meta data is fetched.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TagDataEx.antennaId">
            <summary>
            Antenna ID where tag was found; Only valid when meta data is fetched.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TagDataEx.epcLen">
            <summary>
            Number of bytes stored in epc field
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TagDataEx.epc">
            <summary>
            Tag EPC data. 
            Multiplied by two since the EPC may be appended with inventory + read data.
            </summary>            			
        </member>
        <member name="F:NurApiDotNet.NurApi.TagDataEx.dataLen">
            <summary>
            Number of bytes stored in inventory read data field.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TagDataEx.irData">
            <summary>
            Tag inventory + read data. 
            </summary>            			
        </member>
        <member name="F:NurApiDotNet.NurApi.TagDataEx.xpc_w1">
            <summary>
            The possibly present XPC_W1.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TagDataEx.xpc_w2">
            <summary>
            The possible present XPC_W2.
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.TraceTagData">
            <summary>
            Trace tag data after <see cref="E:NurApiDotNet.NurApi.TraceTagEvent"/> event
            </summary>		
        </member>
        <member name="F:NurApiDotNet.NurApi.TraceTagData.rssi">
            <summary>
            Tag RSSI, -127 if tag could not be found.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TraceTagData.scaledRssi">
            <summary>
            Tag RSSI scaled to 0% - 100%.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TraceTagData.antennaID">
            <summary>
            Antenna ID where tag was found. 
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TraceTagData.epcLen">
            <summary>
            Number of bytes stored in epc field. 
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.TraceTagData.epc">
            <summary>
            Traced tag EPC data.
            </summary>	      		
        </member>
        <member name="F:NurApiDotNet.NurApi.TraceTagData.epcStr">
            <summary>
            EPC as string
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.V2ReadBufferResp">
            <summary>
            Response to the Gen2 version 2 ReadBuffer command.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.V2ReadBufferResp.bitLength">
            <summary>
            Number of valid bits in the result.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.V2ReadBufferResp.buffer">
            <summary>
            The tag's reply, bits are "left aligned".
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApi.Tag">
            <summary>
            Class of tag
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.Tag.hApi">
            <summary>Owner NurApi handle </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.Tag.timestamp">
            <summary>Timestamp from inventory start in milliseconds when tag was found</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.Tag.rssi">
            <summary>RSSI (Received Signal Strength Indicator) value</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.Tag.scaledRssi">
            <summary>Scaled RSSI 0-100 %</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.Tag.frequency">
            <summary>Frequency where tag found in khz</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.Tag.pc">
            <summary>Tag's PC (Protocol Control) word</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.Tag.channel">
            <summary>Index of the frequency channel in current hop table</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.Tag.antennaId">
            <summary>Zero based Antenna ID</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.Tag.xpc_w1">
            <summary>XPC word 1 if stripped from EPC response.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.Tag.xpc_w2">
            <summary>XPC word 2 if stripped from EPC response.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.Tag.FirstSeenUtc">
            <summary>
            When tag is first seen in TagStorage
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.Tag.LastSeenUtc">
            <summary>
            When tag is last updated in TagStorage
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.Tag.UpdateCount">
            <summary>
            How many tag has been updated in TagStorage
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.Tag.IsUpdated">
            <summary>
            True if tag is updated in TagStorage since last read of this property. Reading this property sets this value to false.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.Tag.IsAdded">
            <summary>
            True if tag is added in TagStorage since last read of this property. Reading this property sets this value to false.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.Tag.epc">
            <summary>
            EPC data
            </summary>
            <value>Byte array representation of the tag's EPC.</value>
        </member>
        <member name="P:NurApiDotNet.NurApi.Tag.irData">
            <summary>
            Associated inventory + read data.
            </summary>
            <value>Byte array representation of the associated inventory + read data if present.</value>
        </member>
        <member name="P:NurApiDotNet.NurApi.Tag.PhysicalAntenna">
            <summary>
            The physical antenna's name from where the last best RSSI was detected.
            </summary>
            <value>Physical antenna's name.</value>
        </member>
        <member name="P:NurApiDotNet.NurApi.Tag.userData">
            <summary>
            OBSOLETE! Use UserData instead.
            User defined variable data
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.Tag.UserData">
            <summary>
            User defined variable data
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.#ctor">
            <summary>Contructor</summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.#ctor(NurApiDotNet.NurApi)">
            <summary>
            Constructor
            </summary>
            <param name="api">NurApi handle</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.#ctor(NurApiDotNet.NurApi.Tag)">
            <summary>
            Copy Constructor
            </summary>
            <param name="src">Source Tag</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.#ctor(NurApiDotNet.NurApi,NurApiDotNet.NurApi.TagData)">
            <summary>
            Constructor
            </summary>
            <param name="api">NurApi handle</param>
            <param name="tData">Source tag data as <see cref="T:NurApiDotNet.NurApi.TagData"/></param>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.#ctor(NurApiDotNet.NurApi,NurApiDotNet.NurApi.TagData@)">
            <summary>
            Constructor
            </summary>
            <param name="api">NurApi handle</param>
            <param name="tData">Source tag data as <see cref="T:NurApiDotNet.NurApi.TagData"/></param>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.#ctor(NurApiDotNet.NurApi,NurApiDotNet.NurApi.TagDataEx)">
            <summary>
            Constructor for inventory+read.
            </summary>
            <param name="api">NurApi handle</param>
            <param name="eData">Source tag data as <see cref="T:NurApiDotNet.NurApi.TagDataEx"/></param>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.#ctor(NurApiDotNet.NurApi,NurApiDotNet.NurApi.TagDataEx@)">
            <summary>
            Constructor for inventory+read.
            </summary>
            <param name="api">NurApi handle</param>
            <param name="dataEx">Source tag data as <see cref="T:NurApiDotNet.NurApi.TagDataEx"/></param>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.CopyTagValues(NurApiDotNet.NurApi.Tag)">
            <summary>
            Copy values from other Tag
            </summary>
            <param name="src">Values to copy from</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.Clone">
            <summary>
            Clone this object
            </summary>
            <returns>Deep copy of Tag object</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.op_Equality(NurApiDotNet.NurApi.Tag,NurApiDotNet.NurApi.Tag)">
            <summary>
            Compare two tag objects.             
            </summary>
            <param name="left">Tag object left</param>
            <param name="right">Tag object right</param>
            <returns>True, if left and right tag contains same EPC, false otherwise</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.op_Inequality(NurApiDotNet.NurApi.Tag,NurApiDotNet.NurApi.Tag)">
            <summary>
            Compare two tag objects.  
            </summary>
            <param name="left">Tag object left</param>
            <param name="right">Tag object right</param>
            <returns>False, if left and right tag contains same EPC, true otherwise</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.Equals(System.Object)">
            <summary>
            Compare tag object
            </summary>
            <param name="obj">Tag object to compare</param>
            <returns>True, if this tag contains same EPC, false otherwise</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.ToString">
            <summary>
            Converts EPC value to formatted hex string
            </summary>
            <returns>Formatted hex EPC string</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.GetHashCode">
            <summary>
            Get hash code from EPC string
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.IsNull">
            <summary>
            Detect if this tag has not been initialized correctly
            </summary>
            <returns>true if tag's content is null</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.Compare(NurApiDotNet.NurApi.Tag)">
            <summary>
            Compare tags
            </summary>
            <param name="t">tag object to compare</param>
            <returns>true, if tags are same</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.GetEpcString">
            <summary>
            Get EPC as formatted hex string
            </summary>
            <returns>EPC code as Hex string</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.GetDataString">
            <summary>
            Converts the associated inventory+read data into HEX string if available.
            </summary>
            <returns>Formatted hex data string</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.ReadTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Int32)">
            <summary>
            Read tag's memory.
            </summary>
            <param name="passwd">Password to use if required.</param>
            <param name="secured">Set true if secured tag</param>
            <param name="rdBank">Memory bank to read from.<para></para><para></para>
            Password/reserved memory: <see cref="F:NurApiDotNet.NurApi.BANK_PASSWD"/><para></para>
            EPC memory: <see cref="F:NurApiDotNet.NurApi.BANK_EPC"/><para></para>
            TID memory <see cref="F:NurApiDotNet.NurApi.BANK_TID"/><para></para>
            User memory: <see cref="F:NurApiDotNet.NurApi.BANK_USER"/><para></para>
            </param>
            <param name="rdAddress"><b>Word</b> address for read operation</param>
            <param name="rdByteCount">Number of bytes to read. This must <b>divisible by two</b>.</param>
            <returns>Array of bytes from tag memory</returns>
            <example>
            Example shows how to read 32 words from user memory. The tag has been retrieved from the tag storage.<para></para><para></para>
            The tag 'aTag' has been retrieved from the tag storage after an inventory (see example in <see cref="M:NurApiDotNet.NurApi.Inventory(System.Int32,System.Int32,System.Int32)"/>).<para></para><para></para>
            <code lang="C#">
            int rdByteCount;
            byte []userMemory;
            
            rdByteCount = 32 * 2;	// Make byte length.			
            
            // The tag is internally selected by its EPC contents.
            // Password is not used in this read.
            try
            {
            	[]userMemory = aTag.ReadTag(0, false, NurApi.BANK_USER, 0, rdByteCount);
            }
            catch (NurApiException e)
            {
            	HandleReadError(e.error);
            }
            </code>
            </example>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.WriteTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data to tag's memory
            </summary>
            <param name="passwd">Password</param>
            <param name="secured">Set true if secured tag</param>
            <param name="wrBank">Memory bank to write to.<para></para><para></para>
            Password/reserved memory: <see cref="F:NurApiDotNet.NurApi.BANK_PASSWD"/><para></para>
            EPC memory: <see cref="F:NurApiDotNet.NurApi.BANK_EPC"/><para></para>
            TID memory <see cref="F:NurApiDotNet.NurApi.BANK_TID"/><para></para>
            User memory: <see cref="F:NurApiDotNet.NurApi.BANK_USER"/><para></para>
            </param>
            <param name="wrAddress"><b>Word</b> address for write operation</param>
            <param name="wrBuffer">Write buffer</param>
            <param name="wrBufferPos">Position of write buffer</param>
            <param name="wrBufferLen">Bytes to write</param>			
            <remarks>
            For an example, see <see cref="M:NurApiDotNet.NurApi.Tag.WriteTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[])"/>.
            </remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.WriteTag(System.UInt32,System.Boolean,System.Byte,System.UInt32,System.Byte[])">
            <summary>
            Write data to tag's memory
            </summary>
            <param name="passwd">Password</param>
            <param name="secured">Set true if secured tag</param>
            <param name="wrBank">Memory bank to write to.<para></para><para></para>
            Password/reserved memory: <see cref="F:NurApiDotNet.NurApi.BANK_PASSWD"/><para></para>
            EPC memory: <see cref="F:NurApiDotNet.NurApi.BANK_EPC"/><para></para>
            TID memory <see cref="F:NurApiDotNet.NurApi.BANK_TID"/><para></para>
            User memory: <see cref="F:NurApiDotNet.NurApi.BANK_USER"/><para></para>
            </param>
            <param name="wrAddress"><b>Word</b> address for write operation</param>
            <param name="wrBuffer">Write buffer</param>
            <example>
            The example shows how to write a kill password bytes to a tag.<para></para>
            In the tag the password memory has been locked so that the reading and writeing require a pssword.<para></para>
            The password is given to the function as the password bank is known to be locked in whole.<para></para>
            For lock operations, see also <see cref="M:NurApiDotNet.NurApi.Tag.SetLock(System.UInt32,System.UInt32,System.UInt32)"/>, 
            <see cref="M:NurApiDotNet.NurApi.SetLock(System.UInt32,System.Byte,System.UInt32,System.Byte[],System.UInt32,System.UInt32)"/> and <para></para>
            <see cref="M:NurApiDotNet.NurApi.SetLockByEPC(System.UInt32,System.Byte[],System.UInt32,System.UInt32)"/>.
            'aTag' is the tag that has been retrieved from the tag storage after an inventory (see example in <see cref="M:NurApiDotNet.NurApi.Inventory(System.Int32,System.Int32,System.Int32)"/>).<para></para><para></para>
            <code lang="C#">
            void WriteNewKillPassword(uint killPwd, uint accessPwd)
            {
            	byte []killPwdBytes;		// Final bytes to write
            	
            	// Make byte array...
            	killPwdBytes = BitConverter.GetBytes(killPwd);
            	// ...and reverse: the tag's notation is big-endian.
            	System.Array.Reverse(killPwdBytes);
            
            	try
            	{
            		aTag.WriteTag(accessPwd, true, NurApi.BANK_PASSWD, 0, killPwdBytes);
            	}
            	catch (NurApiException e)
            	{
            		HandleKillPwdWriteError(e.error);
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.WriteEPC(System.UInt32,System.Boolean,System.Byte[])">
            <summary>
            Write new EPC to tag.
            </summary>
            <param name="passwd">Password for secured operations.</param>
            <param name="secured">TRUE if operation is secured, otherwise FALSE.</param>
            <param name="newEpcBuffer">New EPC to write.</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.Inventory(System.Int32,System.Int32,System.Int32)">
            <summary>
            Start inventory for current tag. Reader is performing inventory select for tag's EPC. If not found, exception thrown.
            </summary>
            <param name="rounds">Full query rounds to perform in inventory. Range 0 - 10, where 0 means automatic rounds selection</param>
            <param name="Q">Query Q parameter. Range 0 - 15, where value 0 means automatic Q selection</param>
            <param name="session">Query session parameter. Range 0 - 3</param>
            <remarks>Can be used to update the various values associated with the tag: RSSI, timestamp etc.</remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.Inventory">
            <summary>
            Performs inventory select for this tag using 2 rounds Q=1 in session 0.
            Can be used to update e.g. the RSSI value of the tag.
            </summary>
            <seealso cref="M:NurApiDotNet.NurApi.Tag.Inventory(System.Int32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.TraceTag(System.Int32)">
            <summary>
            Trace this tag by its EPC contents.
            </summary>
            <param name="flags">0 for normal operation i.e. the trace is run once and the reponse <see cref="T:NurApiDotNet.NurApi.TraceTagData"/> is returned immediately.<para></para><para></para>
            Continuous operation flags: <see cref="F:NurApiDotNet.NurApi.TRACETAG_START_CONTINUOUS"/>, <see cref="F:NurApiDotNet.NurApi.TRACETAG_STOP_CONTINUOUS"/></param>
            <returns>Data from traced tag as <see cref="T:NurApiDotNet.NurApi.TraceTagData"/>. Only valid for normal operation.</returns>
            <seealso cref="E:NurApiDotNet.NurApi.TraceTagEvent"/>
            <example>
            <para></para>Adding a trace event handler:<para></para>
            <code lang="C#">hNur.TraceTagEvent += new EventHandler&lt;NurApi.TraceTagEventArgs&gt;(hNur_TraceTagEvent);</code>
            Example of a simple trace event handler:<para></para>
            <code source="DocExample\TraceEventHandler.cs" lang="C#"></code>
            <para></para>Trace tag at index. This is merely an example and as such does not really reflect real world situation; usually the tag to be traced is retrieved from some background system.<para></para>
            For generic trace in the API, see <see cref="M:NurApiDotNet.NurApi.TraceTagByEPC(System.Byte[],System.Int32)"/> or <see cref="M:NurApiDotNet.NurApi.TraceTag(System.Byte,System.UInt32,System.Int32,System.Byte[],System.Int32)"/>.<para></para>
            <code lang="C#">
            	try
            	{
            		aTag.TraceTag(NurApi.TRACETAG_START_CONTINUOUS);
            	}
            	catch (NurApiException e)
            	{
            		HandleTraceStartError(e.error);
            	}
            	
            	// If OK, the trace events will now start to occur in the receiving control.
            </code>
            </example>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.SetAccessPassword(System.UInt32,System.Boolean,System.UInt32)">
            <summary>
            Set access password of tag.
            </summary>
            <param name="passwd">Current access password</param>
            <param name="secured">Set true if secured</param>
            <param name="newPasswd">New access password to write</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.GetAccessPassword(System.UInt32,System.Boolean)">
            <summary>
            Get Access password of tag
            </summary>
            <param name="passwd">Current access password</param>
            <param name="secured">Set true if secured</param>
            <returns>Access password</returns>
            <example>
            A tag's ('aTag') password memory has been locked with password 0xA5A5FEFE.<para></para>
            Here's how to check that the locking was OK by reading the access password back :<para></para>
            <code lang="C#">
            bool CheckThisPassword(NurApi.Tag aTag, uint accessPwd)
            {
            	uint accessPwd = 0xA5A5FEFE;
            
            	try
            	{
            		// The value needs not to be checked; a successfule access will tell that it is OK.
            		aTag.GetAccessPassword(accessPwd, true);
            		return true;
            	}
            	catch { /* More error handling here if necessary. */ }
            	
            	return false;
            }
            </code>
            </example>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.SetKillPassword(System.UInt32,System.Boolean,System.UInt32)">
            <summary>
            Set new kill password to tag. The tag is selected by its EPC contents.
            </summary>
            <param name="passwd">Current access password</param>
            <param name="secured">Set true if secured</param>
            <param name="newPasswd">New kill password</param>
            <example>
            Assuming the tag's password is protected in whole by the access password, here's how to write a new kill password:<para></para>
            <code lang="C#">
            // Note: needs to have try-catch.
            void WriteNewKillPassword(NurApi.Tag aTag, uint accessPwd, uint newKillPwd)
            {
            	// Can throw NurApiException.
            	aTag.SetKillPassword(accessPwd, true, newKillPwd);
            }
            </code>
            </example>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.GetKillPassword(System.UInt32,System.Boolean)">
            <summary>
            Get kill password from tag
            </summary>
            <param name="passwd">Current access password</param>
            <param name="secured">Set true if secured</param>
            <returns>Kill password</returns>
            <example>
            Assuming the tag's password is protected in whole by the access password, here's how to read the current kill password:<para></para>
            <code lang="C#">
            // Note: needs to have try-catch.
            uint GetCurrentKillPassword(NurApi.Tag aTag, uint accessPwd)
            {
            	// Can throw NurApiException.
            	return aTag.GetKillPassword(accessPwd, true);
            }
            </code>
            </example>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.SetLock(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Set memory lock for tag
            </summary>
            <param name="passwd">Password for secured operations. Password is always needed.</param>
            <param name="memoryMask">Which memories to lock. Memory mask flags: <see cref="F:NurApiDotNet.NurApi.LOCK_USERMEM"/>, <see cref="F:NurApiDotNet.NurApi.LOCK_TIDMEM"/>, <see cref="F:NurApiDotNet.NurApi.LOCK_EPCMEM"/>, <see cref="F:NurApiDotNet.NurApi.LOCK_ACCESSPWD"/>, <see cref="F:NurApiDotNet.NurApi.LOCK_KILLPWD"/></param>
            <param name="action">Action to perform for memories. Memory lock action: <see cref="F:NurApiDotNet.NurApi.LOCK_OPEN"/>, <see cref="F:NurApiDotNet.NurApi.LOCK_PERMAWRITE"/>, <see cref="F:NurApiDotNet.NurApi.LOCK_SECURED"/>, <see cref="F:NurApiDotNet.NurApi.LOCK_PERMALOCK"/></param>
            <example>
            Note: prior to locking, the access password needs to beset with e.g. <see cref="M:NurApiDotNet.NurApi.Tag.SetAccessPassword(System.UInt32,System.Boolean,System.UInt32)"/>.<para></para>
            Example of locking user memory only for writing:<para></para>
            <code lang="C#">
            // Use in try-catch, may throw NurApiException.
            void ProtectUserMemory(NurApi.Tag aTag, uint password)
            {
            	aTag.SetLock(password, NurApi.LOCK_USERMEM, NurApi.LOCK_SECURED);
            }
            </code>
            Example of locking the whole password memory for reading and writing, the tag has not been programmed with a password yet:<para></para>
            <code lang="C#">
            // Use in try-catch, may throw NurApiException.
            void ProtectPasswordMemory(NurApi.Tag aTag, uint password)
            {
            	// Write...
            	aTag.SetAccessPassword(0, false, password);
            	// ...and lock.
            	aTag.SetLock(password, NurApi.LOCK_ACCESSPWD | NurApi.LOCK_KILLPWD, NurApi.LOCK_SECURED);
            }
            </code>
            </example>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.OpenStateLock(System.UInt32,System.UInt32)">
            <summary>
            Set tag lock in open state i.e. without password access.
            </summary>
            <param name="memoryMask">Which memories to lock. See flags: <see cref="F:NurApiDotNet.NurApi.LOCK_OPEN"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_SECURED"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_PERMAWRITE"/>  <see cref="F:NurApiDotNet.NurApi.LOCK_PERMALOCK"/></param>
            <param name="action">Which memories to lock. Memory mask flags: <see cref="F:NurApiDotNet.NurApi.LOCK_USERMEM"/>, <see cref="F:NurApiDotNet.NurApi.LOCK_TIDMEM"/>, <see cref="F:NurApiDotNet.NurApi.LOCK_EPCMEM"/>, <see cref="F:NurApiDotNet.NurApi.LOCK_ACCESSPWD"/>, <see cref="F:NurApiDotNet.NurApi.LOCK_KILLPWD"/></param>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.OpenStateLockRaw(System.UInt32,System.UInt32)">
            <summary>
            Set tag lock in open state i.e. without password access using raw mask and action data.
            </summary>
            <param name="lockMask">Standard defined lock payload bits 19-10, starting from bit 0.</param>
            <param name="lockAction">Standard defined lock payload bits 9-0, starting from bit 0.</param>
            <remarks>Lock mask and action parameter are in raw format defined in UHF C1G2 standard section "6.3.2.11.3.5 Lock (mandatory).</remarks>
            <seealso cref="M:NurApiDotNet.NurApi.OpenStateLockByEPC(System.Byte[],System.UInt32,System.UInt32)"/>
            <seealso cref="M:NurApiDotNet.NurApi.Tag.OpenStateLockRaw(System.UInt32,System.UInt32)"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_OPEN"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_SECURED"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_PERMAWRITE"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_PERMALOCK"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_USERMEM"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_TIDMEM"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_EPCMEM"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_ACCESSPWD"/>
            <seealso cref="F:NurApiDotNet.NurApi.LOCK_KILLPWD"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.KillTag(System.UInt32)">
            <summary>
            Kill tag
            </summary>
            <param name="passwd">Current kill password</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.BlockErase(System.Byte,System.UInt32,System.Byte)">
            <summary>
            Block erase.
            </summary>
            <param name="erBank">Bank where the <paramref name="erAddress"/> is located in.
            <list type="table"> <listheader><term>Value</term><description>See</description></listheader>			
            <item><term><see cref="F:NurApiDotNet.NurApi.BANK_PASSWD"/></term><description>Password/reserded memory</description></item>
            <item><term><see cref="F:NurApiDotNet.NurApi.BANK_EPC"/></term><description>EPC memory</description></item>
            <item><term><see cref="F:NurApiDotNet.NurApi.BANK_TID"/></term><description>TID memory</description></item>
            <item><term><see cref="F:NurApiDotNet.NurApi.BANK_USER"/></term><description>User memory</description></item>
            </list></param>
            <param name="erAddress">Word address for the first word to erase.</param>
            <param name="erWords">Number of words to erase starting from <b>erAddress</b>.</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.BlockErase(System.UInt32,System.Byte,System.UInt32,System.Byte)">
            <summary>
            Secured block erase.
            </summary>
            <param name="passwd">Password for erase.</param>
            <param name="erBank">Bank where the block(s) are located in.</param>
            <list type="table"> <listheader><term>Value</term><description>See</description></listheader>			
            <item><term><see cref="F:NurApiDotNet.NurApi.BANK_PASSWD"/></term><description>Password/reserded memory</description></item>
            <item><term><see cref="F:NurApiDotNet.NurApi.BANK_EPC"/></term><description>EPC memory</description></item>
            <item><term><see cref="F:NurApiDotNet.NurApi.BANK_TID"/></term><description>TID memory</description></item>
            <item><term><see cref="F:NurApiDotNet.NurApi.BANK_USER"/></term><description>User memory</description></item>
            </list>
            <param name="erAddress">Word address for the first word to erase.</param>
            <param name="erWords">Number of words to erase starting from <b>erAddress</b>.</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.BlockWrite(System.UInt32,System.Byte,System.UInt32,System.Byte[],System.Byte)">
            <summary>
            Write tag using parameterized block write. The write is secured and uses a password.
            The tag is singulated by its EPC.
            </summary>
            <param name="passwd">Password to for write.</param>
            <param name="bank">Bank to write to.</param>
            <param name="wrAddress">Word address of the write.</param>
            <param name="wrData">Data to write. Size must be aligned by 2; if <b>blSize</b> is non-zero then data length also be divisible by <paramref name="blSize"/>.</param>
            <param name="blSize">A single block's size in <b>16-bit words</b>.</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.BlockWrite(System.Byte,System.UInt32,System.Byte[],System.Byte)">
            <summary>
            Write tag using parameterized block write. The write is non secured and does not use a password.
            The tag is singulated by its EPC.
            </summary>
            <param name="bank">Bank to write to.</param>
            <param name="wrAddress">Word address of the write.</param>
            <param name="wrData">Data to write. Size must be aligned by 2; if <b>blSize</b> is non-zero then data length also be divisible by <paramref name="blSize"/>.</param>
            <param name="blSize">A single block's size in <b>16-bit words</b>.</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.ReadPermalock(System.UInt32,System.Boolean,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Read block permalock statuses from this tag.
            </summary>
            <param name="password">Password parameter for access.</param>
            <param name="secured">If true then access is done with the password</param>
            <param name="bank">Bank range is 1...3. </param>
            <param name="addr">This is the first address of the first of 16-block chunk to read (0 -> 0, 1 -> 16, ...). </param>
            <param name="range">Number of 16-block chunks to read.</param>
            <returns>Return an array of ushort (unsigned 16-bit) values representing the lock bits.</returns>
            <remarks>
            <para>Each return word represents 16 block lock states i.e. on bit corresponds to a block.</para>
            <para>The bit 0 represent block at address, bit 1 at address +1 and so on.</para>
            </remarks>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.BlockPermalock(System.UInt32,System.Boolean,System.UInt32,System.UInt32,System.UInt32,System.UInt16[])">
            <summary>
            Do BlockPermalock with this tag.
            </summary>
            <param name="password">Password parameter for access.</param>
            <param name="secured">If true then access is done with the password</param>
            <param name="bank">Bank range is 1...3. </param>
            <param name="addr">This is the first address of the first of 16-block chunk to apply the mask to (0 -> 0, 1 -> 16, ...). </param>
            <param name="range">Number of 16-block chunks to apply the mask to.</param>
            <param name="lockMask">Each word represents on 16-block chunks lock mask as specified by Gen2 specification 1.2.0.</param>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.Gen2v2Untraceable(System.UInt32,NurApiDotNet.UntraceableParam)">
            <summary>
            Perform the Untraceable command.
            </summary>
            <param name="password">Password must be valid; alwas executed in secure state.</param>
            <param name="utrParam">The Untracable command's parameters.</param>
            <seealso cref="T:NurApiDotNet.UntraceableParam"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.Gen2v2Authenticate(NurApiDotNet.NurApi.AuthenticateParam)">
            <summary>
            Perform the Gen2 version 2 authentication command in open state (recommended).
            </summary>
            <param name="authParam">Parameters required for authentication.</param>
            <returns>Returns the authentication response.</returns>
            <seealso cref="T:NurApiDotNet.NurApi.AuthenticateParam"/>
            <seealso cref="T:NurApiDotNet.NurApi.AuthenticateResp"/>
            <seealso cref="T:NurApiDotNet.NurApi.AuthenticateParam"/>
            <seealso cref="T:NurApiDotNet.NurApi.AuthenticateResp"/>
            <seealso cref="M:NurApiDotNet.NurApi.Gen2v2AuthenticateByEPC(System.Byte[],NurApiDotNet.NurApi.AuthenticateParam)"/>
            <seealso cref="M:NurApiDotNet.NurApi.Gen2v2AuthenticateByEPC(System.UInt32,System.Byte[],NurApiDotNet.NurApi.AuthenticateParam)"/>
        </member>
        <member name="M:NurApiDotNet.NurApi.Tag.Gen2v2ReadBuffer(System.Boolean,System.UInt32,System.UInt16,System.UInt16)">
            <summary>
            <para>Gen2 version 2 ReadBuffer command with the tag being selected by its EPC contents.</para>
            <para>This is similar to the regular read command but the read data source is the version 2 tag's internal buffer.</para>
            </summary>
            <param name="secured">Set to true if the tag is accessed with password prior to the read command.</param>
            <param name="password">Password to use in case the tag's access is secured.</param>
            <param name="bitAddress">The bit  address to start the reading from.</param>
            <param name="bitCount">Number of bits to read from the buffer.</param>
            <returns>Returns the structure containing the data and the actual bit length of the data.</returns>
            <seealso cref="T:NurApiDotNet.NurApi.V2ReadBufferResp"/>
            <seealso cref="M:NurApiDotNet.NurApi.Gen2v2ReadBufferByEPC(System.Boolean,System.UInt32,System.Byte[],System.UInt16,System.UInt16)"/>
            <remarks>
            <para>Note that the application is responsible for the bit data handling.</para>
            <para>The bit level understanding is especially required in case where the returned data is not exactly byte (8-bit) aligned.</para>
            </remarks>
        </member>
        <member name="T:NurApiDotNet.NurApi.TagStorage">
            <summary>
            Fast EPC/C# optimized hash based tag data storage class.
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.TagStorage.GetUpdatedTags">
            <summary>
            Get list of updated tags in this storage since last called <see cref="M:NurApiDotNet.NurApi.TagStorage.Clear"/>.
            </summary>
            <remarks>NOTE: TagStorage object must be locked when accessing returned Dictionary</remarks>
            <returns>Dictionary with epc as key and Tag as value</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.TagStorage.GetAddedTags">
            <summary>
            Get list of newly added tags in this storage since last called <see cref="M:NurApiDotNet.NurApi.TagStorage.Clear"/>.
            </summary>
            <remarks>NOTE: TagStorage object must be locked when accessing returned Dictionary</remarks>
            <returns>Dictionary with epc as key and Tag as value</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.TagStorage.Clear">
            <summary>
            Clear tag storage, including added and updated tags list.
            </summary>
        </member>
        <member name="P:NurApiDotNet.NurApi.TagStorage.Count">
            <summary>
            Gets number tags currently stored in storage.
            </summary>
            <value>Read only: returns the tag storage's tag count.</value>
        </member>
        <member name="P:NurApiDotNet.NurApi.TagStorage.Item(System.Int32)">
            <summary>
            Zero based index to get tag
            </summary>
            <param name="i">The index of the tag.</param>
            <returns>Tag at given index if present; otherwise null.</returns>
            <value>The value <paramref name="i"/> needs to be in range 0...<see cref="P:NurApiDotNet.NurApi.TagStorage.Count"/>.</value>
        </member>
        <member name="P:NurApiDotNet.NurApi.TagStorage.Item(System.Byte[])">
            <summary>
            Gets tag by EPC code
            </summary>            
            <param name="epc">The EPC to find.</param>
            <returns>Tag spcified by <paramref name="epc"/> if present; otherwise null.</returns>
            <value>The EPC is a byte array representing the EPC memory contents to look up.</value>
        </member>
        <member name="M:NurApiDotNet.NurApi.TagStorage.TryGetTag(System.Byte[],NurApiDotNet.NurApi.Tag@)">
            <summary>
            Gets tag by EPC code
            </summary>
            <param name="epc">EPC code</param>
            <param name="tag">Associated tag is stored here if found</param>
            <returns>True if associated tag is found in storega, false otherwise.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.TagStorage.GetTag(System.String)">
            <summary>
            Gets tag by EPC code formatted as hex string, where 2 characters represents 1 byte.
            </summary>
            <param name="epcStr">Formatted hex string, where 2 characters represents 1 byte. e.g. hex 0x32 is formatted as "32"</param>
            <returns>Associated tag if found, otherwise null</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.TagStorage.GetTag(System.Byte[])">
            <summary>
            Gets tag by EPC code.
            </summary>
            <param name="epc">Tag's EPC code</param>
            <returns>Associated tag if found, otherwise null</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.TagStorage.HasTag(System.Byte[])">
            <summary>
            Test if tag with this EPC is stored in storage already.
            </summary>
            <param name="epc">Tag's EPC code</param>
            <returns>True if tag is stored already in storage, false otherwise</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.TagStorage.HasTag(System.String)">
            <summary>
            Test if tag with this EPC is stored in storage already.
            </summary>
            <param name="epcStr">Formatted hex string, where 2 characters represents 1 byte. e.g. hex 0x32 is formatted as "32"</param>
            <returns>True if tag is stored already in storage, false otherwise</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.TagStorage.HasTag(NurApiDotNet.NurApi.Tag)">
            <summary>
            Test if tag with same EPC is stored in storage already.
            </summary>
            <param name="tag">Tag to test against</param>
            <returns>True if tag is stored already in storage, false otherwise</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.TagStorage.Copy(NurApiDotNet.NurApi.TagStorage)">
            <summary>
            Copy tags from other TagStorage to this storage.
            Only tags with different EPC are added.
            <remarks>If tag is already found in storage, it's meta data is updated from source tag storage</remarks>
            </summary>
            <param name="srcStorage">Source storage</param>
            <returns>Number of newly added tags</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.TagStorage.AddTag(NurApiDotNet.NurApi.Tag)">
            <summary>
            Add new tag to storage. Tag is added only there's no tag with same EPC already.
            </summary>
            <remarks>If tag is already found in storage, it's meta data is updated from tag</remarks>
            <param name="tag">Tag to add</param>
            <returns>True if tag was added, false otherwise</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.TagStorage.AddTag(NurApiDotNet.NurApi.Tag,NurApiDotNet.NurApi.Tag@)">
            <summary>
            Add / update tag in tag storage
            </summary>
            <remarks>If tag is already found in storage, it's meta data is updated from tag</remarks>
            <param name="tag">Tag to add</param>
            <param name="storedTag">New or updated tag is stored here</param>
            <returns>True if tag was added, false if tag was updated.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.TagStorage.AddOrUpdateTag(NurApiDotNet.NurApi,NurApiDotNet.NurApi.TagDataEx,NurApiDotNet.NurApi.Tag@)">
            <summary>
            Add / update nur protocol tag in tag storage
            </summary>
            <remarks>If tag is already found in storage, it's meta data is updated from tag</remarks>
            <param name="api">Owner</param>
            <param name="tagData">Nur protocol tag data</param>
            <param name="storedTag">New or updated tag is stored here</param>
            <returns>True if tag was added, false if tag was updated.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.TagStorage.IndexOf(System.String)">
            <summary>
            Get tag's index if found
            </summary>
            <param name="epc">Tag's EPC as a string.</param>
            <returns>Zero based index when found, otherwise -1.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.TagStorage.IndexOf(System.Byte[])">
            <summary>
            Get tag index if found
            </summary>
            <param name="epc">Tag's EPC as a byte array</param>
            <returns>Zero based index when found, otherwise -1</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.TagStorage.Remove(System.String)">
            <returns>true if the tag was found and removed.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.TagStorage.Remove(System.Byte[])">
            <summary>
            Remove a single tag entry (if found) from the storage.
            </summary>
            <param name="epc">Tag's EPC as a byte array.</param>
            <returns>true if the tag was found and removed.</returns>
        </member>
        <member name="M:NurApiDotNet.NurApi.TagStorage.Remove(System.Int32)">
            <summary>
            Remove a single tag entry (if found) from the storage.
            </summary>
            <param name="index">Tag's index.</param>
            <returns>Returns true if the tag was found and removed.</returns>         
        </member>
        <member name="M:NurApiDotNet.NurApi.TagStorage.ParseIdBuffer(NurApiDotNet.NurApi,NurApiDotNet.NurApi.TagStorage,System.Byte[],System.Int32,System.Int32,NurApiDotNet.NurApi.TagStorage.ParseIdBufferFlags,NurApiDotNet.NurApi.TagStorage.ParseIdBufferCallback)">
            Tag ID buffer parser.
            NOTE: do not use. Only for API's internal use!
            @param api		The NurApi instance to be used with various operation such as read and write.
            @param data		Source byte data.
            @param offset	Offset where the buffer is currently running at.
            @param dataLen	Length of the given data.
            @param includeMeta	If true then the tag metadata is included.
            @param isIrData	If true, then the response also contains tag's inventory + read data.
            @return The buffer position after parsing.
        </member>
        <member name="P:NurApiDotNet.NurApi.TagStorage.EnableXPCRemoval">
            <summary>
            Set/Get automatic XPC removing. Defaults to true
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApi.TagStorage.GetEnumerator">
            <summary>
            IEnumerable interface
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanStatus.wlan_status">
            <summary>
            Status of WLan module. 0=disable 1=enable 2=disabled initializing when enabled.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanStatus.role">
            <summary>
            Current operation mode.<br></br>
            ROLE_STA = 0,ROLE_AP = 2,ROLE_P2P = 3<br></br>
            ROLE_STA_ERR =  -1, Failure to load MAC/PHY in STA role<br></br>
            ROLE_AP_ERR  =  -ROLE_AP,  Failure to load MAC/PHY in AP role<br></br>
            ROLE_P2P_ERR =  -ROLE_P2P  Failure to load MAC/PHY in P2P role    
            </summary>     
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanStatus.wlan_connection_status">
            <summary>
            Current connection status<br></br>
            bit 0 = STATUS_BIT_CONNECTION the device is connected to the AP<br></br>
            bit 1 = STATUS_BIT_STA_CONNECTED client is connected to device<br></br>
            bit 2 = STATUS_BIT_IP_ACQUIRED the device has acquired an IP<br></br>
            bit 3 = STATUS_BIT_IP_LEASED the device has leased an IP<br></br>
            bit 4 = STATUS_BIT_CONNECTION_FAILED failed to connect to device<br></br>
            </summary>     
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanStatus.profile_count">
            <summary>
            Count of profiles currently added. 
            </summary>     
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanStatus.lasterror">
            <summary>
            Last error code. 0=No error.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanStatus.ChipId">
            <summary>
            Chip ID of WLan module. 
            </summary>            
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanStatus.FwVersion">
            <summary>
            FW version
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanStatus.PhyVersion">
            <summary>
            PHY version
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanStatus.NwpVersion">
            <summary>
            NWP version
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanStatus.HostDrvVer">
            <summary>
            Host driver version
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanStatus.RomVersion">
            <summary>
            ROM version of WLAn module.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanStatus.ip">
            <summary>
            IP Address
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanStatus.gwip">
            <summary>
            GW IP Address
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanStatus.mac">
            <summary>
            MAC address of WLA module. 
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanStatus.ssid">
            <summary>
            SSID.
            </summary>            
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanStatus.connection_ssid">
            <summary>
            SSID of device where connected to
            </summary>                       
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanStatus.connection_mac">
            <summary>
            MAC address where connected to
            </summary>            
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanStatus.scantime">
            <summary>
            Time in milliseconds how long network scan enabled.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanStatus.rssi_mgmnt">
            <summary>
            Holds the average management frames RSSI as dBm
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanStatus.rssi_datactrl">
            <summary>
            Holds the average data + ctrl frames RSSI as dBm
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanStatus.reserved">
            <summary>
            Reserved
            </summary>            
        </member>
        <member name="T:NurApiDotNet.NurApi.WLanProfile">
            <summary>
            WLan profile data.
            </summary>
            <seealso cref="M:NurApiDotNet.NurApi.WLanGetProfile(System.Byte)"/>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanProfile.index">
            <summary>
            Index of profile (1-7)
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanProfile.ssid">
            <summary>
            SSID of target AP
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanProfile.mac">
            <summary>
            MAC of target AP
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanProfile.secType">
            <summary>
            Security type: Open,WEP WPA1, WPA2
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanProfile.secKey">
            <summary>
            Security key. Hexadecimal digits - any combination of 0-9 a-f and A-F
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanProfile.extUser">
            <summary>
            ExtUser
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanProfile.anonUser">
            <summary>
            AnonUser
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanProfile.certIndex">
            <summary>
            Cert Index
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanProfile.eapMethod">
            <summary>
            EAP Method
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApi.WLanProfile.priority">
            <summary>
            Priority. 0-7 (0=Highest)
            </summary>
        </member>
        <member name="T:NurApiDotNet.AccessoryConfig">
            <summary>
            Reader may have accessories like Barcode reader, imager, beeper, vibrator etc.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccessoryConfig.ACC_EXT_GET_CFG">
            <summary>
            Get configuration command.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccessoryConfig.ACC_EXT_SET_CFG">
            <summary>
            Set configuration command.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccessoryConfig.APP_PERM_SIG">
            <summary>
            Constant signature value used by the module and API extension.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccessoryConfig.APP_PERM_SIG_OLD1">
            <summary>
             Constant OLD signature value used by the module and API extension.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccessoryConfig.APP_CTX_SIZE">
            <summary>
            Byte size of the application context.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccessoryConfig.APP_CTX_SIZE_OLD1">
            <summary>
            OLD Byte size of the application context.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccessoryConfig.SZ_NAME_FIELD">
            <summary>
            Size, in bytes, of the name field in the configuration protocol packet.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccessoryConfig.MAX_NAME_LENGTH">
            <summary>
            Maximum name length in characters.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccessoryConfig.APP_FL_HID_BARCODE">
            <summary>
            HID-bit for the barcode scan.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccessoryConfig.APP_FL_HID_RFID">
            <summary>
            HID-bit for the RFID scan / inventory.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccessoryConfig.APP_FL_USE_PEERMGR">
            <summary>
            Allow pairing bit
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccessoryConfig.APP_FL_HID_USB">
            <summary>
            bit for the EXA21 HID-USB mode
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccessoryConfig.CONFIG_FLAG_EXA51">
            <summary>
            Device is configured as EXA51 reader.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccessoryConfig.CONFIG_FLAG_EXA31">
            <summary>
            Device is configured as EXA31 reader.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccessoryConfig.DEV_FEATURE_IMAGER">
            <summary>
            Device has 1D/2D imager.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccessoryConfig.DEV_FEATURE_WIRELESS_CHG">
            <summary>
            Device has built-in wireless charging device.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccessoryConfig.DEV_FEATURE_VIBRATOR">
            <summary>
            Device has built-in vibrator.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccessoryConfig.signature">
            <summary>
            Signature of config struct. Use value read (NurAccGetConfig) from device.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccessoryConfig.config">
            <summary>
            Device configuration flags. Currently NUR_ACC_CFG_ACD or NUR_ACC_CFG_WEARABLE
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccessoryConfig.flags">
            <summary>
            Device operation flags. Currently used to enable HID modes. NUR_ACC_FL_HID_BARCODE and/or NUR_ACC_FL_HID_RFID
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccessoryConfig.hid_barcode_timeout">
            <summary>
            HID mode barcode scanner read timeout in milliseconds
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccessoryConfig.hid_rfid_timeout">
            <summary>
            HID mode RFID read timeout in milliseconds
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccessoryConfig.hid_rfid_maxtags">
            <summary>
            HID mode RFID read max tags. When max tags reached, reading will stop
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccessoryConfig.name">
            <summary>
            Name read from the accessory / reader.
            </summary>
        </member>
        <member name="M:NurApiDotNet.AccessoryConfig.SetHidBarcode(System.Boolean)">
            <summary>
            Set the HID flag in the barcode scan. 
            </summary>
            <param name="setHID">set to true to set the behavior to "HID"</param>
        </member>
        <member name="M:NurApiDotNet.AccessoryConfig.GetHidBarCode">
            <summary>
            Get whether the HID-bit is set in the flag set.
            </summary>
            <returns>true if the barcode HID-bit is set in the current flag set</returns>        
        </member>
        <member name="M:NurApiDotNet.AccessoryConfig.SetHidRFID(System.Boolean)">
            <summary>
            Set the RFID HID-flag in the barcode scan.
            </summary>
            <param name="setHID">set to true to set the behavior to "HID"</param>        
        </member>
        <member name="M:NurApiDotNet.AccessoryConfig.GetHidRFID">
            <summary>
            Get whether the RFID HID-bit is set in the flag set.
            </summary>
            <returns> true if the RFID HID-bit is set in the current flag set</returns>        
        </member>
        <member name="M:NurApiDotNet.AccessoryConfig.GetAllowPairingState">
            <summary>
            Get state of 'Allow pairing' flag.
            </summary>
            <returns>true if pairing is allowed.</returns>
        </member>
        <member name="M:NurApiDotNet.AccessoryConfig.SetAllowPairingState(System.Boolean)">
            <summary>
            Set the 'Allow pairing' state.
            </summary>
            <param name="setAllowPairing">set to true if allowing device to pair with the target device</param>
        </member>
        <member name="M:NurApiDotNet.AccessoryConfig.GetHidUsbState">
            <summary>
            Get state of 'HID-USB' flag
            </summary>
            <returns>Returns true if HID-USB set</returns>
        </member>
        <member name="M:NurApiDotNet.AccessoryConfig.SetHidUsbState(System.Boolean)">
            <summary>
            Set the 'HID-USB' state.
            </summary>
            <param name="setHidUsb">set to true if set device to USB-HID mode</param>
        </member>
        <member name="M:NurApiDotNet.AccessoryConfig.SetHidMode(NurApiDotNet.NurApi.HIDMode)">
            <summary>
            Set HID mode flags
            </summary>
            <param name="mode"><see cref="T:NurApiDotNet.NurApi.HIDMode"/> to set</param>
        </member>
        <member name="M:NurApiDotNet.AccessoryConfig.GetHidMode">
            <summary>
            Get current HID mode
            </summary>
            <returns>current HID mode</returns>
        </member>
        <member name="M:NurApiDotNet.AccessoryConfig.deserializeConfigurationReply(System.Byte[])">
            <summary>
             Deserializes the accessory extension's configuration reply.
            </summary>
            <param name="reply">Bytes received from the transport layer / reader module.</param>
            <returns>Return the configuration class if the reply is OK.</returns>
        </member>
        <member name="M:NurApiDotNet.AccessoryConfig.isDeviceEXA51">
            <summary>
            Get whether the device is configured as EXA51 reader.
            </summary>
            <seealso cref="M:NurApiDotNet.AccessoryConfig.isDeviceEXA31"/>
            <seealso cref="M:NurApiDotNet.AccessoryConfig.isDeviceEXA21"/>
            <returns>true if the reader is EXA51</returns>
        </member>
        <member name="M:NurApiDotNet.AccessoryConfig.isDeviceEXA31">
            <summary>
            Get whether the device is configured as EXA31 reader.
            </summary>
            <seealso cref="M:NurApiDotNet.AccessoryConfig.isDeviceEXA51"/>
            <seealso cref="M:NurApiDotNet.AccessoryConfig.isDeviceEXA21"/>
            <returns>true if the reader is EXA31</returns>
        </member>
        <member name="M:NurApiDotNet.AccessoryConfig.isDeviceEXA21">
            <summary>
            Get whether the device is configured as EXA21 reader.
            </summary>
            <seealso cref="M:NurApiDotNet.AccessoryConfig.isDeviceEXA51"/>
            <seealso cref="M:NurApiDotNet.AccessoryConfig.isDeviceEXA31"/>
            <returns>true if the reader is EXA21</returns>
        </member>
        <member name="M:NurApiDotNet.AccessoryConfig.getDeviceType">
            <summary>
            Get device name "EXA21", "EXA51" or "EXA31"
            </summary>
            <returns>device name as string</returns>
        </member>
        <member name="M:NurApiDotNet.AccessoryConfig.hasImagerScanner">
            <summary>
             Get whether the accessory has 1D/2D imager present.        
            </summary>
            <returns>true if there is a 1D/2D imager present.</returns>
        </member>
        <member name="M:NurApiDotNet.AccessoryConfig.hasWirelessCharging">
            <summary>
            Get whether the accessory has wireless charging device.        
            </summary>
            <returns>true if there is wireless charging option available</returns>
        </member>
        <member name="M:NurApiDotNet.AccessoryConfig.hasVibrator">
            <summary>
            Get whether the accessory has built-in vibrator.      
            </summary>
            <returns>true if there is built-in vibrator in the device</returns>
        </member>
        <member name="F:NurApiDotNet.Commands.NurCmdDiagConfig.Response.flags">
            Current flags. One or more of DIAG_CFG flags in NurApi 
        </member>
        <member name="F:NurApiDotNet.Commands.NurCmdDiagConfig.Response.interval">
            Current report interval in seconds. 
        </member>
        <member name="F:NurApiDotNet.Commands.NurCmdGen2V2.SUBCMD_UNTRACEABLE">
            Sub-command for Gen2 version 2: "Untraceable" 
        </member>
        <member name="F:NurApiDotNet.Commands.NurCmdGen2V2.SUBCMD_AUTHENTICATE">
            Sub-command for Gen2 version 2: "Authenticate" 
        </member>
        <member name="F:NurApiDotNet.Commands.NurCmdGen2V2.SUBCMD_READBUFFER">
            Sub-command for Gen2 version 2: "ReadBuffer" 
        </member>
        <member name="F:NurApiDotNet.Commands.NurCmdGen2V2.V2_RX_ATTN_BIT">
            Write-like receiver attenuation used / not.  
        </member>
        <member name="F:NurApiDotNet.Commands.NurCmdGen2V2.V2_RESELECT_BIT">
            Re-select between "in progress" -reply / not.  
        </member>
        <member name="M:NurApiDotNet.Commands.NurCmdGen2V2.#ctor(System.Int32,NurApiDotNet.UntraceableParam)">
            <summary>
             Untraceable command without selection parameters.
            </summary>
            <param name="password">Untraceable is always secured; password needs to match.</param>
            <param name="utrParam">The unUntraceable command's setup</param>
            <exception>Exception can be thrown with parameter, such as bit length, error.</exception>
        </member>
        <member name="F:NurApiDotNet.Commands.NurCmdMz4Qt.NurRespMonzaQT.reduce">
            Indicating whether the read range is reduced or not. 
        </member>
        <member name="F:NurApiDotNet.Commands.NurCmdMz4Qt.NurRespMonzaQT.publicMemory">
            Indicating whether the tag uses public memory or not. 
        </member>
        <member name="T:NurApiDotNet.Commands.NurCmdTuneAntenna.Response">
            <summary>
            Hold information about tuning result per band
            </summary>
        </member>
        <member name="F:NurApiDotNet.Commands.NurCmdTuneAntenna.Response.antenna">
            <summary>
            Antenna that was tuned
            </summary>
        </member>
        <member name="F:NurApiDotNet.Commands.NurCmdTuneAntenna.Response.frequency">
            <summary>
            Frequency the tuning took place in
            </summary>
        </member>
        <member name="F:NurApiDotNet.Commands.NurCmdTuneAntenna.Response.I">
            <summary>
            Debug/RD: I-part with the lowest reflected power
            </summary>
        </member>
        <member name="F:NurApiDotNet.Commands.NurCmdTuneAntenna.Response.Q">
            <summary>
            Debug/RD: Q-part with the lowest reflected power
            </summary>
        </member>
        <member name="F:NurApiDotNet.Commands.NurCmdTuneAntenna.Response.dBm">
            <summary>
            Calculated reflected power in dBm
            </summary>
        </member>
        <member name="M:NurApiDotNet.Commands.NurCmdTuneAntenna.Response.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor: frequency, I, Q, dBm * 1000 
            </summary>
            <param name="antenna">Antenna id that was tuned</param>
            <param name="f">Frequency the tuning took place in</param>
            <param name="I">Debug/RD: I-part with the lowest reflected power</param>
            <param name="Q">Q-part with the lowest reflected power</param>
            <param name="idBm">reflected power in dBm</param>
        </member>
        <member name="T:NurApiDotNet.Commands.NUR_CMD">
            <summary>
            NUR module basic commands
            </summary>
        </member>
        <member name="T:NurApiDotNet.Commands.CMD_NOTIFY">
            <summary>
            NUR module notifications
            </summary>
        </member>
        <member name="T:NurApiDotNet.Commands.CMD_REG">
            <summary>
            NUR module register commands 
            </summary>
        </member>
        <member name="T:NurApiDotNet.Commands.CMD_STANDALONE">
            <summary>
            Standalone and commands for ethernet Sampo
            </summary>
        </member>
        <member name="T:NurApiDotNet.Commands.CMD_NASS">
            <summary>
            NASS Commands
            </summary>
        </member>
        <member name="T:NurApiDotNet.Commands.CMD_GEN2">
            <summary>
            Gen2 version 2 sub-command values.<br/>
            See XNUR3 : app/inc/gen2v2.h for more.These are supported for now.
            </summary>
        </member>
        <member name="T:NurApiDotNet.Commands.CMD_DIAG">
            <summary>
            NUR_CMD_DIAG sub commands
            </summary>
        </member>
        <member name="T:NurApiDotNet.Commands.NurCmd">
            <summary>
            Nur protocol command base class.
            </summary>
        </member>
        <member name="M:NurApiDotNet.Commands.NurCmd.IsDone">
            <summary>
            True if cmd handled and response received
            </summary>
            <returns></returns>
        </member>
        <member name="T:NurApiDotNet.HopEventData">
            <summary>
            Hop event data for <see cref="E:NurApiDotNet.NurApi.HopEvent"/> event
            </summary>
            <seealso cref="E:NurApiDotNet.NurApi.TriggerReadEvent"/>
        </member>
        <member name="F:NurApiDotNet.HopEventData.hopTableId">
            <summary>
            Current hop table region id 
            </summary>
        </member>
        <member name="F:NurApiDotNet.HopEventData.freqIdx">
            <summary>
            Index of frequency in hop table
            </summary>
        </member>
        <member name="F:NurApiDotNet.HopEventData.freqKhz">
            <summary>
            Frequency in kHz
            </summary>
        </member>
        <member name="T:NurApiDotNet.InventoryStreamData">
            <summary>
            Inventory stream data after <see cref="E:NurApiDotNet.NurApi.InventoryStreamEvent"/> event
            </summary>    
        </member>
        <member name="F:NurApiDotNet.InventoryStreamData.tagsAdded">
            <summary>
            Number of tags added to NurApi internal tag storage.
            </summary>
        </member>
        <member name="F:NurApiDotNet.InventoryStreamData.stopped">
            <summary>
            Streaming has stopped. If you need continuous streaming, you need to restart streaming.
            </summary>
        </member>
        <member name="F:NurApiDotNet.InventoryStreamData.roundsDone">
            <summary>
            Number of full Q rounds done in this inventory.
            </summary>
        </member>
        <member name="F:NurApiDotNet.InventoryStreamData.collisions">
            <summary>
             Number of possible collisions or reception errors in this inventory.
            </summary>
        </member>
        <member name="F:NurApiDotNet.InventoryStreamData.Q">
            <summary>
            Q used in this inventory.
            </summary>
        </member>
        <member name="T:NurApiDotNet.IOChangeData">
            <summary>	
            I/O change data after <see cref="E:NurApiDotNet.NurApi.IOChangeEvent"/> event
            </summary>	
        </member>
        <member name="F:NurApiDotNet.IOChangeData.sensor">
            <summary>
            true if notification source is sensor, otherwise FALSE and source is GPIO.
            </summary>
        </member>
        <member name="F:NurApiDotNet.IOChangeData.source">
            <summary>
            Sensor/GPIO source number. For accessory device buttons this is >=100
            </summary>
        </member>
        <member name="F:NurApiDotNet.IOChangeData.dir">
            <summary>
            IO change direction; 1 = Low to high transition (Rising edge), 0 = High to low transition (Falling edge). 
            </summary>
        </member>
        <member name="T:NurApiDotNet.AccessorySensorChanged">
            <summary>
            Nur accessory sensor changed information
            </summary>  
        </member>
        <member name="F:NurApiDotNet.AccessorySensorChanged.source">
            <summary>
            Sensor/GPIO pin number for this sensor
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccessorySensorChanged.removed">
            <summary>
            Sensor added(0) or removed(1)
            </summary>
        </member>
        <member name="T:NurApiDotNet.AccSensorData">
            <summary>
            Abstract base class for sensor values.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccSensorData.source">
            <summary>
            Sensor/GPIO pin number for this sensor
            </summary>
        </member>
        <member name="T:NurApiDotNet.AccSensorRangeData">
            <summary>
            Sensor value from a range sensor
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccSensorRangeData.range">
            <summary>
            Range as read by sensor. Unit: mm.
            </summary>
        </member>
        <member name="T:NurApiDotNet.AccBarcodeResult">
            <summary>
            Barcode event result
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccBarcodeResult.status">
            <summary>
            Status from the reader.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccBarcodeResult.Barcode">
            <summary>
            Interpreted barcode contents if available.
            </summary>
        </member>
        <member name="M:NurApiDotNet.AccBarcodeResult.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:NurApiDotNet.AccSensorToFFrBfaRawData">
            <summary>
            Nur accessory FR BFA ToF raw data.
            </summary>
        </member>
        <member name="T:NurApiDotNet.AccSensorToFFrBfaRawData.AccSensorToFFrBfaRawDataItem">
            <summary>
            Nur accessory FR BFA ToF raw data for one ToF sensor.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccSensorToFFrBfaRawData.AccSensorToFFrBfaRawDataItem.distCm">
            <summary>
            Range as read by sensor. Unit: cm.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccSensorToFFrBfaRawData.AccSensorToFFrBfaRawDataItem.status">
            <summary>
            A status with status 6 or 9 can be considered with a confidence value of 50%. All other status are below 50% confidence level.
            Measurement validity status meanings:
            0	Ranging data are not updated
            1	Signal rate too low on SPAD array
            2	Target phase error
            3	Sigma estimator too high
            4	Target consistency failed (Wrap Around fail 1/2)
            5	Range valid
            6	Wrap around not performed (Typically the first range)
            7	Rate consistency failed (Wrap Around fail 2/2)
            8	Signal rate too low for the current target
            9	Range valid with large pulse (may be due to a merged target)
            10	Range valid, but no target detected at previous range
            11	-
            12	Target blurred by another one, due to sharpener
            15	No target detected (only if nb of target detected is enabled)
            </summary>
        </member>
        <member name="F:NurApiDotNet.AccSensorToFFrBfaRawData.items">
            <summary>
            Nur accessory FR BFA ToF raw data for ToF sensor array.
            </summary>
        </member>
        <member name="M:NurApiDotNet.AccSensorToFFrBfaRawData.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Initialize new AccSensorToFFrBfaRawData instance
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurEventProgrammingProgress">
            Contains information about programming progress. 
        </member>
        <member name="F:NurApiDotNet.NurEventProgrammingProgress.error">
            Error code returned from page programming. 
        </member>
        <member name="F:NurApiDotNet.NurEventProgrammingProgress.currentPage">
            Current page, this is -1 in first notification before programming started. 
        </member>
        <member name="F:NurApiDotNet.NurEventProgrammingProgress.totalPages">
            Total number of pages to program. 
        </member>
        <member name="F:NurApiDotNet.NurEventUnknown.mEventData">
            Bytes related to the event; source is module/device. 
        </member>
        <member name="T:NurApiDotNet.NXPAlarmStreamData">
            <summary>
            NXP EAS Alarm stream data after <see cref="E:NurApiDotNet.NurApi.NXPAlarmStreamEvent"/> event
            </summary>
            <seealso cref="E:NurApiDotNet.NurApi.InventoryStreamEvent"/>	
        </member>
        <member name="F:NurApiDotNet.NXPAlarmStreamData.stopped">
            <summary>
            true if streaming has stopped false otherwise.
            </summary>		
        </member>
        <member name="F:NurApiDotNet.NXPAlarmStreamData.armed">
            <summary>
            true if EAS Alarm is active.
            </summary>	
        </member>
        <member name="T:NurApiDotNet.TriggerReadData">
            <summary>
            Trigger read data after <see cref="E:NurApiDotNet.NurApi.TriggerReadEvent"/> event
            </summary>
            <seealso cref="E:NurApiDotNet.NurApi.TriggerReadEvent"/>
        </member>
        <member name="F:NurApiDotNet.TriggerReadData.sensor">
            <summary>
            true if notification source is sensor, otherwise FALSE and source is GPIO. 
            </summary>
        </member>
        <member name="F:NurApiDotNet.TriggerReadData.source">
            <summary>
            Sensor/GPIO source number. For accessory device buttons this is >=100
            </summary>
        </member>
        <member name="F:NurApiDotNet.TriggerReadData.antennaID">
            <summary>
            ID of antenna where tag was read. 
            </summary>
        </member>
        <member name="F:NurApiDotNet.TriggerReadData.rssi">
            <summary>
            Tag RSSI, -127 if tag could not be found. 
            </summary>
        </member>
        <member name="F:NurApiDotNet.TriggerReadData.scaledRssi">
            <summary>
            Tag RSSI scaled to 0% - 100%. 
            </summary>
        </member>
        <member name="F:NurApiDotNet.TriggerReadData.epcLen">
            <summary>
            Number of bytes stored in epc field, zero if tag could not be found. 
            </summary>
        </member>
        <member name="F:NurApiDotNet.TriggerReadData.epc">
            <summary>
            Tag EPC data. 
            </summary>		
        </member>
        <member name="T:NurApiDotNet.TuneEventData">
            <summary>
            Tune event data for <see cref="E:NurApiDotNet.NurApi.TuneEvent"/> event
            </summary>	
        </member>
        <member name="F:NurApiDotNet.TuneEventData.cap1">
            <summary>
            Tuning capacitor 1 value.
            </summary>
        </member>
        <member name="F:NurApiDotNet.TuneEventData.cap2">
            <summary>
            Tuning capacitor 2 value.
            </summary>
        </member>
        <member name="F:NurApiDotNet.TuneEventData.reflPower_dBm">
            <summary>
            Reflected power in dBm*1000.
            </summary>
        </member>
        <member name="F:NurApiDotNet.TuneEventData.antenna">
            <summary>
            Antenna ID
            </summary>
        </member>
        <member name="F:NurApiDotNet.TuneEventData.freqKhz">
            <summary>
            Frequency in kHz
            </summary>
        </member>
        <member name="T:NurApiDotNet.WLanSearchEventData">
            <summary>
            WLan Network scan result entry.
            NOTE: Not tested as products do not support this functionality
            </summary>
            <seealso cref="!:WLanScanEnable"/>
        </member>
        <member name="P:NurApiDotNet.WLanSearchEventData.index">
            <summary>
            Index of item. 0=first.
            </summary>
        </member>
        <member name="P:NurApiDotNet.WLanSearchEventData.ssid">
            <summary>
            SSID of device found
            </summary>
        </member>
        <member name="P:NurApiDotNet.WLanSearchEventData.mac">
            <summary>
            MAC of device found
            </summary>
        </member>
        <member name="P:NurApiDotNet.WLanSearchEventData.secType">
            <summary>
            Security type: Open,WEP WPA1, WPA2
            </summary>
        </member>
        <member name="P:NurApiDotNet.WLanSearchEventData.rssi">
            <summary>
            RSSI
            </summary>
        </member>
        <member name="P:NurApiDotNet.WLanSearchEventData.reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApiException">
            <summary>
            Implements the NUR API specific exception.
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApiException.error">
            <summary> Publicly visible error code from the module, client or tag.  </summary>
        </member>
        <member name="P:NurApiDotNet.NurApiException.NurErrorMessage">
            <summary>
            Human readable error message
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurApiException.StripFilename(System.String)">
            <summary>
            Parse last part of path and filename
            </summary>
            <param name="fileName">Full path to file where to exception was made</param>
        </member>
        <member name="M:NurApiDotNet.NurApiException.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Handle NUR exception
            </summary>
            <param name="message">Free text about the exception</param>
            <param name="memberName">Caller method - from constructor, gives always .ctor</param>
            <param name="fileName">Full path to file where to exception was made</param>
            <param name="lineNumber">Line number from where to exception was made</param>
        </member>
        <member name="M:NurApiDotNet.NurApiException.#ctor(System.String,System.Int32)">
            <summary>
            Exception constructor added with error code.
            </summary>
            <param name="function">Function name where the exception took place.</param>
            <param name="error">Error code from module, client or tag.</param>
        </member>
        <member name="M:NurApiDotNet.NurApiException.#ctor(System.Int32)">
            <summary>
            Generic exception with an error code.
            </summary>
            <param name="error">Error code from module, client or tag</param>
        </member>
        <member name="M:NurApiDotNet.NurApiException.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Exception constructor added with error code.
            </summary>
            <param name="function">Function name where the exception took place.</param>
            <param name="error">Error code from module, client or tag.</param>
            <param name="message"></param>
        </member>
        <member name="T:NurApiDotNet.NamespaceDoc">
            <summary>
            NurApi library (.NET Standard 2.0) for controlling NUR protocol based RFID devices.<br/><br/>
            Recommended module types (or newer) NUR05WL2/NUR1W0 (v5.0-A), All NUR2 (v.7.5-A), All NUR3.<br/><br/>
            This library is mostly source compatible with previous versions of NurApiDotNet (.NETFramework) library.<br/>
            Discovering and connecting to reader has changed significantly; See <see cref="M:NurApiDotNet.NurApi.Connect(System.Uri)"/>, <see cref="T:NurApiDotNet.NurDeviceDiscovery"/>
            <br/>
            <br/>
            Samples available on NordicID github: https://github.com/NordicID/nur_sample_csharp
            <br/>
            <br/>
            <b>See <see cref="T:NurApiDotNet.NurApi"/> class for more.</b>
            </summary>
            <example>
            See full sample app <see cref="T:NurApiDotNet.NurApiDocSample"/>
            </example>
        </member>
        <member name="T:NurApiDotNet.NurApiDocSample">
            <summary>
            Simple console application showing some of the basic NurApi operations.
            <para>Full project available in https://github.com/NordicID/nur_sample_csharp</para>
            </summary>
            <example>
            <code source="DocExample\NurApiDocSample.cs" lang="C#"></code>
            </example>
        </member>
        <member name="T:NurApiDotNet.LogLevel">
            <summary>
            Logging levels
            </summary>
            <see cref="M:NurApiDotNet.NurApi.Log(System.Int32,System.Func{System.String})"/>
        </member>
        <member name="F:NurApiDotNet.LogLevel.VERBOSE">
            <summary>
            Verbose log
            </summary>
            <see cref="M:NurApiDotNet.NurApi.VLog(System.Func{System.String})"/>
        </member>
        <member name="F:NurApiDotNet.LogLevel.ERROR">
            <summary>
            Error log
            </summary>
            <see cref="M:NurApiDotNet.NurApi.ELog(System.Func{System.String})"/>
        </member>
        <member name="F:NurApiDotNet.LogLevel.USER">
            <summary>
            User log
            </summary>
            <see cref="M:NurApiDotNet.NurApi.ULog(System.Func{System.String})"/>
        </member>
        <member name="F:NurApiDotNet.LogLevel.DATA">
            <summary>
            Data log
            </summary>
        </member>
        <member name="T:NurApiDotNet.GPIOType">
            <summary>
            GPIO types
            </summary>
        </member>
        <member name="F:NurApiDotNet.GPIOType.Output">
            <summary>
            General Purpose IO (GPIO) is configured as output pin.
            </summary>
        </member>
        <member name="F:NurApiDotNet.GPIOType.Input">
            <summary>
            General Purpose IO (GPIO) is configured as input pin.
            </summary>
        </member>
        <member name="F:NurApiDotNet.GPIOType.RfIdOn">
            <summary>
            General Purpose IO (GPIO) will act as a Sampo S1 RFID on led (high active).
            </summary>
        </member>
        <member name="F:NurApiDotNet.GPIOType.RfIdRead">
            <summary>
            General Purpose IO (GPIO) will act as a Sampo S1 RFID read led (high active).
            </summary>
        </member>
        <member name="F:NurApiDotNet.GPIOType.Beeper">
            <summary>
            General Purpose IO (GPIO) will act as a beeper (high active).
            </summary>
        </member>
        <member name="F:NurApiDotNet.GPIOType.AntCtl1">
            <summary>
            General Purpose IO (GPIO) is configured as antenna control 1 (bit0).
            </summary>
        </member>
        <member name="F:NurApiDotNet.GPIOType.AntCtl2">
            <summary>
            General Purpose IO (GPIO) is configured as antenna control 2 (bit1).
            </summary>
        </member>
        <member name="T:NurApiDotNet.GPIOEdge">
            <summary>
            GPIO Edge
            </summary>
        </member>
        <member name="F:NurApiDotNet.GPIOEdge.Falling">
            <summary>
            Trigger IO's configured action on falling edge of IO.
            </summary>
        </member>
        <member name="F:NurApiDotNet.GPIOEdge.Rising">
            <summary>
            Trigger IO's configured action on rising edge of IO.
            </summary>
        </member>
        <member name="F:NurApiDotNet.GPIOEdge.Both">
            <summary>
            Trigger IO's configured action on both edges of IO.
            </summary>
        </member>
        <member name="T:NurApiDotNet.GPIOAction">
            <summary>
            GPIO Action TODO: fix links
            </summary>
        </member>
        <member name="F:NurApiDotNet.GPIOAction.None">
            <summary>
            No action. GPIO state can be read manually.
            </summary>
        </member>
        <member name="F:NurApiDotNet.GPIOAction.Notify">
            <summary>
            Send {@link NurEventIOChange} on GPIO/sensor change. IO change information is received with {@link NurApiListener#IOChangeEvent}.
            </summary>
        </member>
        <member name="F:NurApiDotNet.GPIOAction.Scantag">
            <summary>
             Start single tag scan on GPIO/sensor change. Tag result is received with {@link NurApiListener#triggeredReadEvent}.
            </summary>
        </member>
        <member name="F:NurApiDotNet.GPIOAction.Inventory">
            <summary>
            Start inventory on GPIO/sensor change. Result is received with {@link NurApiListener#inventoryStreamEvent}.
            </summary>
        </member>
        <member name="T:NurApiDotNet.RegionId">
            <summary>
            Regions
            </summary>
        </member>
        <member name="F:NurApiDotNet.RegionId.Current">
            <summary>
            Current
            </summary>
        </member>
        <member name="F:NurApiDotNet.RegionId.EU">
            <summary>
            Europe. 
            </summary>
        </member>
        <member name="F:NurApiDotNet.RegionId.FCC">
            <summary>
            North-America.
            </summary>
        </member>
        <member name="F:NurApiDotNet.RegionId.PRC">
            <summary>
            People's Republic of China (Upper Band).
            </summary>
        </member>
        <member name="F:NurApiDotNet.RegionId.Malaysia">
            <summary>
            Malaysia.
            </summary>
        </member>
        <member name="F:NurApiDotNet.RegionId.Brazil">
            <summary>
            Brazil.
            </summary>
        </member>
        <member name="F:NurApiDotNet.RegionId.Australia">
            <summary>
            Australia.
            </summary>
        </member>
        <member name="F:NurApiDotNet.RegionId.NewZealand">
            <summary>
            New Zealand.
            </summary>
        </member>
        <member name="F:NurApiDotNet.RegionId.Japan250mW">
            <summary>
            Japan 250mW LBT.
            </summary>
        </member>
        <member name="F:NurApiDotNet.RegionId.Japan500mW">
            <summary>
            Japan 500mW DRM.
            </summary>
        </member>
        <member name="F:NurApiDotNet.RegionId.KoreaLBT">
            <summary>
            Korean LBT
            </summary>
        </member>
        <member name="F:NurApiDotNet.RegionId.India">
            <summary>
            India
            </summary>
        </member>
        <member name="F:NurApiDotNet.RegionId.Russia">
            <summary>
            Russia
            </summary>
        </member>
        <member name="F:NurApiDotNet.RegionId.Vietnam">
            <summary>
            Vietnam
            </summary>
        </member>
        <member name="F:NurApiDotNet.RegionId.Singapore">
            <summary>
            Singapore
            </summary>
        </member>
        <member name="F:NurApiDotNet.RegionId.Thailand">
            <summary>
            Thailand
            </summary>
        </member>
        <member name="F:NurApiDotNet.RegionId.Philippines">
            <summary>
            Philippines
            </summary>
        </member>
        <member name="F:NurApiDotNet.RegionId.Morocco">
            <summary>
            Morocco (NUR Fw 5.0-A or later)
            </summary>
        </member>
        <member name="F:NurApiDotNet.RegionId.Peru">
            <summary>
            Peru (NUR Fw 5.0-A or later)
            </summary>
        </member>
        <member name="F:NurApiDotNet.RegionId.Israel">
            <summary>
            Israel (NUR Fw 5.6-A or later)
            </summary>
        </member>
        <member name="F:NurApiDotNet.RegionId.HongKong">
            <summary>
            Hong Kong (NUR Fw 5.7-A or later)
            </summary>
        </member>
        <member name="F:NurApiDotNet.RegionId.Last">
            <summary>
            Indicates last valid.
            </summary>
        </member>
        <member name="F:NurApiDotNet.RegionId.Custom">
            <summary>
            Region, Custom hop table.
            </summary>
        </member>
        <member name="T:NurApiDotNet.RxDecoding">
            <summary>
            RX encoding (Miller encoding)
            </summary>
        </member>
        <member name="F:NurApiDotNet.RxDecoding.FM0">
            <summary>
            Receiver decoding FM-0
            </summary>
        </member>
        <member name="F:NurApiDotNet.RxDecoding.M2">
            <summary>
            Receiver decoding Miller-2
            </summary>
        </member>
        <member name="F:NurApiDotNet.RxDecoding.M4">
            <summary>
            Receiver decoding Miller-4
            </summary>
        </member>
        <member name="F:NurApiDotNet.RxDecoding.M8">
            <summary>
            Receiver decoding Miller-8
            </summary>
        </member>
        <member name="T:NurApiDotNet.TxModulation">
            <summary>
            Tx modulation style
            </summary>
        </member>
        <member name="F:NurApiDotNet.TxModulation.ASK">
            <summary>
            Transmit modulation ASK
            </summary>
        </member>
        <member name="F:NurApiDotNet.TxModulation.PRASK">
            <summary>
            Transmit modulation PR-ASK
            </summary>
        </member>
        <member name="T:NurApiDotNet.TxLevel">
            <summary>
            Transmission (TX) power level in 1dB steps. See also the
            </summary>
        </member>
        <member name="F:NurApiDotNet.TxLevel.Level27">
            TX level 27 dBm, 500mW. Obsolete @see {@link com.nordicid.nurapi.ModuleSetup#txLevel} 
        </member>
        <member name="F:NurApiDotNet.TxLevel.Level26">
            TX level 26 dBm, 398mW. Obsolete @see {@link com.nordicid.nurapi.ModuleSetup#txLevel}
        </member>
        <member name="F:NurApiDotNet.TxLevel.Level25">
            TX level 25 dBm, 316mW. Obsolete @see {@link com.nordicid.nurapi.ModuleSetup#txLevel}
        </member>
        <member name="F:NurApiDotNet.TxLevel.Level24">
            TX level 24 dBm, 251mW. Obsolete @see {@link com.nordicid.nurapi.ModuleSetup#txLevel}
        </member>
        <member name="F:NurApiDotNet.TxLevel.Level23">
            TX level 23 dBm, 200mW. Obsolete @see {@link com.nordicid.nurapi.ModuleSetup#txLevel}
        </member>
        <member name="F:NurApiDotNet.TxLevel.Level22">
            TX level 22 dBm, 158mW. Obsolete @see {@link com.nordicid.nurapi.ModuleSetup#txLevel}
        </member>
        <member name="F:NurApiDotNet.TxLevel.Level21">
            TX level 21 dBm, 126mW. Obsolete @see {@link com.nordicid.nurapi.ModuleSetup#txLevel}
        </member>
        <member name="F:NurApiDotNet.TxLevel.Level20">
            TX level 20 dBm, 100mW. Obsolete @see {@link com.nordicid.nurapi.ModuleSetup#txLevel}
        </member>
        <member name="F:NurApiDotNet.TxLevel.Level19">
            TX level 19 dBm, 79mW. Obsolete @see {@link com.nordicid.nurapi.ModuleSetup#txLevel}
        </member>
        <member name="F:NurApiDotNet.TxLevel.Level18">
            TX level 18 dBm, 63mW. Obsolete @see {@link com.nordicid.nurapi.ModuleSetup#txLevel}
        </member>
        <member name="F:NurApiDotNet.TxLevel.Level17">
            TX level 17 dBm, 50mW. Obsolete @see {@link com.nordicid.nurapi.ModuleSetup#txLevel}
        </member>
        <member name="F:NurApiDotNet.TxLevel.Level16">
            TX level 16 dBm, 40mW. Obsolete @see {@link com.nordicid.nurapi.ModuleSetup#txLevel}
        </member>
        <member name="F:NurApiDotNet.TxLevel.Level15">
            TX level 15 dBm, 32mW. Obsolete @see {@link com.nordicid.nurapi.ModuleSetup#txLevel}
        </member>
        <member name="F:NurApiDotNet.TxLevel.Level14">
            TX level 14 dBm, 25mW. Obsolete @see {@link com.nordicid.nurapi.ModuleSetup#txLevel}
        </member>
        <member name="F:NurApiDotNet.TxLevel.Level13">
            TX level 13 dBm, 20mW. Obsolete @see {@link com.nordicid.nurapi.ModuleSetup#txLevel}
        </member>
        <member name="F:NurApiDotNet.TxLevel.Level12">
            TX level 12 dBm, 16mW. Obsolete @see {@link com.nordicid.nurapi.ModuleSetup#txLevel}
        </member>
        <member name="F:NurApiDotNet.TxLevel.Level11">
            TX level 11 dBm, 13mW. Obsolete @see {@link com.nordicid.nurapi.ModuleSetup#txLevel}
        </member>
        <member name="F:NurApiDotNet.TxLevel.Level10">
            TX level 10 dBm, 10mW. Obsolete @see {@link com.nordicid.nurapi.ModuleSetup#txLevel}
        </member>
        <member name="F:NurApiDotNet.TxLevel.Level9">
            TX level 9 dBm, 8mW. Obsolete @see {@link com.nordicid.nurapi.ModuleSetup#txLevel}
        </member>
        <member name="F:NurApiDotNet.TxLevel.Level8">
            TX level 8 dBm, 6mW. Obsolete @see {@link com.nordicid.nurapi.ModuleSetup#txLevel}
        </member>
        <member name="F:NurApiDotNet.TxLevel.Max">
            Maximum setting of the TX level. 
        </member>
        <member name="F:NurApiDotNet.TxLevel.Min">
            Minimum setting of the TX level. 
        </member>
        <member name="T:NurApiDotNet.AntennaId">
            <summary>
            Antenna Id's
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.AutoSelect">
            <summary>
            Auto select
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id1">
            <summary>
            Antenna ID 1
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id2">
            <summary>
            Antenna ID 2
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id3">
            <summary>
            Antenna ID 3
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id4">
            <summary>
            Antenna ID 4
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id5">
            <summary>
            Antenna ID 5
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id6">
            <summary>
            Antenna ID 6
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id7">
            <summary>
            Antenna ID 7
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id8">
            <summary>
            Antenna ID 8
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id9">
            <summary>
            Antenna ID 9
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id10">
            <summary>
            Antenna ID 10
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id11">
            <summary>
            Antenna ID 11
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id12">
            <summary>
            Antenna ID 12
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id13">
            <summary>
            Antenna ID 13
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id14">
            <summary>
            Antenna ID 14
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id15">
            <summary>
            Antenna ID 15
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id16">
            <summary>
            Antenna ID 16
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id17">
            <summary>
            Antenna ID 17
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id18">
            <summary>
            Antenna ID 18
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id19">
            <summary>
            Antenna ID 19
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id20">
            <summary>
            Antenna ID 20
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id21">
            <summary>
            Antenna ID 21
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id22">
            <summary>
            Antenna ID 22
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id23">
            <summary>
            Antenna ID 23
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id24">
            <summary>
            Antenna ID 24
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id25">
            <summary>
            Antenna ID 25
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id26">
            <summary>
            Antenna ID 26
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id27">
            <summary>
            Antenna ID 27
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id28">
            <summary>
            Antenna ID 28
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id29">
            <summary>
            Antenna ID 29
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id30">
            <summary>
            Antenna ID 30
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id31">
            <summary>
            Antenna ID 31
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.Id32">
            <summary>
            Antenna ID 32
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaId.LAST_ANTENNAID">
            <summary>
            Last valid antenna ID
            </summary>
        </member>
        <member name="T:NurApiDotNet.AntennaMask">
            <summary>
            Antenna mask bits
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.None">
            <summary>
            No antenna mask set
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask1">
            <summary>
            Mask for antenna ID 1.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask2">
            <summary>
            Mask for antenna ID 2.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask3">
            <summary>
            Mask for antenna ID 3.
            </summary>.
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask4">
            <summary>
            Mask for antenna ID 4.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask5">
            <summary>
            Mask for antenna ID 5.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask6">
            <summary>
            Mask for antenna ID 6.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask7">
            <summary>
            Mask for antenna ID 7.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask8">
            <summary>
            Mask for antenna ID 8.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask9">
            <summary>
            Mask for antenna ID 9.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask10">
            <summary>
            Mask for antenna ID 10.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask11">
            <summary>
            Mask for antenna ID 11.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask12">
            <summary>
            Mask for antenna ID 12.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask13">
            <summary>
            Mask for antenna ID 13.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask14">
            <summary>
            Mask for antenna ID 14.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask15">
            <summary>
            Mask for antenna ID 15.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask16">
            <summary>
            Mask for antenna ID 16.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask17">
            <summary>
            Mask for antenna ID 17.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask18">
            <summary>
            Mask for antenna ID 18.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask19">
            <summary>
            Mask for antenna ID 19.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask20">
            <summary>
            Mask for antenna ID 20.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask21">
            <summary>
            Mask for antenna ID 21.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask22">
            <summary>
            Mask for antenna ID 22.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask23">
            <summary>
            Mask for antenna ID 23.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask24">
            <summary>
            Mask for antenna ID 24.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask25">
            <summary>
            Mask for antenna ID 25.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask26">
            <summary>
            Mask for antenna ID 26.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask27">
            <summary>
            Mask for antenna ID 27.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask28">
            <summary>
            Mask for antenna ID 28.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask29">
            <summary>
            Mask for antenna ID 29.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask30">
            <summary>
            Mask for antenna ID 30.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask31">
            <summary>
            Mask for antenna ID 31.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.Mask32">
            <summary>
            Mask for antenna ID 32.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMask.All">
            <summary>
            All antenna mask identifiers combined.
            </summary>
        </member>
        <member name="T:NurApiDotNet.AntennaType">
            <summary>
            Antenna type flags
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaType.Fast">
            <summary>
             Antenna tune type 'fast'.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaType.Medium">
            <summary>
            Antenna tune type 'medium'.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaType.Wide">
            <summary>
            Antenna tune type 'wide'.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaType.Full">
            <summary>
            Antenna tune type 'full'.
            </summary>
        </member>
        <member name="T:NurApiDotNet.TuneRevertType">
            <summary>
            Tune revert type flags
            </summary>
        </member>
        <member name="F:NurApiDotNet.TuneRevertType.User">
            <summary>
            Restore tuning from user memory.
            </summary>
        </member>
        <member name="F:NurApiDotNet.TuneRevertType.Factory">
            <summary>
            Restore tuning from factory defaults to currently used .
            </summary>
        </member>
        <member name="F:NurApiDotNet.TuneRevertType.Override">
            <summary>
            Override currently used and user saved tuning with factory defaults.
            </summary>
        </member>
        <member name="T:NurApiDotNet.TargetSession">
            <summary>
            Target session flags
            </summary>
        </member>
        <member name="F:NurApiDotNet.TargetSession.S0">
            <summary>
            Target session 0 for inventory or inventory filters.
            </summary>
        </member>
        <member name="F:NurApiDotNet.TargetSession.S1">
            <summary>
            Target session 1 for inventory or inventory filters.
            </summary>
        </member>
        <member name="F:NurApiDotNet.TargetSession.S2">
            <summary>
            Target session 2 for inventory or inventory filters.
            </summary>
        </member>
        <member name="F:NurApiDotNet.TargetSession.S3">
            <summary>
            Target session 3 for inventory or inventory filters.
            </summary>
        </member>
        <member name="F:NurApiDotNet.TargetSession.SL">
            <summary>
            Target session SL flag for inventory or inventory filters. 
            </summary>
        </member>
        <member name="T:NurApiDotNet.FilterAction">
            <summary>
            Filter action flags
            </summary>
        </member>
        <member name="F:NurApiDotNet.FilterAction.Action0">
            <summary>
            Matching tags: assert SL or inventoried session flag to A. Non-matching: deassert SL or inventoried session flag to B.
            </summary>
        </member>
        <member name="F:NurApiDotNet.FilterAction.Action1">
            <summary>
            Matching tags: assert SL or inventoried session flag to A. Non-matching: do nothing.
            </summary>
        </member>
        <member name="F:NurApiDotNet.FilterAction.Action2">
            <summary>
            Matching tags: do nothing. Non-matching: deassert SL or inventoried session to B.
            </summary>
        </member>
        <member name="F:NurApiDotNet.FilterAction.Action3">
            <summary>
             Matching tags: negate SL or invert inventoried session flag (A to B, B to A). Non-matching: do nothing.
            </summary>
        </member>
        <member name="F:NurApiDotNet.FilterAction.Action4">
            <summary>
            Matching tags: deassert SL or inventoried session flag to B. Non-matching: assert SL or inventoried session flag to A.
            </summary>
        </member>
        <member name="F:NurApiDotNet.FilterAction.Action5">
            <summary>
            Matching tags: deassert SL or inventoried session flag to B. Non-matching: do nothing.
            </summary>
        </member>
        <member name="F:NurApiDotNet.FilterAction.Action6">
            <summary>
            Matching tags: do nothing. Non-matching: assert SL or inventoried session flag to A.
            </summary>
        </member>
        <member name="F:NurApiDotNet.FilterAction.Action7">
            <summary>
            Matching tags: do nothing. Non-matching: negate SL or invert inventoried session flag (A to B, B to A).
            </summary>
        </member>
        <member name="T:NurApiDotNet.LinkFrequency">
            <summary>
            Enums of Link frequency. <br/>
            Values Hz
            </summary>
        </member>
        <member name="F:NurApiDotNet.LinkFrequency.None">
            <summary>
            Notset
            </summary>
        </member>
        <member name="F:NurApiDotNet.LinkFrequency.Freq40000">
            <summary>
            NUR module link frequency 40000 Hz.
            </summary>
        </member>
        <member name="F:NurApiDotNet.LinkFrequency.Freq80000">
            <summary>
            NUR module link frequency 80000 Hz.
            </summary>
        </member>
        <member name="F:NurApiDotNet.LinkFrequency.Freq160000">
            <summary>
            NUR module link frequency 160000 Hz.
            </summary>
        </member>
        <member name="F:NurApiDotNet.LinkFrequency.Freq256000">
            <summary>
            NUR module link frequency 256000 Hz.
            </summary>
        </member>
        <member name="F:NurApiDotNet.LinkFrequency.Freq320000">
            <summary>
            NUR module link frequency 320000 Hz.
            </summary>
        </member>
        <member name="F:NurApiDotNet.LinkFrequency.Freq640000">
            <summary>
            NUR module link frequency 640000 Hz.
            </summary>
        </member>
        <member name="T:NurApiDotNet.InventorySelectState">
            <summary>
            Inventory select state flags
            </summary>
        </member>
        <member name="F:NurApiDotNet.InventorySelectState.All">
            <summary>
            Select all (tags in any state).
            </summary>
        </member>
        <member name="F:NurApiDotNet.InventorySelectState.NotSL">
            <summary>
            Select tags in state "SL not set".
            </summary>
        </member>
        <member name="F:NurApiDotNet.InventorySelectState.SL">
            <summary>
            Select tags in state "SL is set".
            </summary>
        </member>
        <member name="T:NurApiDotNet.InventoryTarget">
            <summary>
            Inventory target flags
            </summary>
        </member>
        <member name="F:NurApiDotNet.InventoryTarget.A">
            <summary>
            Query tags with inventoried flag set to A.
            </summary>
        </member>
        <member name="F:NurApiDotNet.InventoryTarget.B">
            <summary>
            Query tags with inventoried flag set to B.
            </summary>
        </member>
        <member name="F:NurApiDotNet.InventoryTarget.AB">
            <summary>
            Query tags with inventoried flag set to A or B.
            </summary>
        </member>
        <member name="T:NurApiDotNet.InventoryReadType">
            <summary>
            Inventory read type flags
            </summary>
        </member>
        <member name="F:NurApiDotNet.InventoryReadType.NotSet">
            <summary>
            Notset
            </summary>
        </member>
        <member name="F:NurApiDotNet.InventoryReadType.EPCData">
            <summary>
            Inventory + read type is EPC + data
            </summary>
        </member>
        <member name="F:NurApiDotNet.InventoryReadType.DataOnly">
            <summary>
            Inventory + read type is data only
            </summary>
        </member>
        <member name="F:NurApiDotNet.InventoryReadType.EpcXTid">
            <summary>
            XTID based read result is appended to the EPC.
            </summary>
        </member>
        <member name="F:NurApiDotNet.InventoryReadType.XTidOnly">
            <summary>
            Duplicates are stripped based on XTID read data
            </summary>
        </member>
        <member name="F:NurApiDotNet.InventoryReadType.EpcXTidAll">
            <summary>
            XTID based read result is appended to the EPC + read to include all of the TID data. 
            </summary>
        </member>
        <member name="F:NurApiDotNet.InventoryReadType.XTidOnlyAll">
            <summary>
            Duplicates are stripped based on XTID read data + include all of the TID data. 
            </summary>
        </member>
        <member name="T:NurApiDotNet.AddressType">
            <summary>
            Address type (IP) flags
            </summary>
        </member>
        <member name="F:NurApiDotNet.AddressType.DHCP">
            <summary>
            IP address via DHCP.
            </summary>
        </member>
        <member name="F:NurApiDotNet.AddressType.Static">
            <summary>
            static IP address.
            </summary>
        </member>
        <member name="T:NurApiDotNet.HostMode">
            <summary>
            Host mode flags
            </summary>
        </member>
        <member name="F:NurApiDotNet.HostMode.Server">
            <summary>
            Host mode: Server.
            </summary>
        </member>
        <member name="F:NurApiDotNet.HostMode.Client">
            <summary>
            Host mode: Client.
            </summary>
        </member>
        <member name="T:NurApiDotNet.RxSensitivity">
            <summary>
            Rx sensitivity flags
            </summary>
        </member>
        <member name="F:NurApiDotNet.RxSensitivity.Low">
            <summary>
            Receiver sensitivity "low".
            </summary>
        </member>
        <member name="F:NurApiDotNet.RxSensitivity.Nominal">
            <summary>
            Receiver sensitivity "nominal".
            </summary>
        </member>
        <member name="F:NurApiDotNet.RxSensitivity.High">
            <summary>
            Receiver sensitivity "high".
            </summary>
        </member>
        <member name="T:NurApiDotNet.RfProfile">
            <summary>
            RF profile flags
            </summary>
        </member>
        <member name="F:NurApiDotNet.RfProfile.Robust">
            <summary>
            Robust RF profile. This profile is recommended to use in noisy RF environments.
            </summary>
        </member>
        <member name="F:NurApiDotNet.RfProfile.Nominal">
            <summary>
            Nominal RF profile. This profile works good in most environments.
            </summary>
        </member>
        <member name="F:NurApiDotNet.RfProfile.HighSpeed">
            <summary>
            High speed RF profile. This profile provides best throughput, but is prone to RF interference.
            </summary>
        </member>
        <member name="T:NurApiDotNet.CustomExchangeFlags">
            <summary>
            Custom exchange flags
            </summary>
        </member>
        <member name="F:NurApiDotNet.CustomExchangeFlags.AsWrite">
            <summary>
             Custom exchange: operation is "like write".
            </summary>
        </member>
        <member name="F:NurApiDotNet.CustomExchangeFlags.UseHandle">
            <summary>
            Custom exchange: use handle from tag / not.
            </summary>
        </member>
        <member name="F:NurApiDotNet.CustomExchangeFlags.XORRN16">
            <summary>
            Custom exchange: XOR received handle with 2-byte data in "like write" operations.
            </summary>
        </member>
        <member name="F:NurApiDotNet.CustomExchangeFlags.TxOnly">
            <summary>
            Custom exchange: transmit only.
            </summary>
        </member>
        <member name="F:NurApiDotNet.CustomExchangeFlags.NOTXCRC">
            <summary>
            Custom exchange: no transmission CRC.
            </summary>
        </member>
        <member name="F:NurApiDotNet.CustomExchangeFlags.NORXCRC">
            <summary>
            Custom exchange: no reception CRC.
            </summary>
        </member>
        <member name="F:NurApiDotNet.CustomExchangeFlags.CRC5">
            <summary>
            Custom exchange: use CRC-5 in transmission.
            </summary>
        </member>
        <member name="F:NurApiDotNet.CustomExchangeFlags.NORXLEN">
            <summary>
            Custom exchange: do not set RX length before receiving.
            </summary>
        </member>
        <member name="F:NurApiDotNet.CustomExchangeFlags.STRIPHND">
            <summary>
            Custom exchange: assume last two last received bytes as handle and strip from response.
            </summary>
        </member>
        <member name="F:NurApiDotNet.CustomExchangeFlags.SKIPRESEL">
            <summary>
            Custom exchange: skip tag access i.e. no "re-selection" during this command
            </summary>
        </member>
        <member name="T:NurApiDotNet.DiagReportFlags">
            <summary>
            Diagnostic report flags
            </summary>
        </member>
        <member name="F:NurApiDotNet.DiagReportFlags.Periodic">
            <summary>
             Set in <see cref="F:NurApiDotNet.NurApi.DiagReport.flags"/> when module sends periodic report.
            </summary>
        </member>
        <member name="F:NurApiDotNet.DiagReportFlags.TempHigh">
            <summary>
            Set in <see cref="F:NurApiDotNet.NurApi.DiagReport.flags"/> if module temperature is high. Host application SHOULD stop performing RF operations for a while.
            </summary>
        </member>
        <member name="F:NurApiDotNet.DiagReportFlags.TempOver">
            <summary>
            Set in <see cref="F:NurApiDotNet.NurApi.DiagReport.flags"/> if module temperature is over limits. All RF operations will fail with error {@link NurApiErrors#OVER_TEMP} in this stage.
            </summary>
        </member>
        <member name="F:NurApiDotNet.DiagReportFlags.LowVolt">
            <summary>
            Set in <see cref="F:NurApiDotNet.NurApi.DiagReport.flags"/> if low voltage is detected. All RF operations will fail with error {@link NurApiErrors#LOW_VOLTAGE} in this stage.
            </summary>
        </member>
        <member name="T:NurApiDotNet.DiagCfgFlags">
            <summary>
            Diagnostic flags
            </summary>
        </member>
        <member name="F:NurApiDotNet.DiagCfgFlags.NotifyNone">
            <summary>
            Never send diagnostics report notification
            </summary>
        </member>
        <member name="F:NurApiDotNet.DiagCfgFlags.NotifyPeriodic">
            <summary>
            Send diagnostics report notification periodically. <see cref="M:NurApiDotNet.NurApi.DiagSetConfig(System.UInt32,System.UInt32)"/>
            </summary>
        </member>
        <member name="F:NurApiDotNet.DiagCfgFlags.NotifyWarning">
            <summary>
            Send diagnostics report notification on warning/error. <see cref="M:NurApiDotNet.NurApi.DiagSetConfig(System.UInt32,System.UInt32)"/>
            </summary>
        </member>
        <member name="F:NurApiDotNet.DiagCfgFlags.FwErrorLog">
            <summary>
            Module sends error log messages.
            </summary>
        </member>
        <member name="F:NurApiDotNet.DiagCfgFlags.FwDebugLog">
            <summary>
            Module sends verbose debug log messages.
            </summary>
        </member>
        <member name="T:NurApiDotNet.AutoPeriod">
            <summary>
            Auto period flags
            </summary>
        </member>
        <member name="F:NurApiDotNet.AutoPeriod.Off">
            <summary>
            Autoperiod not in use
            </summary>
        </member>
        <member name="F:NurApiDotNet.AutoPeriod.AutoPeriod25">
            <summary>
            25% cycle. max 100ms off
            </summary>
        </member>
        <member name="F:NurApiDotNet.AutoPeriod.AutoPeriod33">
            <summary>
            33% cycle. max 500ms off
            </summary>
        </member>
        <member name="F:NurApiDotNet.AutoPeriod.AutoPeriod50">
            <summary>
            50/50 cycle. max 1000ms off
            </summary>
        </member>
        <member name="F:NurApiDotNet.AutoPeriod.AutoPeriodForce1000">
            <summary>
            Force 1000ms sleep
            </summary>
        </member>
        <member name="F:NurApiDotNet.AutoPeriod.AutoPeriodForce500">
            <summary>
            Force 500ms sleep
            </summary>
        </member>
        <member name="F:NurApiDotNet.AutoPeriod.AutoPeriodForce100">
            <summary>
            Force 100ms sleep
            </summary>
        </member>
        <member name="T:NurApiDotNet.OperationFlag">
            <summary>
            Operation flags
            </summary>
        </member>
        <member name="F:NurApiDotNet.OperationFlag.HopEvents">
            <summary>
            Operation flag, Notification <see cref="E:NurApiDotNet.NurApi.HopEvent"/> is enabled.
            </summary>
        </member>
        <member name="F:NurApiDotNet.OperationFlag.InventoryStreamZeros">
            <summary>
            Operation flag, Inventory stream frunction will report zero count inventory rounds also.
            </summary>
        </member>
        <member name="F:NurApiDotNet.OperationFlag.TuneEvent">
            <summary>
            Operation flag, defines tune event enable / disable.
            </summary>
        </member>
        <member name="F:NurApiDotNet.OperationFlag.ExactBLF">
            <summary>
            Operation flag, enable / disable exact LF detection. Supported only in NUR L2 modules.
            </summary>
        </member>
        <member name="F:NurApiDotNet.OperationFlag.TagPhase">
            <summary>
            Operation flag, return tag phase angle in units of tenths of degrees in tag meta data timestamp field. Supported only in NUR2 modules.
            </summary>
        </member>
        <member name="F:NurApiDotNet.OperationFlag.NxpBid">
            <summary>
            NXP Brand ID in NXP UCODE8 tag is enabled
            </summary>
        </member>
        <member name="F:NurApiDotNet.OperationFlag.IrMemOverrun">
            <summary>
            Inventory read will report EPC even if there is memory overrun error (f.ex. no user mem bank)
            </summary>
        </member>
        <member name="F:NurApiDotNet.OperationFlag.PhaseDiff">
            <summary>
            Return tag phase angle difference in units of tenths of degrees in tag meta data timestamp field. Supported only in NUR3 modules.
            </summary>
        </member>
        <member name="T:NurApiDotNet.Bank">
            <summary>
            Memory Banks
            </summary>
        </member>
        <member name="F:NurApiDotNet.Bank.NotSet">
            <summary>
            Notset
            </summary>
        </member>
        <member name="F:NurApiDotNet.Bank.Password">
            <summary>
            Password memory bank.
            </summary>
        </member>
        <member name="F:NurApiDotNet.Bank.EPC">
            <summary>
            EPC memory bank.
            </summary>
        </member>
        <member name="F:NurApiDotNet.Bank.TID">
            <summary>
            TID memory bank. 
            </summary>
        </member>
        <member name="F:NurApiDotNet.Bank.User">
            <summary>
            User memory bank.
            </summary>
        </member>
        <member name="T:NurApiDotNet.TraceTagFlag">
            <summary>
            Trace tag flags
            </summary>
        </member>
        <member name="F:NurApiDotNet.TraceTagFlag.None">
            <summary>
            Not set
            </summary>
        </member>
        <member name="F:NurApiDotNet.TraceTagFlag.NoEPC">
            <summary>
            Do not transfer EPC back from trace tag function.
            </summary>
        </member>
        <member name="F:NurApiDotNet.TraceTagFlag.StartContinuous">
            <summary>
             Start continuous tag tracing.
            </summary>
        </member>
        <member name="F:NurApiDotNet.TraceTagFlag.StopContinuous">
            <summary>
            Stop continuous tag tracing.
            </summary>
        </member>
        <member name="T:NurApiDotNet.SetupFlags">
            <summary>
            Module setup flags
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.LinkFreq">
            <summary>
            Link frequency. See also the link frequency property: <see cref="T:NurApiDotNet.LinkFrequency"/>        
            </summary>   
        </member>
        <member name="F:NurApiDotNet.SetupFlags.RxDec">
            <summary>
            <para>RX encoding (Miller encoding) (see<see cref="T:NurApiDotNet.RxDecoding"/> property)</para>        
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.TxLevel">
            <summary>
            Transmission (TX) power level in 1dB steps. See also the <see cref="F:NurApiDotNet.SetupFlags.TxLevel"/> property)			
            <para>Range is 0...19: there are 20 (0...19) steps so minimum output power value for 500mW devices is 8dBm (about 6mW) and 11dBm (about 40W) for the 1W devices.</para>
            <para>This value is subtracted from the maxiumum TX level producing the actual level as follows:</para>
            <list type="table"> <listheader><term>TX Level</term><desc1>Power dBm / mW (500 mW device)</desc1><desc2>Power dBm / mW (1W device)</desc2></listheader>
            <item><term>0</term><desc1>27 / 500</desc1><desc2>30 / 1000</desc2></item>
            <item><term>1</term><desc1>26 / 398</desc1><desc2>29 / 794</desc2></item>
            <item><term>2</term><desc1>25 / 316</desc1><desc2>28 / 631</desc2></item>
            <item><term>3</term><desc1>24 / 251</desc1><desc2>27 / 501</desc2></item>
            <item><term>4</term><desc1>23 / 200</desc1><desc2>26 / 398</desc2></item>
            <item><term>5</term><desc1>22 / 158</desc1><desc2>25 / 316</desc2></item>
            <item><term>6</term><desc1>21 / 126</desc1><desc2>24 / 251</desc2></item>
            <item><term>7</term><desc1>20 / 100</desc1><desc2>23 / 200</desc2></item>
            <item><term>8</term><desc1>19 / 79</desc1><desc2>22 / 158</desc2></item>
            <item><term>9</term><desc1>18 / 63</desc1><desc2>21 / 126</desc2></item>
            <item><term>10</term><desc1>17 / 50</desc1><desc2>20 / 100</desc2></item>
            <item><term>11</term><desc1>16 / 40</desc1><desc2>19 / 79</desc2></item>
            <item><term>12</term><desc1>15 / 32</desc1><desc2>18 / 63</desc2></item>
            <item><term>13</term><desc1>14 / 25</desc1><desc2>17 / 50</desc2></item>
            <item><term>14</term><desc1>13 / 20</desc1><desc2>16 / 40</desc2></item>
            <item><term>15</term><desc1>12 / 16</desc1><desc2>15 / 32</desc2></item>
            <item><term>16</term><desc1>11 / 13</desc1><desc2>14 / 25</desc2></item>
            <item><term>17</term><desc1>10 / 10</desc1><desc2>13 / 20</desc2></item>
            <item><term>18</term><desc1>9 / 8</desc1><desc2>12 / 16</desc2></item>
            <item><term>19</term><desc1>8 / 6</desc1><desc2>11 / 13</desc2></item>
            </list>
            </summary>  
        </member>
        <member name="F:NurApiDotNet.SetupFlags.TxMod">
            <summary>
            Tx modulation style. (see <see cref="T:NurApiDotNet.TxModulation"/> property)        
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.Region">
            <summary>
            Region. (see <see cref="T:NurApiDotNet.RegionId"/>)
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.InventoryQ">
            <summary>
            Default Q used for inventory. (0-15) 0=Automatic
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.InventorySession">
            <summary>
            Default session for inventory. <see cref="T:NurApiDotNet.TargetSession"/>.
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.InventoryRounds">
            <summary>
             Default rounds for inventory. (0 - 10) 0=Automatic
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.AntennaMask">
            <summary>
            Antenna mask field in <see cref="T:NurApiDotNet.NurApi.ModuleSetup"/>.
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.ScanSingleTimeout">
            <summary>
            Scan single trigger timeout field in <see cref="T:NurApiDotNet.NurApi.ModuleSetup"/>.
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.InventoryTimeout">
            <summary>
            Inventory trigger timeout field in <see cref="T:NurApiDotNet.NurApi.ModuleSetup"/>.
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.SelectedAntenna">
            <summary>
            Selected antenna field in <see cref="T:NurApiDotNet.NurApi.ModuleSetup"/>. 
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.OperationFlags">
            <summary>
            Operation flags field in <see cref="T:NurApiDotNet.NurApi.ModuleSetup"/>.
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.InventoryTarget">
            <summary>
            Inventory target field in <see cref="T:NurApiDotNet.NurApi.ModuleSetup"/>. 
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.MinimumSetupMask">
            <summary>
            Minimum mask that will work backward compatibly. 
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.InventoryEpcLen">
            <summary>
            Inventory EPC length field in <see cref="T:NurApiDotNet.NurApi.ModuleSetup"/>.
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.ReadRssiFilter">
            <summary>
            Read RSSI filter field in <see cref="T:NurApiDotNet.NurApi.ModuleSetup"/>.
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.WriteRssiFilter">
            <summary>
             Write RSSI filter field in <see cref="T:NurApiDotNet.NurApi.ModuleSetup"/>.
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.InventoryRssiFilter">
            <summary>
            Inventory RSSI filter field in <see cref="T:NurApiDotNet.NurApi.ModuleSetup"/>.
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.ReadTimeout">
            <summary>
             Read timeout field in <see cref="T:NurApiDotNet.NurApi.ModuleSetup"/>.
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.WriteTimeout">
            <summary>
            Write timeout field in <see cref="T:NurApiDotNet.NurApi.ModuleSetup"/>.
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.LockTimeout">
            <summary>
            Lock timeout field in <see cref="T:NurApiDotNet.NurApi.ModuleSetup"/>.
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.Killtimeout">
            <summary>
            Kill timeout field in <see cref="T:NurApiDotNet.NurApi.ModuleSetup"/>.
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.Autoperiod">
            <summary>
            Period setup field in <see cref="T:NurApiDotNet.NurApi.ModuleSetup"/>.
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.PerAntennaPower">
            <summary>
            Per antenna power field in <see cref="T:NurApiDotNet.NurApi.ModuleSetup"/>.
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.PerAntennaOffset">
            <summary>
            Power offset field in <see cref="T:NurApiDotNet.NurApi.ModuleSetup"/>.
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.AntennaMaskEx">
            <summary>
            Extended antenna mask field in <see cref="T:NurApiDotNet.AntennaId"/>.
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.Autotune">
            <summary>
            Runtime auto-tuning setup in <see cref="T:NurApiDotNet.AutoPeriod"/>.
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.PerAntennaPowerEx">
            <summary>
            Per antenna power (extended) field in <see cref="T:NurApiDotNet.NurApi.ModuleSetup"/>.
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.RxSensitivity">
            <summary>
            Receiver sensitivity field in <see cref="T:NurApiDotNet.NurApi.ModuleSetup"/>.
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.RfProfile">
            <summary>
            rfProfile field in <see cref="T:NurApiDotNet.NurApi.ModuleSetup"/>
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.All">
            <summary>
            All setup fields are valid.
            </summary>
        </member>
        <member name="F:NurApiDotNet.SetupFlags.MaskFor05W">
            <summary>
            Mask for 05W field in <see cref="T:NurApiDotNet.NurApi.ModuleSetup"/>
            </summary>
        </member>
        <member name="T:NurApiDotNet.StoreFlags">
            <summary>
            Store flags when saving setup in to the module internal non-volatile memory
            </summary>
            <see cref="M:NurApiDotNet.NurApi.StoreCurrentSetup(System.Int32)"/>
        </member>
        <member name="F:NurApiDotNet.StoreFlags.RF">
            <summary>
             Store RF settings.
            </summary>
        </member>
        <member name="F:NurApiDotNet.StoreFlags.GPIO">
            <summary>
             Store GPIO/Sensor settings.
            </summary>
        </member>
        <member name="F:NurApiDotNet.StoreFlags.BAUDRATE">
            <summary>
            Store Baudrate setting.
            </summary>
        </member>
        <member name="F:NurApiDotNet.StoreFlags.OPFLAGS">
            <summary>
            Store OpFlags setting.
            </summary>
        </member>
        <member name="F:NurApiDotNet.StoreFlags.ALL">
            <summary>
             Store all settings.
            </summary>
        </member>
        <member name="T:NurApiDotNet.Baudrate">
            <summary>
            Serial baudrate of Nur module
            </summary>
        </member>
        <member name="F:NurApiDotNet.Baudrate.Br115200">
            <summary>
            NUR module baudrate, 115200 bps.
            </summary>
        </member>
        <member name="F:NurApiDotNet.Baudrate.Br230400">
            <summary>
            NUR module baudrate, 230400 bps.
            </summary>
        </member>
        <member name="F:NurApiDotNet.Baudrate.Br500000">
            <summary>
            NUR module baudrate, 500000 bps.
            </summary>
        </member>
        <member name="F:NurApiDotNet.Baudrate.Br1000000">
            <summary>
            NUR module baudrate, 1000000 bps.
            </summary>
        </member>
        <member name="F:NurApiDotNet.Baudrate.Br1500000">
            <summary>
            NUR module baudrate, 1500000 bps (use with care).
            </summary>
        </member>
        <member name="F:NurApiDotNet.Baudrate.Br38400">
            <summary>
            NUR module baudrate, 38400 bps.
            </summary>
        </member>
        <member name="T:NurApiDotNet.LockAction">
            <summary>
            Lock action flags
            </summary>
        </member>
        <member name="F:NurApiDotNet.LockAction.Open">
            <summary>
            Associated memory bank is readable from open/secured states.
            </summary>
        </member>
        <member name="F:NurApiDotNet.LockAction.PermaWrite">
            <summary>
            Associated memory bank is permanently writable from open/secured states and may never be locked.
            </summary>
        </member>
        <member name="F:NurApiDotNet.LockAction.Secured">
            <summary>
            Associated memory bank is writable only from secured state.
            </summary>
        </member>
        <member name="F:NurApiDotNet.LockAction.PermaLock">
            <summary>
            Associated memory bank is not writable from any state. If locked memory is AccessPwd or KillPwd memory is not readable from any state.
            </summary>
        </member>
        <member name="T:NurApiDotNet.LockMemoryMask">
            <summary>
            Memory lock mask flags
            </summary>
        </member>
        <member name="F:NurApiDotNet.LockMemoryMask.UserMem">
            <summary>
            User memory bank lock mask.
            </summary>
        </member>
        <member name="F:NurApiDotNet.LockMemoryMask.TID">
            <summary>
            TID memory bank lock mask.
            </summary>
        </member>
        <member name="F:NurApiDotNet.LockMemoryMask.EPC">
            <summary>
            EPC memory bank lock mask.
            </summary>
        </member>
        <member name="F:NurApiDotNet.LockMemoryMask.AccessPwdMem">
            <summary>
            Access password memory lock mask.
            </summary>
        </member>
        <member name="F:NurApiDotNet.LockMemoryMask.KillPwdMem">
            <summary>
            Kill password memory lock mask.
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurApiErrors">
            <summary>
            Class of NurApiErrors
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_SUCCESS">
            <summary>Call succeeded; Same as NUR_NO_ERROR</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_NO_ERROR">
            <summary>Call succeeded; Same as NUR_SUCCESS</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_INVALID_COMMAND">
            <summary>Invalid command sent to module</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_INVALID_LENGTH">
            <summary>Invalid packet length sent to module</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_PARAMETER_OUT_OF_RANGE">
            <summary>Command parametr(s) out of range</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_RECEIVE_TIMEOUT">
            <summary>Data receive timeout</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_INVALID_PARAMETER">
            <summary>Invalid command parameter(s); Invalid function parameter(s)</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_PROGRAM_FAILED">
            <summary>Programming failure</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_PARAMETER_MISMATCH">
            <summary>Parameter mismatch</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_HW_MISMATCH">
            <summary>HW mismatch</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_RESERVED1">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_PAGE_PROGRAM">
            <summary>Page programming failure</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_CRC_CHECK">
            <summary>Memory check failed</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_CRC_MISMATCH">
            <summary>CRC mismatch in parameter</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_NOT_READY">
            <summary>Device not ready or region that is being programmed is not unlocked</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_APP_NOT_PRESENT">
            <summary>Module application not present</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_GENERAL">
            <summary>Generic = ; non-interpreted / unexpected error</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_RESEND_PACKET">
            <summary>Device wants to have last packet again due to the transfer failure.</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_NO_TAG">
            <summary>No tag(s) found</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_RESP_AIR">
            <summary>Air error</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_G2_SELECT">
            <summary>G2 select error</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_MISSING_SELDATA">
            <summary>G2 select data missing</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_G2_ACCESS">
            <summary>G2 access error</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_G2_READ">
            <summary>G2 Read error = ; unspecified</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_G2_RD_PART">
            <summary>G2 Partially successful read</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_G2_WRITE">
            <summary>G2 Write error = ; unspecified</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_G2_WR_PART">
            <summary>G2 Partially successful write</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_G2_TAG_RESP">
            <summary>G2 Tag read responded w/ error</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_G2_SPECIAL">
            <summary>Special error; Some additional debug data is returned with this error</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_READER_HW">
            <summary>HW error</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_BAD_ANTENNA">
            <summary>Antenna too bad</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_LOW_VOLTAGE">
            <summary>Low voltage</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_OVER_TEMP">
            <summary>Over temperature</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_INVALID_HANDLE">
            <summary>Invalid handle passed to function</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_TRANSPORT">
            <summary>Transport error</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_TR_NOT_CONNECTED">
            <summary>Transport not connected</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_TR_TIMEOUT">
            <summary>Transport timeout</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_BUFFER_TOO_SMALL">
            <summary>Buffer too small</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_NOT_SUPPORTED">
            <summary>Functionality not supported</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_NO_PAYLOAD">
            <summary>Packet contains no payload</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_INVALID_PACKET">
            <summary>Packet is invalid</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_PACKET_TOO_LONG">
            <summary>Packet too long</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_PACKET_CS_ERROR">
            <summary>Packet Checksum failure</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_NOT_WORD_BOUNDARY">
            <summary>Data not in WORD boundary</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_FILE_NOT_FOUND">
            <summary>File not found</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_FILE_INVALID">
            <summary>File error; not in NUR format</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_MCU_ARCH">
            <summary>NUR file and module's MCU architecture mismatch</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_G2_TAG_MEM_OVERRUN">
            <summary>The specified memory location does not exists or the EPC length field is not supported by the tag</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_G2_TAG_MEM_LOCKED">
            <summary>The specified memory location is locked and/or permalocked and is either not writeable or not readable</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_G2_TAG_INSUF_POWER">
            <summary>The tag has insufficient power to perform the memory-write operation</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_G2_TAG_NON_SPECIFIC">
            <summary>The tag does not support error-specific codes</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_TR_SUSPENDED">
            <summary>Transport suspended error</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_SERVER">
            <summary>TCP/IP Server error</summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_QUERY_BUSY">
            <summary> Device query is busy. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_G2_TAG_OTHER_ERROR">
            <summary> Tag backscattered error code 0x00: "catch all" error. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_G2_TAG_NOT_SUPPORTED">
            <summary> Tag backscattered error code 0x01: not supported parameters or feature. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_G2_TAG_INSUF_PRIVILEDGE">
            <summary> Tag backscattered error code 0x04: insufficient priviledge. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_G2_TAG_CRYPTO_SUITE">
            <summary> Tag backscattered error code 0x05: cryptographic suite error. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_G2_TAG_NOT_ENCAPSULATED">
            <summary> Tag backscattered error code 0x06: command was not encapsulated in AuthComm or SecureComm. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_G2_TAG_RESPBUFFER_OVF">
            <summary> Tag backscattered error code 0x07: ResponseBuffer overflowed. </summary>
        </member>
        <member name="F:NurApiDotNet.NurApiErrors.NUR_ERROR_G2_TAG_SEC_TIMEOUT">
            <summary> Tag backscattered error code 0x10: failure because of security timeout. </summary>
        </member>
        <member name="M:NurApiDotNet.NurApiErrors.ErrorCodeToString(System.Int32)">
            <summary>
            Get human readable error message for error code.
            </summary>
            <param name="errorCode">The error code.</param>
            <returns>Human readable error message </returns>
        </member>
        <member name="M:NurApiDotNet.NurExtensions.GetQueryParam(System.Uri,System.String)">
            <summary>
            Return value from Uri query string.
            </summary>
            <param name="uri">this</param>
            <param name="param">Key to return</param>
            <returns>Value for key</returns>
        </member>
        <member name="M:NurApiDotNet.NurExtensions.GetAddress(System.Uri)">
            <summary>
            Get address only from Uri
            </summary>
            <param name="uri">this</param>
            <returns>Address</returns>
        </member>
        <member name="T:NurApiDotNet.NurPacket">
            <summary>
            Nur protocol packet class
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurPacketHeader">
            <summary>
            Nur protocol packet header
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurRingBuffer">
            <summary>
            General purpose ring buffer
            </summary>
        </member>
        <member name="P:NurApiDotNet.PermissionRequiredEventArgs.Uri">
            <summary>
            The Uri connection string of the device that requires permission.
            </summary>
        </member>
        <member name="T:NurApiDotNet.AntennaMapping">
            <summary>
            Reader antenna.<br/>
            Holds information about antenna physical name and ID.
            </summary>      
        </member>
        <member name="F:NurApiDotNet.AntennaMapping.AntennaId">
            <summary>
            ID of antenna (0 - 31)
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMapping.Name">
            <summary>
            Name of antenna
            </summary>
        </member>
        <member name="F:NurApiDotNet.AntennaMapping.LowerName">
            <summary>
            Name of antenna (ToLower)
            </summary>
        </member>
        <member name="M:NurApiDotNet.AntennaMapping.#ctor(System.Int32,System.String)">
            <summary>
            Contructor of new AntennaMapping item
            </summary>
            <param name="id">antenna ID </param>
            <param name="name">antenna name</param>
        </member>
        <member name="F:NurApiDotNet.NurV2ReadBufferParam.MIN_BITS">
            Minimum number of bits that can be read from the tag. 
        </member>
        <member name="F:NurApiDotNet.NurV2ReadBufferParam.MAX_BITS">
            Maximum number of bits that can be read from the tag. 
        </member>
        <member name="F:NurApiDotNet.NurV2ReadBufferParam.MIN_ADDR">
            Minimum bit address to read from. 
        </member>
        <member name="F:NurApiDotNet.NurV2ReadBufferParam.MAX_ADDR">
            Maximum bit address to read from. 
        </member>
        <member name="F:NurApiDotNet.NurV2ReadBufferParam.bitAddress">
            Bit address within the tag's internal buffer. 
        </member>
        <member name="F:NurApiDotNet.NurV2ReadBufferParam.bitCount">
            Number of bits to read from the tag's internal buffer. 
        </member>
        <member name="F:NurApiDotNet.NurV2ReadBufferParam.timeout">
            Millisecond timeout to wait for response. 
        </member>
        <member name="T:NurApiDotNet.UntraceableParam">
            <summary>
            Gen2 version 2 Untraceable-command's parameters.
            </summary>
        </member>
        <member name="F:NurApiDotNet.UntraceableParam.setU">
            <summary> U-bit value; true for '1', false for '0'.</summary>
        </member>
        <member name="F:NurApiDotNet.UntraceableParam.rxAttn">
            <summary> RX attenuation for response reception; true causes "write-like" operation thus reduces operation's range. </summary>
        </member>
        <member name="F:NurApiDotNet.UntraceableParam.hideUser">
            <summary> If true then the EPC is hidden according to other rules. </summary>
        </member>
        <member name="F:NurApiDotNet.UntraceableParam.hideEPC">
            <summary> New length of the EPC in 16-bit words. Allowed range is 0..31. </summary>
        </member>
        <member name="F:NurApiDotNet.UntraceableParam.epcWordLen">
            <summary> New length of the EPC in 16-bit words. Allowed range is 0..31. </summary>
        </member>
        <member name="F:NurApiDotNet.UntraceableParam.tidPolicy">
            <summary> TID hiding policy: <seealso cref="F:NurApiDotNet.NurApi.TID_HIDE_NONE"/>, <seealso cref="F:NurApiDotNet.NurApi.TID_HIDE_SOME"/> and <seealso cref="F:NurApiDotNet.NurApi.TID_HIDE_ALL"/>. </summary>
        </member>
        <member name="F:NurApiDotNet.UntraceableParam.rangePolicy">
            <summary> User memory hiding policy: true = hide, false = don't hide. </summary>
        </member>
        <member name="M:NurApiDotNet.UntraceableParam.#ctor(NurApiDotNet.UntraceableParam)">
            <summary>
            Constructor that copies parameters from another untraceable instance.
            </summary>
            <param name="other">The untraceable class to copy from.</param>
        </member>
        <member name="T:NurApiDotNet.NurDeviceDiscoveryEventArgs">
            <summary>
            DeviceDiscoveryEvent >arguments
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurDeviceDiscoveryEventArgs.Uri">
            <summary>
            Uri schecme of device found
            </summary>
        </member>
        <member name="F:NurApiDotNet.NurDeviceDiscoveryEventArgs.Visible">
            <summary>
            True if device visible, false otherwise
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurDeviceDiscoveryEventArgs.ToString">
            <summary>
            URI + Visible ToString()
            </summary>
            <returns>URI + Visible ToString()</returns>
        </member>
        <member name="T:NurApiDotNet.INurDeviceDiscovery">
            <summary>
            Interface for NUR device discovery
            </summary>
        </member>
        <member name="E:NurApiDotNet.INurDeviceDiscovery.DeviceDiscoveryEvent">
            <summary>
            DeviceDiscoveryEvent fires when NUR reader has been found.
            </summary>
        </member>
        <member name="M:NurApiDotNet.INurDeviceDiscovery.Start">
            <summary>
            Start background discovery
            </summary>
        </member>
        <member name="M:NurApiDotNet.INurDeviceDiscovery.Stop">
            <summary>
            Stop background discovery  
            </summary>
        </member>
        <member name="M:NurApiDotNet.INurDeviceDiscovery.PeriodicCheck">
            <summary>
            Check device availability time-to-time
            </summary>
        </member>
        <member name="P:NurApiDotNet.INurDeviceDiscovery.Scheme">
            <summary>
            Supported Uri scheme
            </summary>
        </member>
        <member name="P:NurApiDotNet.INurDeviceDiscovery.IsActive">
            <summary>
            Active state of the background discovery
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurDeviceDiscoveryRefCounted">
            <summary>
            
            </summary>
        </member>
        <member name="T:NurApiDotNet.NurDeviceDiscovery">
            <summary>
            Class for discovering NUR devices from Network/BLE/Serial
            NOTE: BLE and serial port support depends on platform and must be explicitly added to project
            </summary>
            <example>
            Example shows how to start device discovery.<para/><para/>
            <code lang="C#">
            
            // Called by NurDeviceDiscovery when device has appeared or disappeared.
            void DeviceDiscoveryCallback(object sender, NurDeviceDiscoveryEventArgs args)
            {
                if (args.Visible)
                    MyDeviceAppeared(args.Uri);
                else
                    MyDeviceDisappeared(args.Uri);
            }
            
            void MyStartDeviceSearch()
            {
                // Start device search with all supported schemes
                NurDeviceDiscovery.Start(DeviceDiscoveryCallback);
            }
            
            void MyStopDeviceSearch()
            {
                // Stop device discovery
                NurDeviceDiscovery.Stop(DeviceDiscoveryCallback);
            }
            </code>
            See full sample app <see cref="T:NurApiDotNet.NurApiDocSample"/>
            </example>
        </member>
        <member name="F:NurApiDotNet.NurDeviceDiscovery.DiscoveryInterval">
            <summary>
            Discovery interval as milliseconds
            </summary>
        </member>
        <member name="E:NurApiDotNet.NurDeviceDiscovery.ErrorEvent">
            <summary>
            Error event
            </summary>
        </member>
        <member name="E:NurApiDotNet.NurDeviceDiscovery.ErrorEventEx">
            <summary>
            Occurs when an error event is raised, providing exception details.
            Use the <see cref="N:NurApiDotNet.Exceptions"/> namespace to inspect and handle specific exception types.
            </summary>
        </member>
        <member name="M:NurApiDotNet.NurDeviceDiscovery.Start(NurApiDotNet.NurDeviceDiscoveryCallback,System.String[])">
            <summary>
            Start discovery
            </summary>
            <param name="cb">callback function</param>
            <param name="schemes">Schemes to found. null=all</param>
        </member>
        <member name="M:NurApiDotNet.NurDeviceDiscovery.Stop(NurApiDotNet.NurDeviceDiscoveryCallback)">
            <summary>
            Stop discovery
            </summary>
            <param name="cb">callback function</param>
        </member>
        <member name="M:NurApiDotNet.NurTransport.CheckPermissions(System.Uri)">
            <summary>
            Additionally, check permissions on a given uri. This is ran just before connect.
            </summary>
            <param name="uri"></param>
        </member>
    </members>
</doc>
